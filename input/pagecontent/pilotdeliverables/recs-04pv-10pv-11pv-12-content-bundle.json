{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSCommonConfig",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSCommonConfig</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSCommonConfig version '2.0.1'\n\n// Opioid Review Useful\ndefine &quot;Age Less than 18 Years Is Enabled&quot;:\n  true\n\n// Opioid Review Useful\ndefine &quot;End-Stage Disease Criteria Enabled&quot;:\n  true\n\n// Active Cancer Treatment\ndefine &quot;Active Cancer Treatment Encounters Condition Is Enabled&quot;:\n  true\n\n// Opioid Naive\ndefine &quot;Opioid Naive Prescription Condition Is Enabled&quot;:\n  true\n\n// Opioid Naive\ndefine &quot;Opioid Naive Report Condition Is Enabled&quot;:\n  true\n\n// Opioid Naive\ndefine &quot;Opioid Naive Dispense Condition Is Enabled&quot;:\n  true\n\n// Recommendation 2\ndefine &quot;Opioid Treatment Plan Verification Enabled&quot;:\n  true\n\n// Recommendation 3\ndefine &quot;Opioid Harms &amp; Risks Discussion in Past 90 Days Criteria Enabled&quot;:\n  true\n\n// Recommendation 6\ndefine &quot;Order is to Treat Acute Pain Enabled&quot;:\n  true\n\n// Recommendation 8\ndefine &quot;Evidence of Naloxone Enabled&quot;:\n  true\n\n// Recommendation 9\ndefine &quot;PDMP Data Not Reviewed in Past 90 Days Criteria Enabled&quot;:\n  true\n\n// Recommendation 12\ndefine &quot;Evidence Based Treatment Criteria For Opioid Use Disorder&quot;:\n  true\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig",
        "version": "2.0.1",
        "name": "OpioidCDSCommonConfig",
        "title": "Library - OpioidCDS Common Configuration",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGxpYnJhcnkgeG1sbnM9InVybjpobDctb3JnOmVsbTpyMSIgeG1sbnM6dD0idXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczpmaGlyPSJodHRwOi8vaGw3Lm9yZy9maGlyIiB4bWxuczpxZG00Mz0idXJuOmhlYWx0aGl0LWdvdjpxZG06djRfMyIgeG1sbnM6cWRtNTM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY1XzMiIHhtbG5zOmE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSI+CiAgIDxhbm5vdGF0aW9uIHRyYW5zbGF0b3JWZXJzaW9uPSIxLjIiIHRyYW5zbGF0b3JPcHRpb25zPSJFbmFibGVEYXRlUmFuZ2VPcHRpbWl6YXRpb24iIHhzaTp0eXBlPSJhOkNxbFRvRWxtSW5mbyIvPgogICA8aWRlbnRpZmllciBpZD0iT3Bpb2lkQ0RTQ29tbW9uQ29uZmlnIiB2ZXJzaW9uPSIyLjAuMSIvPgogICA8c2NoZW1hSWRlbnRpZmllciBpZD0idXJuOmhsNy1vcmc6ZWxtIiB2ZXJzaW9uPSJyMSIvPgogICA8dXNpbmdzPgogICAgICA8ZGVmIGxvY2FsSWRlbnRpZmllcj0iU3lzdGVtIiB1cmk9InVybjpobDctb3JnOmVsbS10eXBlczpyMSIvPgogICA8L3VzaW5ncz4KICAgPHN0YXRlbWVudHM+CiAgICAgIDxkZWYgbmFtZT0iQWdlIExlc3MgdGhhbiAxOCBZZWFycyBJcyBFbmFibGVkIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OkJvb2xlYW4iIHZhbHVlPSJ0cnVlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJFbmQtU3RhZ2UgRGlzZWFzZSBDcml0ZXJpYSBFbmFibGVkIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OkJvb2xlYW4iIHZhbHVlPSJ0cnVlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJBY3RpdmUgQ2FuY2VyIFRyZWF0bWVudCBFbmNvdW50ZXJzIENvbmRpdGlvbiBJcyBFbmFibGVkIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OkJvb2xlYW4iIHZhbHVlPSJ0cnVlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJBY3RpdmUgQ2FuY2VyIFRyZWF0bWVudCBQcmFjdGl0aW9uZXJSb2xlIFNwZWNpYWx0eSBJcyBFbmFibGVkIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OkJvb2xlYW4iIHZhbHVlPSJmYWxzZSIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbmFtZT0iT3Bpb2lkIE5haXZlIFByZXNjcmlwdGlvbiBDb25kaXRpb24gSXMgRW5hYmxlZCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxleHByZXNzaW9uIHZhbHVlVHlwZT0idDpCb29sZWFuIiB2YWx1ZT0idHJ1ZSIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbmFtZT0iT3Bpb2lkIE5haXZlIFJlcG9ydCBDb25kaXRpb24gSXMgRW5hYmxlZCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxleHByZXNzaW9uIHZhbHVlVHlwZT0idDpCb29sZWFuIiB2YWx1ZT0idHJ1ZSIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbmFtZT0iT3Bpb2lkIE5haXZlIERpc3BlbnNlIENvbmRpdGlvbiBJcyBFbmFibGVkIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OkJvb2xlYW4iIHZhbHVlPSJ0cnVlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJPcGlvaWQgVHJlYXRtZW50IFBsYW4gVmVyaWZpY2F0aW9uIEVuYWJsZWQiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9InRydWUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9Ik9waW9pZCBIYXJtcyAmYW1wOyBSaXNrcyBEaXNjdXNzaW9uIGluIFBhc3QgOTAgRGF5cyBDcml0ZXJpYSBFbmFibGVkIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OkJvb2xlYW4iIHZhbHVlPSJ0cnVlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJPcmRlciBpcyB0byBUcmVhdCBBY3V0ZSBQYWluIEVuYWJsZWQiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9InRydWUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9IkV2aWRlbmNlIG9mIE5hbG94b25lIEVuYWJsZWQiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9InRydWUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9IlBETVAgRGF0YSBOb3QgUmV2aWV3ZWQgaW4gUGFzdCA5MCBEYXlzIENyaXRlcmlhIEVuYWJsZWQiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9InRydWUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9IkV2aWRlbmNlIEJhc2VkIFRyZWF0bWVudCBDcml0ZXJpYSBGb3IgT3Bpb2lkIFVzZSBEaXNvcmRlciIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxleHByZXNzaW9uIHZhbHVlVHlwZT0idDpCb29sZWFuIiB2YWx1ZT0idHJ1ZSIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgPC9kZWY+CiAgIDwvc3RhdGVtZW50cz4KPC9saWJyYXJ5Pgo="
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBPcGlvaWRDRFNDb21tb25Db25maWcgdmVyc2lvbiAnMi4wLjEnCgovLyBPcGlvaWQgUmV2aWV3IFVzZWZ1bApkZWZpbmUgIkFnZSBMZXNzIHRoYW4gMTggWWVhcnMgSXMgRW5hYmxlZCI6CiAgdHJ1ZQoKLy8gT3Bpb2lkIFJldmlldyBVc2VmdWwKZGVmaW5lICJFbmQtU3RhZ2UgRGlzZWFzZSBDcml0ZXJpYSBFbmFibGVkIjoKICB0cnVlCgovLyBBY3RpdmUgQ2FuY2VyIFRyZWF0bWVudApkZWZpbmUgIkFjdGl2ZSBDYW5jZXIgVHJlYXRtZW50IEVuY291bnRlcnMgQ29uZGl0aW9uIElzIEVuYWJsZWQiOgogIHRydWUKCmRlZmluZSAiQWN0aXZlIENhbmNlciBUcmVhdG1lbnQgUHJhY3RpdGlvbmVyUm9sZSBTcGVjaWFsdHkgSXMgRW5hYmxlZCI6CiAgZmFsc2UKCi8vIE9waW9pZCBOYWl2ZQpkZWZpbmUgIk9waW9pZCBOYWl2ZSBQcmVzY3JpcHRpb24gQ29uZGl0aW9uIElzIEVuYWJsZWQiOgogIHRydWUKCi8vIE9waW9pZCBOYWl2ZQpkZWZpbmUgIk9waW9pZCBOYWl2ZSBSZXBvcnQgQ29uZGl0aW9uIElzIEVuYWJsZWQiOgogIHRydWUKCi8vIE9waW9pZCBOYWl2ZQpkZWZpbmUgIk9waW9pZCBOYWl2ZSBEaXNwZW5zZSBDb25kaXRpb24gSXMgRW5hYmxlZCI6CiAgdHJ1ZQoKLy8gUmVjb21tZW5kYXRpb24gMgpkZWZpbmUgIk9waW9pZCBUcmVhdG1lbnQgUGxhbiBWZXJpZmljYXRpb24gRW5hYmxlZCI6CiAgdHJ1ZQoKLy8gUmVjb21tZW5kYXRpb24gMwpkZWZpbmUgIk9waW9pZCBIYXJtcyAmIFJpc2tzIERpc2N1c3Npb24gaW4gUGFzdCA5MCBEYXlzIENyaXRlcmlhIEVuYWJsZWQiOgogIHRydWUKCi8vIFJlY29tbWVuZGF0aW9uIDYKZGVmaW5lICJPcmRlciBpcyB0byBUcmVhdCBBY3V0ZSBQYWluIEVuYWJsZWQiOgogIHRydWUKCi8vIFJlY29tbWVuZGF0aW9uIDgKZGVmaW5lICJFdmlkZW5jZSBvZiBOYWxveG9uZSBFbmFibGVkIjoKICB0cnVlCgovLyBSZWNvbW1lbmRhdGlvbiA5CmRlZmluZSAiUERNUCBEYXRhIE5vdCBSZXZpZXdlZCBpbiBQYXN0IDkwIERheXMgQ3JpdGVyaWEgRW5hYmxlZCI6CiAgdHJ1ZQoKLy8gUmVjb21tZW5kYXRpb24gMTIKZGVmaW5lICJFdmlkZW5jZSBCYXNlZCBUcmVhdG1lbnQgQ3JpdGVyaWEgRm9yIE9waW9pZCBVc2UgRGlzb3JkZXIiOgogIHRydWUK"
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSCommonConfig"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OMTKData2020",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OMTKData2020</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OMTKData2020 version '2.0.1'\n\ndefine Months: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }\n\ndefine Days28: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28\n}\ndefine Days29: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29\n}\ndefine Days30: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29, 30\n}\ndefine Days31: { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n  11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n  21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n  31\n}\n\n/*\nReturns true if the given year is a leap year, false otherwise\n*/\ndefine function IsLeapYear(y Integer):\n  (y mod 4 = 0 and y mod 100 != 0) or y mod 400 = 0\n\n\n/*\nReturns a list of the days in the given month in the given year\nList&lt;DateTime&gt;\n*/\ndefine function DaysInMonth(y Integer, m Integer):\n  (\n    case\n      when m in { 1, 3, 5, 7, 8, 10, 12 } then Days31\n      when m = 2 then if IsLeapYear(y) then Days29 else Days28\n      else Days30\n    end\n  ) D\n    return DateTime(y, m, D)\n\n/*\nReturns a list of the days in the given year\nList&lt;DateTime&gt;\n*/\ndefine function DaysInYear(y Integer):\n  flatten (\n    Months M\n      return DaysInMonth(y, M)\n  )\n\ndefine function DaysInPeriod(period Interval&lt;DateTime&gt;):\n  case\n    when start of period is null or end of period is null then null\n    when start of period same year as end of period then\n      case\n        when month from start of period = month from end of period then\n          (DaysInMonth(year from start of period, month from start of period)) D\n            where D same day or after start of period\n              and D same day or before end of period\n        else\n          (DaysInYear(year from start of period)) D\n            where D same day or after start of period\n              and D same day or before end of period\n      end\n    when difference in years between start of period and end of period = 1 then\n      (\n        (DaysInYear(year from start of period)) D\n          where D same day or after start of period\n            and D same day or before end of period\n        )\n        union (\n          (DaysInYear(year from end of period)) D\n            where D same day or after start of period\n              and D same day or before end of period\n          )\n    else null // Should maybe throw, can't calculate arbitrary years, need the expand operator (1.3)\n  end\n\n/*\nDrugIngredients:\n  List&lt;{\n    drugCode Integer,\n    drugName String,\n    doseFormCode Integer,\n    doseFormName String,\n    ingredientCode Integer,\n    ingredientName String,\n    strength String,\n    strengthValue Decimal,\n    strengthUnit String\n  }&gt;\n*/\n// Generated from LocalDataStore_RxNav_OpioidCds-2020-01-13.sqlite\ndefine DrugIngredients:\n{\n  { drugCode: 197696, drugName: '72 HR Fentanyl 0.075 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.075 MG/HR', strengthValue: 0.075, strengthUnit: 'MG/HR' },\n  { drugCode: 197873, drugName: 'Levorphanol 2 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6378, ingredientName: 'Levorphanol', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 198402, drugName: 'Fentanyl 1.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 198403, drugName: 'Fentanyl 2.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '2.5 MG/ML', strengthValue: 2.5, strengthUnit: 'MG/ML' },\n  { drugCode: 199400, drugName: 'Codeine 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 199789, drugName: 'Pentazocine 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 205533, drugName: '1 ML Buprenorphine 0.3 MG/ML Injection [Buprenex]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG/ML', strengthValue: 0.3, strengthUnit: 'MG/ML' },\n  { drugCode: 211354, drugName: 'Acetaminophen 650 MG / Pentazocine 25 MG Oral Tablet [Talacen]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' },\n  { drugCode: 238129, drugName: '1 ML Buprenorphine 0.3 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG/ML', strengthValue: 0.3, strengthUnit: 'MG/ML' },\n  { drugCode: 238133, drugName: 'Pentazocine 30 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' },\n  { drugCode: 245134, drugName: '72 HR Fentanyl 0.025 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.025 MG/HR', strengthValue: 0.025, strengthUnit: 'MG/HR' },\n  { drugCode: 245135, drugName: '72 HR Fentanyl 0.05 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/HR', strengthValue: 0.05, strengthUnit: 'MG/HR' },\n  { drugCode: 245136, drugName: '72 HR Fentanyl 0.1 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/HR', strengthValue: 0.1, strengthUnit: 'MG/HR' },\n  { drugCode: 246474, drugName: 'Buprenorphine 0.2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 247626, drugName: 'Oxycodone 10 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 247627, drugName: 'Oxycodone 20 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 248307, drugName: 'Oxycodone 30 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 248477, drugName: 'Belladonna Alkaloids 15 MG / Opium 65 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7676, ingredientName: 'Opium', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' },\n  { drugCode: 250426, drugName: 'Buprenorphine 0.4 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 250485, drugName: 'Pentazocine 25 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' },\n  { drugCode: 250486, drugName: 'Pentazocine 50 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 250877, drugName: 'Pentazocine 50 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 261106, drugName: 'Fentanyl 0.2 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 261107, drugName: 'Fentanyl 0.6 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 261108, drugName: 'Fentanyl 0.8 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 261109, drugName: 'Fentanyl 1.2 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.2 MG', strengthValue: 1.2, strengthUnit: 'MG' },\n  { drugCode: 261110, drugName: 'Fentanyl 1.6 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.6 MG', strengthValue: 1.6, strengthUnit: 'MG' },\n  { drugCode: 261184, drugName: '72 HR Fentanyl 0.025 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.025 MG/HR', strengthValue: 0.025, strengthUnit: 'MG/HR' },\n  { drugCode: 261185, drugName: '72 HR Fentanyl 0.05 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/HR', strengthValue: 0.05, strengthUnit: 'MG/HR' },\n  { drugCode: 261186, drugName: '72 HR Fentanyl 0.075 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.075 MG/HR', strengthValue: 0.075, strengthUnit: 'MG/HR' },\n  { drugCode: 262071, drugName: '72 HR Fentanyl 0.1 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/HR', strengthValue: 0.1, strengthUnit: 'MG/HR' },\n  { drugCode: 262219, drugName: 'Fentanyl 0.4 MG Oral Lozenge [Actiq]', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 310292, drugName: 'Fentanyl 0.1 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' },\n  { drugCode: 310293, drugName: 'Fentanyl 1.2 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.2 MG', strengthValue: 1.2, strengthUnit: 'MG' },\n  { drugCode: 310294, drugName: 'Fentanyl 1.6 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.6 MG', strengthValue: 1.6, strengthUnit: 'MG' },\n  { drugCode: 310295, drugName: 'Fentanyl 0.2 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 310296, drugName: 'Fentanyl 0.3 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' },\n  { drugCode: 310297, drugName: 'Fentanyl 0.4 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 311297, drugName: 'Levomethadyl 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 237005, ingredientName: 'Levomethadyl', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 311300, drugName: 'Levorphanol 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6378, ingredientName: 'Levorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 312104, drugName: 'Belladonna Alkaloids 16.2 MG / Opium 30 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7676, ingredientName: 'Opium', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 312107, drugName: 'Belladonna Alkaloids 16.2 MG / Opium 60 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7676, ingredientName: 'Opium', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 312288, drugName: 'Acetaminophen 650 MG / Pentazocine 25 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' },\n  { drugCode: 312289, drugName: 'Naloxone 0.5 MG / Pentazocine 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 313992, drugName: 'Fentanyl 0.6 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 313993, drugName: 'Fentanyl 0.8 MG Oral Lozenge', doseFormCode: 316992, doseFormName: 'Oral Lozenge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 351264, drugName: 'Buprenorphine 2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 351265, drugName: 'Buprenorphine 8 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 351266, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 351267, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 388506, drugName: '72 HR Buprenorphine 0.07 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.07 MG/HR', strengthValue: 0.07, strengthUnit: 'MG/HR' },\n  { drugCode: 388507, drugName: '72 HR Buprenorphine 0.0525 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.0525 MG/HR', strengthValue: 0.0525, strengthUnit: 'MG/HR' },\n  { drugCode: 388508, drugName: '72 HR Buprenorphine 0.035 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.035 MG/HR', strengthValue: 0.035, strengthUnit: 'MG/HR' },\n  { drugCode: 404414, drugName: 'Buprenorphine 8 MG Sublingual Tablet [Subutex]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 577057, drugName: '72 HR Fentanyl 0.012 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.012 MG/HR', strengthValue: 0.012, strengthUnit: 'MG/HR' },\n  { drugCode: 583490, drugName: '72 HR Fentanyl 0.012 MG/HR Transdermal System [Duragesic]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.012 MG/HR', strengthValue: 0.012, strengthUnit: 'MG/HR' },\n  { drugCode: 637540, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.5 MG / oxycodone terephthalate 0.38 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.5 MG', strengthValue: 4.5, strengthUnit: 'MG' },\n  { drugCode: 637540, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.5 MG / oxycodone terephthalate 0.38 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '0.38 MG', strengthValue: 0.38, strengthUnit: 'MG' },\n  { drugCode: 668363, drugName: 'Fentanyl 0.1 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' },\n  { drugCode: 668364, drugName: 'Fentanyl 0.2 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 668365, drugName: 'Fentanyl 0.4 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 668366, drugName: 'Fentanyl 0.6 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 668367, drugName: 'Fentanyl 0.8 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 668622, drugName: 'Fentanyl 0.1 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' },\n  { drugCode: 668624, drugName: 'Fentanyl 0.2 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 668626, drugName: 'Fentanyl 0.4 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 668628, drugName: 'Fentanyl 0.6 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 668630, drugName: 'Fentanyl 0.8 MG Buccal Tablet [Fentora]', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 706898, drugName: 'Fentanyl 0.3 MG Buccal Tablet', doseFormCode: 970789, doseFormName: 'Buccal Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' },\n  { drugCode: 724614, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 2.25 MG / oxycodone terephthalate 0.19 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '0.19 MG', strengthValue: 0.19, strengthUnit: 'MG' },\n  { drugCode: 724614, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 2.25 MG / oxycodone terephthalate 0.19 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.25 MG', strengthValue: 2.25, strengthUnit: 'MG' },\n  { drugCode: 727759, drugName: '2 ML Fentanyl 0.05 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 825409, drugName: 'tapentadol 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 825411, drugName: 'tapentadol 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 825413, drugName: 'tapentadol 75 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 827748, drugName: 'propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 827750, drugName: 'propoxyphene napsylate 100 MG Oral Tablet [Darvon-N]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 827751, drugName: 'Acetaminophen 325 MG / propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 828576, drugName: 'Acetaminophen 650 MG / propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 828581, drugName: 'Acetaminophen 650 MG / Propoxyphene Hydrochloride 65 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' },\n  { drugCode: 828585, drugName: 'Aspirin 389 MG / Caffeine 32.4 MG / Propoxyphene Hydrochloride 32 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' },\n  { drugCode: 828594, drugName: 'Aspirin 389 MG / Caffeine 32.4 MG / Propoxyphene Hydrochloride 65 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' },\n  { drugCode: 830196, drugName: 'opium tincture 100 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7676, ingredientName: 'Opium', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 833036, drugName: 'Acetaminophen 750 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 833709, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 833710, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet [Ryzolt]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 833711, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 833712, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet [Ryzolt]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 833713, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' },\n  { drugCode: 833714, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet [Ryzolt]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' },\n  { drugCode: 835603, drugName: 'tramadol hydrochloride 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 835605, drugName: 'tramadol hydrochloride 50 MG Oral Tablet [Ultram]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 836395, drugName: 'Acetaminophen 325 MG / tramadol hydrochloride 37.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '37.5 MG', strengthValue: 37.5, strengthUnit: 'MG' },\n  { drugCode: 836397, drugName: 'Acetaminophen 325 MG / tramadol hydrochloride 37.5 MG Oral Tablet [Ultracet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '37.5 MG', strengthValue: 37.5, strengthUnit: 'MG' },\n  { drugCode: 836408, drugName: 'tramadol hydrochloride 50 MG Disintegrating Oral Tablet', doseFormCode: 316942, doseFormName: 'Disintegrating Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 836466, drugName: 'tramadol hydrochloride 50 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 836485, drugName: 'tramadol hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 845314, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet [Ultram]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 845315, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet [Ultram]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 845316, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet [Ultram]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' },\n  { drugCode: 848768, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.84 MG', strengthValue: 4.84, strengthUnit: 'MG' },\n  { drugCode: 848772, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet [Percodan Reformulated May 2009]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.84 MG', strengthValue: 4.84, strengthUnit: 'MG' },\n  { drugCode: 848928, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 4.84 MG Oral Tablet [Endodan Reformulated May 2009]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '4.84 MG', strengthValue: 4.84, strengthUnit: 'MG' },\n  { drugCode: 849279, drugName: 'Propoxyphene Hydrochloride 65 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '65 MG', strengthValue: 65.0, strengthUnit: 'MG' },\n  { drugCode: 849293, drugName: 'Acetaminophen 325 MG / Propoxyphene Hydrochloride 32.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '32.5 MG', strengthValue: 32.5, strengthUnit: 'MG' },\n  { drugCode: 849295, drugName: 'Acetaminophen 325 MG / propoxyphene napsylate 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 849303, drugName: 'Acetaminophen 500 MG / propoxyphene napsylate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 849304, drugName: 'Acetaminophen 500 MG / propoxyphene napsylate 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 849306, drugName: 'Acetaminophen 65 MG/ML / Propoxyphene Hydrochloride 6.5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '6.5 MG/ML', strengthValue: 6.5, strengthUnit: 'MG/ML' },\n  { drugCode: 849329, drugName: 'tramadol hydrochloride 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 849331, drugName: 'tramadol hydrochloride 75 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 849455, drugName: 'Propoxyphene Hydrochloride 100 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 8785, ingredientName: 'Propoxyphene', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 849561, drugName: '12 HR tramadol hydrochloride 150 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 849563, drugName: '24 HR tramadol hydrochloride 150 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 849564, drugName: '24 HR tramadol hydrochloride 400 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '400 MG', strengthValue: 400.0, strengthUnit: 'MG' },\n  { drugCode: 849903, drugName: 'tramadol hydrochloride 50 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 854140, drugName: 'tapentadol 100 MG Oral Tablet [Nucynta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 854142, drugName: 'tapentadol 50 MG Oral Tablet [Nucynta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 854144, drugName: 'tapentadol 75 MG Oral Tablet [Nucynta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 856892, drugName: 'Acetaminophen 750 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 856894, drugName: 'Acetaminophen 750 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Maxidone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 856903, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 856907, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 856908, drugName: 'Acetaminophen 660 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 856915, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 856940, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 856942, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Hycet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 856944, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.67 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.67 MG/ML', strengthValue: 0.67, strengthUnit: 'MG/ML' },\n  { drugCode: 856946, drugName: 'Acetaminophen 21.7 MG/ML / Hydrocodone Bitartrate 0.67 MG/ML Oral Solution [Zamicet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.67 MG/ML', strengthValue: 0.67, strengthUnit: 'MG/ML' },\n  { drugCode: 856962, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 856980, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 856984, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 856987, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 856991, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 856992, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 856996, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 856999, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 857001, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Norco]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 857002, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857004, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Norco]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857005, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857007, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Norco]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857076, drugName: 'Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.333 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.333 MG/ML', strengthValue: 0.333, strengthUnit: 'MG/ML' },\n  { drugCode: 857083, drugName: 'Acetaminophen 650 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857099, drugName: 'Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 857105, drugName: 'Acetaminophen 33.3 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Lortab]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 857107, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 857111, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 857113, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 857118, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857120, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857121, drugName: 'Aspirin 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857128, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 857131, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857134, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857136, drugName: 'Acetaminophen 400 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Zydone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 857237, drugName: 'Pentazocine 30 MG/ML Injectable Solution [Talwin]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' },\n  { drugCode: 857370, drugName: 'Acetaminophen 500 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Hy-Phen]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857383, drugName: 'Acetaminophen 650 MG / Hydrocodone Bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 857391, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 857501, drugName: 'Acetaminophen 556 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857510, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 4 MG / HYDROCODONE POLISTIREX 5 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 857512, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 8 MG / HYDROCODONE POLISTIREX 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 857556, drugName: 'Brompheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.34 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.34 MG/ML', strengthValue: 0.34, strengthUnit: 'MG/ML' },\n  { drugCode: 857575, drugName: 'Brompheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.34 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution [Bromplex HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.34 MG/ML', strengthValue: 0.34, strengthUnit: 'MG/ML' },\n  { drugCode: 857734, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' },\n  { drugCode: 857830, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Triant-HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' },\n  { drugCode: 857839, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 857845, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Hydro-PC II]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 857851, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 858087, drugName: 'Fentanyl 1.2 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '1.2 MG', strengthValue: 1.2, strengthUnit: 'MG' },\n  { drugCode: 858092, drugName: 'Fentanyl 0.2 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 858095, drugName: 'Fentanyl 0.4 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 858098, drugName: 'Fentanyl 0.6 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 858101, drugName: 'Fentanyl 0.8 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 858770, drugName: 'Hydrocodone Bitartrate 2.5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 858772, drugName: 'Hydrocodone Bitartrate 2.5 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 858778, drugName: 'Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 858780, drugName: 'Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet [Ibudone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 858784, drugName: 'Hydrocodone Bitartrate 5 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 858798, drugName: 'Hydrocodone Bitartrate 7.5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 858838, drugName: 'Hydrocodone Bitartrate 7.5 MG / Ibuprofen 200 MG Oral Tablet [Vicoprofen]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 858876, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 858878, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [De-Chlor HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 858937, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Hyphed]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 858939, drugName: 'guaiacolsulfonate 24 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 858945, drugName: 'guaiacolsulfonate 24 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Hydron EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 858953, drugName: 'guaiacolsulfonate 30 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' },\n  { drugCode: 858967, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.9 MG/ML', strengthValue: 0.9, strengthUnit: 'MG/ML' },\n  { drugCode: 858969, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution [Hy-KXP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.9 MG/ML', strengthValue: 0.9, strengthUnit: 'MG/ML' },\n  { drugCode: 858976, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 0.9 MG/ML Oral Solution [Prolex DH]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.9 MG/ML', strengthValue: 0.9, strengthUnit: 'MG/ML' },\n  { drugCode: 858991, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859003, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859005, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [S-T Forte 2]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859019, drugName: 'guaiacolsulfonate 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hydron KGS]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859027, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' },\n  { drugCode: 859029, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Hydro-PC II]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' },\n  { drugCode: 859097, drugName: 'guaiacolsulfonate 70 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859099, drugName: 'guaiacolsulfonate 70 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [KGS HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859137, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859141, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution [B-Tuss]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859143, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Drotuss CP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859146, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859150, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Hydron CP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859156, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859162, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' },\n  { drugCode: 859164, drugName: 'Chlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML Oral Solution [Poly-Tussin]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' },\n  { drugCode: 859181, drugName: 'Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Pseudoephedrine 3.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' },\n  { drugCode: 859209, drugName: 'Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.334 MG/ML / Pseudoephedrine 4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' },\n  { drugCode: 859220, drugName: 'Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine 1.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' },\n  { drugCode: 859222, drugName: 'Chlorpheniramine 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine 1.6 MG/ML Oral Solution [Relasin HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' },\n  { drugCode: 859225, drugName: 'Chlorpheniramine 0.8 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859247, drugName: 'Chlorpheniramine 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 859315, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 859317, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Ibudone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 859327, drugName: 'Guaifenesin 30 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859329, drugName: 'Guaifenesin 30 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.2 MG/ML Oral Solution [Hydrofed]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859331, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Reprexain]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 859366, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859368, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Nariz HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859376, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 1.5 MG/ML Oral Solution [Nazarin HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859383, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859939, drugName: 'Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859941, drugName: 'Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Exetuss HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 859943, drugName: 'Guaifenesin 45 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine 2 MG/ML Oral Solution [Simuc-HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 860138, drugName: 'guaiacolsulfonate 30 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML Oral Solution [De-Chlor NX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' },\n  { drugCode: 860151, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 860159, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 1 MG/ML Oral Solution [De-Chlor MR]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 860239, drugName: 'Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [Hydro GP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 860426, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 860446, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Drituss HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 860530, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Su-Tuss HD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 860549, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.6 MG/ML / Pseudoephedrine 3 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' },\n  { drugCode: 860579, drugName: 'Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.75 MG/ML / Pseudoephedrine 4.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.75 MG/ML', strengthValue: 0.75, strengthUnit: 'MG/ML' },\n  { drugCode: 860592, drugName: 'Guaifenesin 60 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Phenylephrine 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 860593, drugName: 'Hydrocodone Bitartrate 0.334 MG/ML / Phenylephrine 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.334 MG/ML', strengthValue: 0.334, strengthUnit: 'MG/ML' },\n  { drugCode: 860596, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 860599, drugName: 'Hydrocodone Bitartrate 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 860600, drugName: 'dexchlorpheniramine 0.4 MG/ML / Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 2 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' },\n  { drugCode: 860792, drugName: '1 ML Meperidine Hydrochloride 75 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG/ML', strengthValue: 75.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861447, drugName: 'Meperidine Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861455, drugName: 'Meperidine Hydrochloride 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 861459, drugName: 'Meperidine Hydrochloride 100 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861463, drugName: 'Meperidine Hydrochloride 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861467, drugName: 'Meperidine Hydrochloride 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 861473, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861476, drugName: '1 ML Meperidine Hydrochloride 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861479, drugName: 'Meperidine Hydrochloride 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861482, drugName: '1 ML Meperidine Hydrochloride 75 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG/ML', strengthValue: 75.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861493, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861494, drugName: '1 ML Meperidine Hydrochloride 25 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861517, drugName: 'Meperidine Hydrochloride 100 MG Oral Tablet [Demerol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 861520, drugName: 'Meperidine Hydrochloride 100 MG/ML Injectable Solution [Demerol]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861522, drugName: 'Meperidine Hydrochloride 50 MG/ML Injectable Solution [Demerol]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861525, drugName: 'Meperidine Hydrochloride 50 MG Oral Tablet [Demerol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 861529, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 861578, drugName: 'Meperidine Hydrochloride 50 MG / Promethazine Hydrochloride 25 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 861617, drugName: '1 ML Meperidine Hydrochloride 75 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG/ML', strengthValue: 75.0, strengthUnit: 'MG/ML' },\n  { drugCode: 863845, drugName: 'Abuse-Deterrent Morphine Sulfate 100 MG / Naltrexone hydrochloride 4 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 863847, drugName: 'Abuse-Deterrent Morphine Sulfate 100 MG / Naltrexone hydrochloride 4 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 863848, drugName: 'Abuse-Deterrent Morphine Sulfate 20 MG / Naltrexone hydrochloride 0.8 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 863849, drugName: 'Abuse-Deterrent Morphine Sulfate 20 MG / Naltrexone hydrochloride 0.8 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 863850, drugName: 'Abuse-Deterrent Morphine Sulfate 30 MG / Naltrexone hydrochloride 1.2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 863851, drugName: 'Abuse-Deterrent Morphine Sulfate 30 MG / Naltrexone hydrochloride 1.2 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 863852, drugName: 'Abuse-Deterrent Morphine Sulfate 50 MG / Naltrexone hydrochloride 2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 863853, drugName: 'Abuse-Deterrent Morphine Sulfate 50 MG / Naltrexone hydrochloride 2 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 863854, drugName: 'Abuse-Deterrent Morphine Sulfate 60 MG / Naltrexone hydrochloride 2.4 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 863855, drugName: 'Abuse-Deterrent Morphine Sulfate 60 MG / Naltrexone hydrochloride 2.4 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 863856, drugName: 'Abuse-Deterrent Morphine Sulfate 80 MG / Naltrexone hydrochloride 3.2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 863857, drugName: 'Abuse-Deterrent Morphine Sulfate 80 MG / Naltrexone hydrochloride 3.2 MG Extended Release Oral Capsule [Embeda]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 864706, drugName: 'Methadone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 864708, drugName: 'Methadone Hydrochloride 10 MG Oral Tablet [Dolophine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 864712, drugName: 'Methadone Hydrochloride 10 MG Oral Tablet [Methadose]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 864714, drugName: 'Methadone Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 864718, drugName: 'Methadone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 864720, drugName: 'Methadone Hydrochloride 5 MG Oral Tablet [Dolophine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 864737, drugName: 'Methadone Hydrochloride 5 MG Oral Tablet [Methadose]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6813, ingredientName: 'Methadone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 864751, drugName: 'Methadone Hydrochloride 0.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 864761, drugName: 'Methadone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 864769, drugName: 'Methadone Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 864794, drugName: 'Methadone Hydrochloride 25 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 864828, drugName: 'Methadone Hydrochloride 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 864978, drugName: 'Methadone Hydrochloride 40 MG Tablet for Oral Suspension', doseFormCode: 1861409, doseFormName: 'Tablet for Oral Suspension', ingredientCode: 6813, ingredientName: 'Methadone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 864980, drugName: 'Methadone Hydrochloride 40 MG Tablet for Oral Suspension [Methadose]', doseFormCode: 1861409, doseFormName: 'Tablet for Oral Suspension', ingredientCode: 6813, ingredientName: 'Methadone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 864984, drugName: 'Methadone Hydrochloride 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 886622, drugName: 'Butorphanol Tartrate 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 886627, drugName: '1 ML Butorphanol Tartrate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 886634, drugName: 'Butorphanol Tartrate 10 MG/ML Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 886634, drugName: 'Butorphanol Tartrate 10 MG/ML Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '1 MG/ACTUAT', strengthValue: 1.0, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 891172, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine 2 MG/ML Oral Solution [De-Chlor G]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 891874, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 891878, drugName: '12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 891881, drugName: 'Morphine Sulfate 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 891883, drugName: '12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 891885, drugName: '12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 891888, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 891890, drugName: '12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 891893, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 892297, drugName: '24 HR Morphine Sulfate 120 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' },\n  { drugCode: 892299, drugName: '24 HR Morphine Sulfate 120 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' },\n  { drugCode: 892342, drugName: '24 HR Morphine Sulfate 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892344, drugName: '24 HR Morphine Sulfate 30 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892345, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892349, drugName: '24 HR Morphine Sulfate 60 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 892351, drugName: '24 HR Morphine Sulfate 60 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 892352, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 892355, drugName: '24 HR Morphine Sulfate 90 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '90 MG', strengthValue: 90.0, strengthUnit: 'MG' },\n  { drugCode: 892357, drugName: '24 HR Morphine Sulfate 90 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '90 MG', strengthValue: 90.0, strengthUnit: 'MG' },\n  { drugCode: 892473, drugName: '10 ML Morphine Sulfate 0.5 MG/ML Injection [Duramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 892489, drugName: '10 ML Morphine Sulfate 1 MG/ML Injection [Duramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 892494, drugName: 'Morphine Sulfate 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 892496, drugName: 'Morphine Sulfate 10 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 892516, drugName: 'Morphine Sulfate 10 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 892531, drugName: 'Morphine Sulfate 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 892554, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 892556, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 892560, drugName: 'Morphine Sulfate 100 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 892574, drugName: 'Morphine Sulfate 15 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 892579, drugName: 'Morphine Sulfate 15 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 892582, drugName: 'Morphine Sulfate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 892589, drugName: 'Morphine Sulfate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 892596, drugName: 'Morphine Sulfate 20 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 892598, drugName: 'Morphine Sulfate 20 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 892603, drugName: 'Morphine Sulfate 20 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 892625, drugName: 'Morphine Sulfate 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 892643, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 892645, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 892646, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 892648, drugName: 'Morphine Sulfate 200 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 892652, drugName: '20 ML Morphine Sulfate 25 MG/ML Injection [Infumorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 892658, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892660, drugName: 'Morphine Sulfate 30 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892669, drugName: 'Morphine Sulfate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892672, drugName: 'Morphine Sulfate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 892678, drugName: 'Morphine Sulfate 30 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 894780, drugName: 'Morphine Sulfate 4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 894801, drugName: 'Morphine Sulfate 50 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 894803, drugName: 'Morphine Sulfate 50 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 894805, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 894807, drugName: 'Morphine Sulfate 5 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 894813, drugName: 'Morphine Sulfate 60 MG Extended Release Oral Tablet [MS Contin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 894814, drugName: 'Morphine Sulfate 80 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 894816, drugName: 'Morphine Sulfate 80 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 894911, drugName: '0.7 ML Morphine Sulfate 14.3 MG/ML Auto-Injector', doseFormCode: 1649570, doseFormName: 'Auto-Injector', ingredientCode: 7052, ingredientName: 'Morphine', strength: '14.3 MG/ML', strengthValue: 14.3, strengthUnit: 'MG/ML' },\n  { drugCode: 894912, drugName: '1 ML Morphine Sulfate 10 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 894914, drugName: '1 ML Morphine Sulfate 8 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '8 MG/ML', strengthValue: 8.0, strengthUnit: 'MG/ML' },\n  { drugCode: 894918, drugName: '12 HR Morphine Sulfate 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 894933, drugName: 'Morphine Sulfate 150 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 894942, drugName: '24 HR Morphine Sulfate 45 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '45 MG', strengthValue: 45.0, strengthUnit: 'MG' },\n  { drugCode: 894970, drugName: '24 HR Morphine Sulfate 75 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 894986, drugName: 'Morphine Sulfate 0.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 895014, drugName: 'Morphine Sulfate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 895016, drugName: 'Morphine Sulfate 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895022, drugName: 'Morphine Sulfate 100 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 895185, drugName: 'Morphine Sulfate 15 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 895194, drugName: 'Morphine Sulfate 15 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895199, drugName: 'Morphine Sulfate 2 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895201, drugName: 'Morphine Sulfate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 895202, drugName: 'Morphine Sulfate 20 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895206, drugName: 'Morphine Sulfate 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 895208, drugName: 'Morphine Sulfate 3 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '3 MG/ML', strengthValue: 3.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895213, drugName: 'Morphine Sulfate 30 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895215, drugName: 'Morphine Sulfate 35 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '35 MG', strengthValue: 35.0, strengthUnit: 'MG' },\n  { drugCode: 895217, drugName: 'Morphine Sulfate 5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 895219, drugName: 'Morphine Sulfate 5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895221, drugName: 'Morphine Sulfate 50 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 895227, drugName: 'Morphine Sulfate 50 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 895233, drugName: 'Morphine Sulfate 6 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '6 MG/ML', strengthValue: 6.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895238, drugName: 'Morphine Sulfate 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '6 MG/ML', strengthValue: 6.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895240, drugName: 'Morphine Sulfate 6.67 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 7052, ingredientName: 'Morphine', strength: '6.67 MG/ML', strengthValue: 6.67, strengthUnit: 'MG/ML' },\n  { drugCode: 895247, drugName: 'Morphine Sulfate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 895248, drugName: 'Morphine Sulfate 75 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 895861, drugName: 'Morphine Sulfate 25 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG', strengthValue: 25.0, strengthUnit: 'MG' },\n  { drugCode: 895867, drugName: 'Morphine hydrochloride 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 895869, drugName: 'Morphine Sulfate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 895871, drugName: 'Morphine Sulfate 50 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 895874, drugName: 'Morphine Sulfate 60 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 897653, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897655, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897657, drugName: 'Hydromorphone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897658, drugName: 'Hydromorphone Hydrochloride 1 MG/ML Oral Solution [Dilaudid]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897677, drugName: '24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' },\n  { drugCode: 897687, drugName: '24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 897696, drugName: 'Hydromorphone Hydrochloride 2 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 897698, drugName: 'Hydromorphone Hydrochloride 2 MG Oral Tablet [Dilaudid]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 897702, drugName: 'Hydromorphone Hydrochloride 4 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' },\n  { drugCode: 897704, drugName: 'Hydromorphone Hydrochloride 4 MG Oral Tablet [Dilaudid]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' },\n  { drugCode: 897710, drugName: 'Hydromorphone Hydrochloride 8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 897712, drugName: 'Hydromorphone Hydrochloride 8 MG Oral Tablet [Dilaudid]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 897730, drugName: '24 HR Hydromorphone Hydrochloride 24 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '24 MG', strengthValue: 24.0, strengthUnit: 'MG' },\n  { drugCode: 897737, drugName: '24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' },\n  { drugCode: 897745, drugName: 'Hydromorphone Hydrochloride 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897747, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897749, drugName: 'Hydromorphone Hydrochloride 3 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' },\n  { drugCode: 897753, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897755, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897756, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897757, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897758, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 897771, drugName: 'Hydromorphone Hydrochloride 1 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG', strengthValue: 1.0, strengthUnit: 'MG' },\n  { drugCode: 898004, drugName: 'Hydromorphone Hydrochloride 1.3 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1.3 MG', strengthValue: 1.3, strengthUnit: 'MG' },\n  { drugCode: 898138, drugName: 'Hydromorphone Hydrochloride 2.6 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2.6 MG', strengthValue: 2.6, strengthUnit: 'MG' },\n  { drugCode: 898139, drugName: 'Hydromorphone Hydrochloride 3 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' },\n  { drugCode: 898611, drugName: '12 HR Hydromorphone Hydrochloride 2 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 898612, drugName: '12 HR Hydromorphone Hydrochloride 3 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' },\n  { drugCode: 898614, drugName: '12 HR Hydromorphone Hydrochloride 4 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' },\n  { drugCode: 898618, drugName: '12 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 898624, drugName: 'Hydromorphone Hydrochloride 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 899125, drugName: 'Hydrocodone Bitartrate 1.2 MG/ML / Phenylephrine 1 MG/ML / Pyrilamine 2.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' },\n  { drugCode: 902729, drugName: '24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' },\n  { drugCode: 902733, drugName: '24 HR Hydromorphone Hydrochloride 12 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' },\n  { drugCode: 902736, drugName: '24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 902738, drugName: '24 HR Hydromorphone Hydrochloride 16 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 902741, drugName: '24 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 902743, drugName: '24 HR Hydromorphone Hydrochloride 8 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 904415, drugName: 'Nalbuphine Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7238, ingredientName: 'Nalbuphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 904440, drugName: 'Nalbuphine Hydrochloride 20 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7238, ingredientName: 'Nalbuphine', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 904870, drugName: '168 HR Buprenorphine 0.01 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.01 MG/HR', strengthValue: 0.01, strengthUnit: 'MG/HR' },\n  { drugCode: 904874, drugName: '168 HR Buprenorphine 0.01 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.01 MG/HR', strengthValue: 0.01, strengthUnit: 'MG/HR' },\n  { drugCode: 904876, drugName: '168 HR Buprenorphine 0.02 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.02 MG/HR', strengthValue: 0.02, strengthUnit: 'MG/HR' },\n  { drugCode: 904878, drugName: '168 HR Buprenorphine 0.02 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.02 MG/HR', strengthValue: 0.02, strengthUnit: 'MG/HR' },\n  { drugCode: 904880, drugName: '168 HR Buprenorphine 0.005 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.005 MG/HR', strengthValue: 0.005, strengthUnit: 'MG/HR' },\n  { drugCode: 904882, drugName: '168 HR Buprenorphine 0.005 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.005 MG/HR', strengthValue: 0.005, strengthUnit: 'MG/HR' },\n  { drugCode: 977874, drugName: '12 HR Oxymorphone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 977876, drugName: '12 HR Oxymorphone Hydrochloride 10 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 977894, drugName: '12 HR Oxymorphone Hydrochloride 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 977896, drugName: '12 HR Oxymorphone Hydrochloride 15 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 977902, drugName: '12 HR Oxymorphone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 977904, drugName: '12 HR Oxymorphone Hydrochloride 20 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 977909, drugName: '12 HR Oxymorphone Hydrochloride 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 977911, drugName: '12 HR Oxymorphone Hydrochloride 30 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 977915, drugName: '12 HR Oxymorphone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 977917, drugName: '12 HR Oxymorphone Hydrochloride 40 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 977923, drugName: '12 HR Oxymorphone Hydrochloride 5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 977925, drugName: '12 HR Oxymorphone Hydrochloride 5 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 977929, drugName: '12 HR Oxymorphone Hydrochloride 7.5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 977931, drugName: '12 HR Oxymorphone Hydrochloride 7.5 MG Extended Release Oral Tablet [Opana]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 977935, drugName: '1 ML Oxymorphone Hydrochloride 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 977937, drugName: '1 ML Oxymorphone Hydrochloride 1 MG/ML Injection [Opana]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 977939, drugName: 'Oxymorphone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 977940, drugName: 'Oxymorphone Hydrochloride 5 MG Oral Tablet [Opana]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 977942, drugName: 'Oxymorphone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 977943, drugName: 'Oxymorphone Hydrochloride 10 MG Oral Tablet [Opana]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 977971, drugName: 'Oxymorphone Hydrochloride 1.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 977974, drugName: 'Oxymorphone Hydrochloride 5 MG Rectal Suppository', doseFormCode: 316978, doseFormName: 'Rectal Suppository', ingredientCode: 7814, ingredientName: 'Oxymorphone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 991147, drugName: 'Methadone Hydrochloride 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 991149, drugName: 'Methadone Hydrochloride 10 MG/ML Oral Solution [Methadose]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 6813, ingredientName: 'Methadone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 991486, drugName: 'Codeine Phosphate 2 MG/ML / Promethazine Hydrochloride 1.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 992656, drugName: 'homatropine methylbromide 1.5 MG / Hydrocodone Bitartrate 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 992668, drugName: 'homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 992671, drugName: 'homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hycodan]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 992675, drugName: 'homatropine methylbromide 0.3 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Hydromet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 992733, drugName: 'homatropine methylbromide 1.5 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Tussigon]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 993755, drugName: 'Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' },\n  { drugCode: 993763, drugName: 'Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' },\n  { drugCode: 993767, drugName: 'Acetaminophen 24 MG/ML / Codeine Phosphate 2.4 MG/ML Oral Suspension [Capital and Codeine]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' },\n  { drugCode: 993770, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 993781, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 993837, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 30 MG Oral Tablet [Tylenol with Codeine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 993890, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 993892, drugName: 'Acetaminophen 300 MG / Codeine Phosphate 60 MG Oral Tablet [Tylenol with Codeine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 993924, drugName: 'Acetaminophen 325 MG / Chlorpheniramine 2 MG / Codeine Phosphate 16 MG / Phenylephrine 10 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 993926, drugName: 'Acetaminophen 325 MG / Chlorpheniramine 2 MG / Codeine Phosphate 16 MG / Phenylephrine 10 MG Oral Capsule [Colrex]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 993943, drugName: 'Acetaminophen 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 994043, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 994045, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 15 MG Oral Tablet [Codrix]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 994046, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 994048, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Tablet [Codrix]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 994049, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 994051, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 60 MG Oral Tablet [Codrix]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 994226, drugName: 'Aspirin 325 MG / Carisoprodol 200 MG / Codeine Phosphate 16 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 994228, drugName: 'Aspirin 325 MG / Carisoprodol 200 MG / Codeine Phosphate 16 MG Oral Tablet [Soma Compound with Codeine]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 994237, drugName: 'Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 994239, drugName: 'Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Ascomp]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 994277, drugName: 'Aspirin 325 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Fiorinal with Codeine]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 994289, drugName: 'Brompheniramine Maleate 0.27 MG/ML / Codeine Phosphate 1.27 MG/ML / Pseudoephedrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.27 MG/ML', strengthValue: 1.27, strengthUnit: 'MG/ML' },\n  { drugCode: 994402, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 994404, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Mar-cof BP]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 995041, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995043, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995062, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995064, drugName: 'Chlorpheniramine 0.2 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995065, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3.33 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995067, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 3.33 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995068, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995070, drugName: 'Chlorpheniramine 0.222 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995071, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995073, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995075, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 0.375 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995077, drugName: 'Chlorpheniramine 0.25 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 0.375 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995079, drugName: 'Chlorpheniramine 0.266 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995081, drugName: 'Chlorpheniramine 0.266 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995082, drugName: 'Chlorpheniramine 0.267 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995084, drugName: 'Chlorpheniramine 0.267 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995086, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4.29 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995088, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 4.29 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995093, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995095, drugName: 'Chlorpheniramine 0.286 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995108, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995110, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 5 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995116, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995118, drugName: 'Chlorpheniramine 0.333 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995120, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995122, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML / Pseudoephedrine 6 MG/ML Oral Suspension [Zodryl DAC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995123, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995125, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1 MG/ML Oral Suspension [Zodryl AC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995128, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1.8 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 995132, drugName: 'Chlorpheniramine 0.4 MG/ML / Codeine Phosphate 1.8 MG/ML Oral Solution [Z Tuss AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 995211, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995213, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 10 MG Oral Tablet [Cotab A]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995214, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 995216, drugName: 'Chlorpheniramine 4 MG / Codeine Phosphate 20 MG Oral Tablet [Cotab AX]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 995226, drugName: 'Codeine Phosphate 0.5 MG/ML / Guaifenesin 15 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 995438, drugName: 'Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.26 MG/ML', strengthValue: 1.26, strengthUnit: 'MG/ML' },\n  { drugCode: 995440, drugName: 'Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution [M-Clear WC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.26 MG/ML', strengthValue: 1.26, strengthUnit: 'MG/ML' },\n  { drugCode: 995441, drugName: 'Codeine Phosphate 1.5 MG/ML / Guaifenesin 45 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 995443, drugName: 'Codeine Phosphate 1.5 MG/ML / Guaifenesin 45 MG/ML Oral Solution [Mar-cof CG]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 995447, drugName: 'Codeine Phosphate 1.8 MG/ML / Pyrilamine Maleate 1.67 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 995450, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 300 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995453, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Phenylephrine 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995455, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Phenylephrine 10 MG Oral Tablet [Maxiphen CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995476, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995478, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG Oral Tablet [Allfen CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995483, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 40 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995868, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995872, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Cheratussin]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995936, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 300 MG Oral Tablet [Brontex]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 995940, drugName: 'Codeine Phosphate 0.5 MG/ML / Guaifenesin 15 MG/ML Oral Solution [Brontex]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 995956, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Cheracol with Codeine]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995983, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995985, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Biotussin]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 995993, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Cheratussin DAC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996253, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Nucofed Expectorant]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996263, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Phenylhistine Expectorant]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996462, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Guiatuss AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996481, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Mytussin AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996484, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Robafen AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996512, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 60 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996580, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996584, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1 MG/ML Oral Solution [Zotex C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996621, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996623, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [Ala-Hist AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996627, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996629, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution [Notuss PE]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996636, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Pyrilamine Maleate 3 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996640, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996648, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Pseudodine C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996650, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Triacin C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996655, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996706, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996708, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Maxiphen CDX]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996710, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996712, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet [Ambifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996714, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996716, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet [Ambifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996718, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996720, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet [Maxifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996722, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996724, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [Maxifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996725, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996727, drugName: 'Codeine Phosphate 20 MG / Guaifenesin 400 MG Oral Tablet [Allfen CDX]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996728, drugName: 'Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996730, drugName: 'Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG Oral Capsule [Nucofed]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 996734, drugName: 'Codeine Phosphate 5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996736, drugName: 'Codeine Phosphate 9 MG / Guaifenesin 200 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' },\n  { drugCode: 996738, drugName: 'Codeine Phosphate 9 MG / Guaifenesin 200 MG Oral Capsule [M-Clear WC]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' },\n  { drugCode: 996757, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Promethazine Hydrochloride 1.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 996976, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 12.8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '12.8 MG', strengthValue: 12.8, strengthUnit: 'MG' },\n  { drugCode: 996978, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 13.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '13.5 MG', strengthValue: 13.5, strengthUnit: 'MG' },\n  { drugCode: 996979, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 996981, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 8 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 996982, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 996983, drugName: 'Acetaminophen 650 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 996988, drugName: 'Aspirin 300 MG / Codeine Phosphate 8 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 996991, drugName: 'Aspirin 325 MG / Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 996994, drugName: 'Aspirin 325 MG / Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 996998, drugName: 'Brompheniramine Maleate 0.266 MG/ML / Codeine Phosphate 1.27 MG/ML / Phenylephrine Hydrochloride 0.666 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.27 MG/ML', strengthValue: 1.27, strengthUnit: 'MG/ML' },\n  { drugCode: 997008, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997014, drugName: 'Codeine Phosphate 0.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' },\n  { drugCode: 997019, drugName: 'Codeine Phosphate 1 MG/ML / Kaolin 300 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997160, drugName: 'Codeine Phosphate 1.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML / Pyrilamine Maleate 1.67 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 997164, drugName: 'Codeine Phosphate 12.5 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '12.5 MG', strengthValue: 12.5, strengthUnit: 'MG' },\n  { drugCode: 997165, drugName: 'Codeine Phosphate 12.8 MG / Ibuprofen 200 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '12.8 MG', strengthValue: 12.8, strengthUnit: 'MG' },\n  { drugCode: 997169, drugName: 'Codeine Phosphate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 997170, drugName: 'Codeine sulfate 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 997175, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997272, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997280, drugName: 'Codeine Phosphate 20 MG / Ibuprofen 300 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 997284, drugName: 'Codeine Phosphate 3 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '3 MG/ML', strengthValue: 3.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997285, drugName: 'Codeine Phosphate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 997287, drugName: 'Codeine sulfate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 997289, drugName: 'Codeine Phosphate 30 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997296, drugName: 'Codeine sulfate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 997301, drugName: 'Codeine Phosphate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 997303, drugName: 'Codeine Phosphate 60 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '60 MG/ML', strengthValue: 60.0, strengthUnit: 'MG/ML' },\n  { drugCode: 997398, drugName: 'Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 998212, drugName: '1 ML Morphine Sulfate 2 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 998213, drugName: '1 ML Morphine Sulfate 4 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 999729, drugName: 'Acetaminophen 250 MG / tramadol hydrochloride 50 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 1010600, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 1010603, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 1010604, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 1010606, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 1010608, drugName: 'Buprenorphine 2 MG / Naloxone 0.5 MG Sublingual Tablet [Suboxone]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2 MG', strengthValue: 2.0, strengthUnit: 'MG' },\n  { drugCode: 1010609, drugName: 'Buprenorphine 8 MG / Naloxone 2 MG Sublingual Tablet [Suboxone]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 1012727, drugName: 'Carbinoxamine maleate 0.4 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1014599, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1014615, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1014632, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1037259, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 1042693, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1043650, drugName: 'Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML / Triprolidine Hydrochloride 0.25 MG/ML Oral Solution [Poly Hist NC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1044427, drugName: 'Acetaminophen 20 MG/ML / Hydrocodone Bitartrate 0.667 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.667 MG/ML', strengthValue: 0.667, strengthUnit: 'MG/ML' },\n  { drugCode: 1049214, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049216, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049221, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049223, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049225, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1049227, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1049233, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1049251, drugName: 'Acetaminophen 400 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049260, drugName: 'Acetaminophen 400 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049267, drugName: 'Acetaminophen 400 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1049270, drugName: 'Acetaminophen 650 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049502, drugName: '12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049504, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049543, drugName: '12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1049545, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1049557, drugName: '12 HR Oxycodone Hydrochloride 160 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '160 MG', strengthValue: 160.0, strengthUnit: 'MG' },\n  { drugCode: 1049563, drugName: '12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1049565, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1049574, drugName: '12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1049576, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1049580, drugName: 'Acetaminophen 65 MG/ML / Oxycodone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1049582, drugName: 'Acetaminophen 65 MG/ML / Oxycodone Hydrochloride 1 MG/ML Oral Solution [Roxicet]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1049584, drugName: '12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1049586, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1049589, drugName: 'Ibuprofen 400 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049593, drugName: '12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1049595, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1049599, drugName: '12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 1049601, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet [Oxycontin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 1049604, drugName: 'Oxycodone Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1049611, drugName: 'Oxycodone Hydrochloride 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1049613, drugName: 'Oxycodone Hydrochloride 15 MG Oral Tablet [Roxicodone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1049615, drugName: 'Oxycodone Hydrochloride 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1049618, drugName: 'Oxycodone Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1049620, drugName: 'Oxycodone Hydrochloride 30 MG Oral Tablet [Roxicodone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1049621, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049623, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet [Roxicodone]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049625, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049635, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 1049637, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 1049640, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049642, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1049647, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1049650, drugName: 'Acetaminophen 650 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Percocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049651, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049655, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Xolox]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049658, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 5 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049683, drugName: 'Oxycodone Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049686, drugName: 'Oxycodone Hydrochloride 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1049691, drugName: 'Aspirin 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049696, drugName: 'Oxycodone Hydrochloride 5 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049709, drugName: 'Acetaminophen 500 MG / Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1049717, drugName: 'Oxycodone Hydrochloride 10 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1049719, drugName: 'Oxycodone Hydrochloride 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1049720, drugName: 'Oxycodone Hydrochloride 10 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1049721, drugName: 'Oxycodone Hydrochloride 20 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1049727, drugName: 'Oxycodone Hydrochloride 5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1050409, drugName: 'Oxycodone Hydrochloride 20 MG/ML Oral Solution [Oxyfast]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1050490, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Roxicet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1053647, drugName: 'Fentanyl 0.1 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' },\n  { drugCode: 1053651, drugName: 'Fentanyl 0.1 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG', strengthValue: 0.1, strengthUnit: 'MG' },\n  { drugCode: 1053652, drugName: 'Fentanyl 0.2 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 1053654, drugName: 'Fentanyl 0.2 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG', strengthValue: 0.2, strengthUnit: 'MG' },\n  { drugCode: 1053655, drugName: 'Fentanyl 0.3 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' },\n  { drugCode: 1053657, drugName: 'Fentanyl 0.3 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' },\n  { drugCode: 1053658, drugName: 'Fentanyl 0.4 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 1053660, drugName: 'Fentanyl 0.4 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG', strengthValue: 0.4, strengthUnit: 'MG' },\n  { drugCode: 1053661, drugName: 'Fentanyl 0.6 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 1053663, drugName: 'Fentanyl 0.6 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 1053664, drugName: 'Fentanyl 0.8 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 1053666, drugName: 'Fentanyl 0.8 MG Sublingual Tablet [Abstral]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG', strengthValue: 0.8, strengthUnit: 'MG' },\n  { drugCode: 1086310, drugName: '24 HR Morphine Sulfate 75 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 1086926, drugName: 'Codeine Phosphate 1.26 MG/ML / Guaifenesin 20 MG/ML Oral Solution [Relcof C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.26 MG/ML', strengthValue: 1.26, strengthUnit: 'MG/ML' },\n  { drugCode: 1087389, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 4 MG / HYDROCODONE POLISTIREX 5 MG Extended Release Oral Capsule [TussiCaps]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1087427, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 8 MG / HYDROCODONE POLISTIREX 10 MG Extended Release Oral Capsule [TussiCaps]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1087459, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 1.6 MG/ML / HYDROCODONE POLISTIREX 2 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1087463, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 1.6 MG/ML / HYDROCODONE POLISTIREX 2 MG/ML Extended Release Suspension [Tussionex]', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088951, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088953, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088963, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.33 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088965, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.33 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088968, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.75 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088970, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 3.75 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088975, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1088977, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089021, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.29 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089023, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.29 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089025, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 5 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089027, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 5 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089028, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Suspension', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089030, drugName: 'Codeine Phosphate 1 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Suspension [Zodryl DEC]', doseFormCode: 316969, doseFormName: 'Oral Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1089055, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089057, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 20 MG Oral Tablet [Ambifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089058, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089060, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet [Ambifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089061, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089063, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 40 MG Oral Tablet [Maxifed-G CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089070, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1089072, drugName: 'Codeine Phosphate 10 MG / Guaifenesin 400 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [Maxifed CD]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1098906, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1099711, drugName: 'Codeine Phosphate 20 MG / Pseudoephedrine Hydrochloride 60 MG / Triprolidine Hydrochloride 4 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1112220, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1112224, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Zutripro]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113048, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113050, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Notuss-NXD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113051, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113053, drugName: 'Chlorcyclizine hydrochloride 1.88 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution [Notuss-NX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113313, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet [Oxecta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1113314, drugName: 'Oxycodone Hydrochloride 7.5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1113316, drugName: 'Oxycodone Hydrochloride 7.5 MG Oral Tablet [Oxecta]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1113417, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113437, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Phenylhistine DH]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1113998, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1114002, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML Oral Solution [Codar AR]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1114003, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1114026, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1114030, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution [Codar GF]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1114110, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1114334, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1114338, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Rezira]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1114878, drugName: 'Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1115573, drugName: 'Fentanyl 0.1 MG/ACTUAT Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1115575, drugName: 'Fentanyl 0.1 MG/ACTUAT Nasal Spray [Lazanda]', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1115577, drugName: 'Fentanyl 0.4 MG/ACTUAT Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1115579, drugName: 'Fentanyl 0.4 MG/ACTUAT Nasal Spray [Lazanda]', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1145972, drugName: 'Codeine Phosphate 1.6 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Codar D]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1147395, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Xodol]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1147709, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 4.5 MG/ML Oral Solution [Lortuss EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1148478, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1148482, drugName: '24 HR tramadol hydrochloride 100 MG Extended Release Oral Capsule [ConZip]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1148485, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 1148487, drugName: '24 HR tramadol hydrochloride 200 MG Extended Release Oral Capsule [ConZip]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 1148489, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' },\n  { drugCode: 1148491, drugName: '24 HR tramadol hydrochloride 300 MG Extended Release Oral Capsule [ConZip]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' },\n  { drugCode: 1148797, drugName: '12 HR tapentadol 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1148800, drugName: '12 HR tapentadol 150 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 1148803, drugName: '12 HR tapentadol 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 1148807, drugName: '12 HR tapentadol 250 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' },\n  { drugCode: 1148809, drugName: '12 HR tapentadol 50 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 1149367, drugName: '12 HR tapentadol 100 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1149370, drugName: '12 HR tapentadol 150 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 1149373, drugName: '12 HR tapentadol 200 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 1149376, drugName: '12 HR tapentadol 250 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' },\n  { drugCode: 1149378, drugName: '12 HR tapentadol 50 MG Extended Release Oral Tablet [Nucynta]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 1190201, drugName: 'Acetaminophen 320.5 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Trezix]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1190284, drugName: '24 HR Morphine Sulfate 45 MG Extended Release Oral Capsule [Avinza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '45 MG', strengthValue: 45.0, strengthUnit: 'MG' },\n  { drugCode: 1190580, drugName: 'Codeine Phosphate 1.2 MG/ML / Dexbrompheniramine maleate 0.133 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' },\n  { drugCode: 1190587, drugName: 'Codeine Phosphate 1.2 MG/ML / Dexbrompheniramine maleate 0.133 MG/ML / Pseudoephedrine Hydrochloride 4 MG/ML Oral Solution [M-End Max D]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.2 MG/ML', strengthValue: 1.2, strengthUnit: 'MG/ML' },\n  { drugCode: 1190785, drugName: 'Atropine Sulfate 0.6 MG/ML / Morphine Sulfate 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1232113, drugName: '1 ML Morphine Sulfate 15 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1233685, drugName: 'Fentanyl 0.003 MG/ML / Ropivacaine hydrochloride 2.5 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.003 MG/ML', strengthValue: 0.003, strengthUnit: 'MG/ML' },\n  { drugCode: 1233686, drugName: 'Fentanyl 0.004 MG/ML / Ropivacaine hydrochloride 1 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.004 MG/ML', strengthValue: 0.004, strengthUnit: 'MG/ML' },\n  { drugCode: 1233687, drugName: 'Fentanyl 0.004 MG/ML / Ropivacaine hydrochloride 2 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.004 MG/ML', strengthValue: 0.004, strengthUnit: 'MG/ML' },\n  { drugCode: 1233700, drugName: 'Hydromorphone Hydrochloride 0.01 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '0.01 MG/ML', strengthValue: 0.01, strengthUnit: 'MG/ML' },\n  { drugCode: 1234871, drugName: 'Acetaminophen 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1234872, drugName: 'Aspirin 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1234941, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / dihydrocodeine bitartrate 0.6 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1234957, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / dihydrocodeine bitartrate 0.6 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution [ColdCough PD]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '0.6 MG/ML', strengthValue: 0.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1234976, drugName: 'Aspirin 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Synalgos-DC]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1234978, drugName: 'Acetaminophen 712.8 MG / Caffeine 60 MG / dihydrocodeine bitartrate 32 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' },\n  { drugCode: 1234990, drugName: 'Acetaminophen 356.4 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule [Trezix]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1234999, drugName: 'Acetaminophen 500 MG / dihydrocodeine bitartrate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1235009, drugName: 'Acetaminophen 500 MG / dihydrocodeine bitartrate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1235011, drugName: 'Acetaminophen 500 MG / dihydrocodeine bitartrate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1235862, drugName: 'Chlorcyclizine hydrochloride 2.5 MG/ML / Codeine Phosphate 1.8 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1236113, drugName: 'dihydrocodeine bitartrate 1.5 MG/ML / Guaifenesin 10 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1236115, drugName: 'dihydrocodeine bitartrate 1.5 MG/ML / Guaifenesin 10 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution [Poly Tussin EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '1.5 MG/ML', strengthValue: 1.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1236179, drugName: 'dihydrocodeine bitartrate 120 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' },\n  { drugCode: 1236181, drugName: 'dihydrocodeine bitartrate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1236182, drugName: 'dihydrocodeine bitartrate 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1236184, drugName: 'dihydrocodeine bitartrate 40 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1236186, drugName: 'dihydrocodeine bitartrate 50 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1236188, drugName: 'dihydrocodeine bitartrate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1236190, drugName: 'dihydrocodeine bitartrate 90 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '90 MG', strengthValue: 90.0, strengthUnit: 'MG' },\n  { drugCode: 1236239, drugName: 'dihydrocodeine bitartrate 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1237050, drugName: 'Fentanyl 0.1 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237055, drugName: 'Fentanyl 0.1 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.1 MG/ACTUAT', strengthValue: 0.1, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237057, drugName: 'Fentanyl 0.2 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG/ACTUAT', strengthValue: 0.2, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237059, drugName: 'Fentanyl 0.2 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.2 MG/ACTUAT', strengthValue: 0.2, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237060, drugName: 'Fentanyl 0.4 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237062, drugName: 'Fentanyl 0.4 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.4 MG/ACTUAT', strengthValue: 0.4, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237064, drugName: 'Fentanyl 0.6 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG/ACTUAT', strengthValue: 0.6, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237066, drugName: 'Fentanyl 0.6 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG/ACTUAT', strengthValue: 0.6, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237068, drugName: 'Fentanyl 0.8 MG/ACTUAT Mucosal Spray', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG/ACTUAT', strengthValue: 0.8, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1237070, drugName: 'Fentanyl 0.8 MG/ACTUAT Mucosal Spray [Subsys]', doseFormCode: 346163, doseFormName: 'Mucosal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG/ACTUAT', strengthValue: 0.8, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1242106, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1242503, drugName: '1 ML Meperidine Hydrochloride 25 MG/ML Cartridge [Demerol]', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1242558, drugName: 'Chlorcyclizine hydrochloride 2.5 MG/ML / Codeine Phosphate 1.8 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Statuss Green Reformulated Jan 2012]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1244754, drugName: 'Guaifenesin 20 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1244921, drugName: 'Brompheniramine Maleate 0.266 MG/ML / Codeine Phosphate 1.27 MG/ML / Phenylephrine Hydrochloride 0.666 MG/ML Oral Solution [M-End PE]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.27 MG/ML', strengthValue: 1.27, strengthUnit: 'MG/ML' },\n  { drugCode: 1248039, drugName: 'Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Entuss-D Liquid]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1248040, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1248044, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Nalex Expectorant]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1248046, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 1 MG/ML / Pseudoephedrine Hydrochloride 12 MG/ML Oral Solution [Vanacon]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1248115, drugName: '24 HR tramadol hydrochloride 150 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 1294356, drugName: 'Bromodiphenhydramine hydrochloride 2.5 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1294380, drugName: 'Diphenhydramine Tannate 5 MG/ML / hydrocodone tannate 0.7 MG/ML / Phenylephrine Tannate 1.5 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' },\n  { drugCode: 1294382, drugName: 'Diphenhydramine Hydrochloride 2.5 MG/ML / Hydrocodone Bitartrate 0.7 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' },\n  { drugCode: 1294383, drugName: 'Diphenhydramine Hydrochloride 2.5 MG/ML / Hydrocodone Bitartrate 0.4 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.4 MG/ML', strengthValue: 0.4, strengthUnit: 'MG/ML' },\n  { drugCode: 1297584, drugName: 'Diphenhydramine Tannate 5 MG/ML / hydrocodone tannate 0.7 MG/ML / Phenylephrine Tannate 1.5 MG/ML Extended Release Suspension [Dytan-HC]', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.7 MG/ML', strengthValue: 0.7, strengthUnit: 'MG/ML' },\n  { drugCode: 1297649, drugName: 'Codeine sulfate 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '6 MG/ML', strengthValue: 6.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1302739, drugName: 'Butorphanol 10 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1302741, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Dolorex Solution]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1303729, drugName: 'Morphine Sulfate 130 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '130 MG', strengthValue: 130.0, strengthUnit: 'MG' },\n  { drugCode: 1303731, drugName: 'Morphine Sulfate 130 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '130 MG', strengthValue: 130.0, strengthUnit: 'MG' },\n  { drugCode: 1303733, drugName: 'Morphine Sulfate 150 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 1303736, drugName: 'Morphine Sulfate 40 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1303738, drugName: 'Morphine Sulfate 40 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1303740, drugName: 'Morphine Sulfate 70 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '70 MG', strengthValue: 70.0, strengthUnit: 'MG' },\n  { drugCode: 1303742, drugName: 'Morphine Sulfate 70 MG Extended Release Oral Capsule [Kadian]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7052, ingredientName: 'Morphine', strength: '70 MG', strengthValue: 70.0, strengthUnit: 'MG' },\n  { drugCode: 1306898, drugName: '24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' },\n  { drugCode: 1306900, drugName: '24 HR Hydromorphone Hydrochloride 32 MG Extended Release Oral Tablet [Exalgo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '32 MG', strengthValue: 32.0, strengthUnit: 'MG' },\n  { drugCode: 1307056, drugName: 'Buprenorphine 4 MG / Naloxone 1 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' },\n  { drugCode: 1307058, drugName: 'Buprenorphine 4 MG / Naloxone 1 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4 MG', strengthValue: 4.0, strengthUnit: 'MG' },\n  { drugCode: 1307061, drugName: 'Buprenorphine 12 MG / Naloxone 3 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' },\n  { drugCode: 1307063, drugName: 'Buprenorphine 12 MG / Naloxone 3 MG Oral Strip [Suboxone]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '12 MG', strengthValue: 12.0, strengthUnit: 'MG' },\n  { drugCode: 1308438, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1308440, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML Oral Solution [Nalex AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1310202, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1310212, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1310270, drugName: 'Acetaminophen 300 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Vicodin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1310927, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Butorphic]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1313294, drugName: 'Guaifenesin 10 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 1.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1356315, drugName: 'tapentadol 20 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1356319, drugName: 'tapentadol 20 MG/ML Oral Solution [Nucynta]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 787390, ingredientName: 'tapentadol', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1356797, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1356799, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Brovex PBC]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1356800, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1356802, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 10 MG Oral Tablet [BroveX CB]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1356804, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1356806, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG / Phenylephrine Hydrochloride 10 MG Oral Tablet [Brovex PBC]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1356807, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1356809, drugName: 'Brompheniramine Maleate 4 MG / Codeine Phosphate 20 MG Oral Tablet [BroveX CB]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1356835, drugName: 'Brompheniramine Maleate 0.6 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1357402, drugName: 'Brompheniramine Maleate 0.4 MG/ML / Codeine Phosphate 2 MG/ML / Phenylpropanolamine Hydrochloride 2.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1357940, drugName: 'Dexchlorpheniramine maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.8 MG/ML', strengthValue: 0.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1357942, drugName: 'Dexchlorpheniramine maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.8 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution [Zotex HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.8 MG/ML', strengthValue: 0.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1358753, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1366873, drugName: 'Hydrocodone Bitartrate 5 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1366875, drugName: 'Hydrocodone Bitartrate 5 MG / Pseudoephedrine Hydrochloride 60 MG Oral Tablet [P-V-Tussin]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1366879, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [P-V-Tussin Syrup]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1368072, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Tusnel C]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1372265, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1372873, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Hydrocodone Bitartrate 1 MG/ML Oral Solution [Vituz]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1424295, drugName: 'Acetaminophen 325 MG / Chlorpheniramine Maleate 2 MG / Codeine Phosphate 8 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 1424297, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 6 MG / Pseudoephedrine Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '6 MG', strengthValue: 6.0, strengthUnit: 'MG' },\n  { drugCode: 1431076, drugName: 'Buprenorphine 1.4 MG / Naloxone 0.36 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.4 MG', strengthValue: 1.4, strengthUnit: 'MG' },\n  { drugCode: 1431083, drugName: 'Buprenorphine 1.4 MG / Naloxone 0.36 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.4 MG', strengthValue: 1.4, strengthUnit: 'MG' },\n  { drugCode: 1431102, drugName: 'Buprenorphine 5.7 MG / Naloxone 1.4 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '5.7 MG', strengthValue: 5.7, strengthUnit: 'MG' },\n  { drugCode: 1431104, drugName: 'Buprenorphine 5.7 MG / Naloxone 1.4 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '5.7 MG', strengthValue: 5.7, strengthUnit: 'MG' },\n  { drugCode: 1431286, drugName: 'Acetaminophen 300 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1432969, drugName: '168 HR Buprenorphine 0.015 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.015 MG/HR', strengthValue: 0.015, strengthUnit: 'MG/HR' },\n  { drugCode: 1432971, drugName: '168 HR Buprenorphine 0.015 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.015 MG/HR', strengthValue: 0.015, strengthUnit: 'MG/HR' },\n  { drugCode: 1433251, drugName: '0.5 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1433802, drugName: 'Acetaminophen 300 MG / butalbital 50 MG / Caffeine 40 MG / Codeine Phosphate 30 MG Oral Capsule [Fioricet with Codeine]', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1440003, drugName: 'Codeine Phosphate 1.8 MG/ML / Dexchlorpheniramine maleate 0.2 MG/ML / Phenylephrine Hydrochloride 1 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1442445, drugName: 'Acetaminophen 20 MG/ML / Hydrocodone Bitartrate 0.667 MG/ML Oral Solution [Lortab]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.667 MG/ML', strengthValue: 0.667, strengthUnit: 'MG/ML' },\n  { drugCode: 1442790, drugName: '1 ML Morphine Sulfate 5 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1487288, drugName: 'Acetaminophen 325 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Endocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 1487611, drugName: 'Fentanyl 50 MG/ML Topical Solution', doseFormCode: 316986, doseFormName: 'Topical Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1487616, drugName: 'Fentanyl 50 MG/ML Topical Solution [Recuvyra]', doseFormCode: 316986, doseFormName: 'Topical Solution', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1488634, drugName: 'Buprenorphine hydrochloride 1.3 MG/ML Injectable Suspension', doseFormCode: 316950, doseFormName: 'Injectable Suspension', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.3 MG/ML', strengthValue: 1.3, strengthUnit: 'MG/ML' },\n  { drugCode: 1488639, drugName: 'Buprenorphine hydrochloride 1.3 MG/ML Injectable Suspension [Animalgesics]', doseFormCode: 316950, doseFormName: 'Injectable Suspension', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.3 MG/ML', strengthValue: 1.3, strengthUnit: 'MG/ML' },\n  { drugCode: 1489991, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Torbugesic]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1491832, drugName: '12 HR Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1491834, drugName: '12 HR Acetaminophen 325 MG / Oxycodone Hydrochloride 7.5 MG Extended Release Oral Tablet [Xartemis]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1492671, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Lorcet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1492673, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Lorcet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1492675, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lorcet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1495472, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 10 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1495474, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1495476, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 7.5 MG Oral Tablet [Lortab]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1535979, drugName: 'Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' },\n  { drugCode: 1535981, drugName: 'Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution [Z-Cof HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' },\n  { drugCode: 1536457, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 8 MG Effervescent Oral Tablet', doseFormCode: 1535727, doseFormName: 'Effervescent Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '8 MG', strengthValue: 8.0, strengthUnit: 'MG' },\n  { drugCode: 1536459, drugName: 'Acetaminophen 500 MG / Codeine Phosphate 30 MG Effervescent Oral Tablet', doseFormCode: 1535727, doseFormName: 'Effervescent Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1537116, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 5 MG Oral Tablet [Primlev]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1537120, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 10 MG Oral Tablet [Primlev]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1537122, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 7.5 MG Oral Tablet [Primlev]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1541630, drugName: 'Brompheniramine Maleate 0.8 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1542390, drugName: 'Buprenorphine 2.1 MG / Naloxone 0.3 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.1 MG', strengthValue: 2.1, strengthUnit: 'MG' },\n  { drugCode: 1542396, drugName: 'Buprenorphine 2.1 MG / Naloxone 0.3 MG Buccal Film [Bunavail]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.1 MG', strengthValue: 2.1, strengthUnit: 'MG' },\n  { drugCode: 1542981, drugName: 'Acetaminophen 325 MG / Hydrocodone Bitartrate 2.5 MG Oral Tablet [Verdrocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 1542988, drugName: 'Hydrocodone Bitartrate 10 MG / Ibuprofen 200 MG Oral Tablet [Xylon]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1542997, drugName: '168 HR Buprenorphine 0.0075 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.0075 MG/HR', strengthValue: 0.0075, strengthUnit: 'MG/HR' },\n  { drugCode: 1542999, drugName: '168 HR Buprenorphine 0.0075 MG/HR Transdermal System [BuTrans]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.0075 MG/HR', strengthValue: 0.0075, strengthUnit: 'MG/HR' },\n  { drugCode: 1544851, drugName: 'Buprenorphine 4.2 MG / Naloxone 0.7 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4.2 MG', strengthValue: 4.2, strengthUnit: 'MG' },\n  { drugCode: 1544853, drugName: 'Buprenorphine 4.2 MG / Naloxone 0.7 MG Buccal Film [Bunavail]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '4.2 MG', strengthValue: 4.2, strengthUnit: 'MG' },\n  { drugCode: 1544854, drugName: 'Buprenorphine 6.3 MG / Naloxone 1 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '6.3 MG', strengthValue: 6.3, strengthUnit: 'MG' },\n  { drugCode: 1544856, drugName: 'Buprenorphine 6.3 MG / Naloxone 1 MG Buccal Film [Bunavail]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '6.3 MG', strengthValue: 6.3, strengthUnit: 'MG' },\n  { drugCode: 1545903, drugName: '12 HR Naloxone Hydrochloride 10 MG / Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1545907, drugName: '12 HR Naloxone Hydrochloride 20 MG / Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1545910, drugName: '12 HR Naloxone Hydrochloride 5 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1546089, drugName: '12 HR Naloxone Hydrochloride 5 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet [Targiniq]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1547607, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 20 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Lortuss EX]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1594650, drugName: 'Buprenorphine 1.8 MG/ML Injectable Solution', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1594655, drugName: 'Buprenorphine 1.8 MG/ML Injectable Solution [Simbadol]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '1.8 MG/ML', strengthValue: 1.8, strengthUnit: 'MG/ML' },\n  { drugCode: 1595214, drugName: 'Codeine Phosphate 1.6 MG/ML / Guaifenesin 40 MG/ML Oral Solution [Ninjacof XG]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '1.6 MG/ML', strengthValue: 1.6, strengthUnit: 'MG/ML' },\n  { drugCode: 1595730, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1595736, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1595740, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1595742, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1595746, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1595748, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1595752, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1595754, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 60 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1595758, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 80 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 1595760, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 80 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 1595764, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1595766, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 100 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1595770, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 120 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' },\n  { drugCode: 1595772, drugName: 'Abuse-Deterrent 24 HR Hydrocodone Bitartrate 120 MG Extended Release Oral Tablet [Hysingla]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '120 MG', strengthValue: 120.0, strengthUnit: 'MG' },\n  { drugCode: 1596108, drugName: 'Acetaminophen 320.5 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Capsule', doseFormCode: 316965, doseFormName: 'Oral Capsule', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1597568, drugName: 'Buprenorphine 11.4 MG / Naloxone 2.9 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '11.4 MG', strengthValue: 11.4, strengthUnit: 'MG' },\n  { drugCode: 1597570, drugName: 'Buprenorphine 11.4 MG / Naloxone 2.9 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '11.4 MG', strengthValue: 11.4, strengthUnit: 'MG' },\n  { drugCode: 1597573, drugName: 'Buprenorphine 8.6 MG / Naloxone 2.1 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8.6 MG', strengthValue: 8.6, strengthUnit: 'MG' },\n  { drugCode: 1597575, drugName: 'Buprenorphine 8.6 MG / Naloxone 2.1 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '8.6 MG', strengthValue: 8.6, strengthUnit: 'MG' },\n  { drugCode: 1598284, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Obredon]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1603495, drugName: '72 HR Fentanyl 0.0375 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.0375 MG/HR', strengthValue: 0.0375, strengthUnit: 'MG/HR' },\n  { drugCode: 1603498, drugName: '72 HR Fentanyl 0.0625 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.0625 MG/HR', strengthValue: 0.0625, strengthUnit: 'MG/HR' },\n  { drugCode: 1603501, drugName: '72 HR Fentanyl 0.0875 MG/HR Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.0875 MG/HR', strengthValue: 0.0875, strengthUnit: 'MG/HR' },\n  { drugCode: 1650982, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML Oral Solution [Flowtuss]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1651558, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1651564, drugName: 'Guaifenesin 40 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution [Hycofenix]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1652087, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 0.8 MG/ML / CODEINE POLISTIREX 4 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1652093, drugName: '12 HR CHLORPHENIRAMINE POLISTIREX 0.8 MG/ML / CODEINE POLISTIREX 4 MG/ML Extended Release Suspension [Tuzistra]', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 2670, ingredientName: 'Codeine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1655032, drugName: '1 ML Buprenorphine 0.3 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG/ML', strengthValue: 0.3, strengthUnit: 'MG/ML' },\n  { drugCode: 1655058, drugName: 'Meperidine Hydrochloride 150 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '150 MG', strengthValue: 150.0, strengthUnit: 'MG' },\n  { drugCode: 1655060, drugName: 'Meperidine Hydrochloride 75 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '75 MG', strengthValue: 75.0, strengthUnit: 'MG' },\n  { drugCode: 1661319, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML / Triprolidine Hydrochloride 0.5 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1661325, drugName: 'Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML / Triprolidine Hydrochloride 0.5 MG/ML Oral Solution [Histex AC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1664448, drugName: 'Oxycodone Hydrochloride 5 MG Oral Tablet [Oxaydo]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1664543, drugName: '12 HR Chlorpheniramine Maleate 8 MG / Codeine Phosphate 54.3 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '54.3 MG', strengthValue: 54.3, strengthUnit: 'MG' },\n  { drugCode: 1664634, drugName: 'Oxycodone Hydrochloride 7.5 MG Oral Tablet [Oxaydo]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '7.5 MG', strengthValue: 7.5, strengthUnit: 'MG' },\n  { drugCode: 1665685, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665687, drugName: '1 ML Meperidine Hydrochloride 100 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '100 MG/ML', strengthValue: 100.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665690, drugName: '1.5 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665691, drugName: '1.5 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665697, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665698, drugName: '1 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665699, drugName: '0.5 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665700, drugName: '0.5 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665701, drugName: '2 ML Meperidine Hydrochloride 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1665702, drugName: '2 ML Meperidine Hydrochloride 50 MG/ML Injection [Demerol]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 6754, ingredientName: 'Meperidine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1666338, drugName: 'Buprenorphine 2.9 MG / Naloxone 0.71 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.9 MG', strengthValue: 2.9, strengthUnit: 'MG' },\n  { drugCode: 1666385, drugName: 'Buprenorphine 2.9 MG / Naloxone 0.71 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '2.9 MG', strengthValue: 2.9, strengthUnit: 'MG' },\n  { drugCode: 1666831, drugName: 'Fentanyl 0.04 MG Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.04 MG', strengthValue: 0.04, strengthUnit: 'MG' },\n  { drugCode: 1666831, drugName: 'Fentanyl 0.04 MG Transdermal System', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.04 MG/ACTUAT', strengthValue: 0.04, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1666837, drugName: 'Fentanyl 0.04 MG Transdermal System [Ionsys]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.04 MG', strengthValue: 0.04, strengthUnit: 'MG' },\n  { drugCode: 1666837, drugName: 'Fentanyl 0.04 MG Transdermal System [Ionsys]', doseFormCode: 316987, doseFormName: 'Transdermal System', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.04 MG/ACTUAT', strengthValue: 0.04, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1716057, drugName: 'Buprenorphine 0.15 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.15 MG', strengthValue: 0.15, strengthUnit: 'MG' },\n  { drugCode: 1716063, drugName: 'Buprenorphine 0.15 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.15 MG', strengthValue: 0.15, strengthUnit: 'MG' },\n  { drugCode: 1716065, drugName: 'Buprenorphine 0.3 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' },\n  { drugCode: 1716067, drugName: 'Buprenorphine 0.3 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.3 MG', strengthValue: 0.3, strengthUnit: 'MG' },\n  { drugCode: 1716069, drugName: 'Buprenorphine 0.45 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.45 MG', strengthValue: 0.45, strengthUnit: 'MG' },\n  { drugCode: 1716071, drugName: 'Buprenorphine 0.45 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.45 MG', strengthValue: 0.45, strengthUnit: 'MG' },\n  { drugCode: 1716073, drugName: 'Buprenorphine 0.6 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 1716075, drugName: 'Buprenorphine 0.6 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.6 MG', strengthValue: 0.6, strengthUnit: 'MG' },\n  { drugCode: 1716077, drugName: 'Buprenorphine 0.075 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.075 MG', strengthValue: 0.075, strengthUnit: 'MG' },\n  { drugCode: 1716079, drugName: 'Buprenorphine 0.075 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.075 MG', strengthValue: 0.075, strengthUnit: 'MG' },\n  { drugCode: 1716081, drugName: 'Buprenorphine 0.75 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.75 MG', strengthValue: 0.75, strengthUnit: 'MG' },\n  { drugCode: 1716083, drugName: 'Buprenorphine 0.75 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.75 MG', strengthValue: 0.75, strengthUnit: 'MG' },\n  { drugCode: 1716086, drugName: 'Buprenorphine 0.9 MG Buccal Film', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.9 MG', strengthValue: 0.9, strengthUnit: 'MG' },\n  { drugCode: 1716090, drugName: 'Buprenorphine 0.9 MG Buccal Film [Belbuca]', doseFormCode: 858080, doseFormName: 'Buccal Film', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.9 MG', strengthValue: 0.9, strengthUnit: 'MG' },\n  { drugCode: 1724276, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724338, drugName: '1 ML Hydromorphone Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724340, drugName: '5 ML Hydromorphone Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724341, drugName: '50 ML Hydromorphone Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724352, drugName: 'Hydromorphone Hydrochloride 250 MG Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' },\n  { drugCode: 1724354, drugName: 'Hydromorphone Hydrochloride 250 MG Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '250 MG', strengthValue: 250.0, strengthUnit: 'MG' },\n  { drugCode: 1724356, drugName: '1 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724358, drugName: '5 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724359, drugName: '50 ML Hydromorphone Hydrochloride 10 MG/ML Injection [Dilaudid]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724383, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1724644, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728351, drugName: '1 ML Butorphanol Tartrate 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728355, drugName: '2 ML Butorphanol Tartrate 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728783, drugName: '10 ML Morphine Sulfate 0.5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1728784, drugName: '10 ML Morphine Sulfate 0.5 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1728789, drugName: '30 ML Morphine Sulfate 0.5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1728791, drugName: '2 ML Morphine Sulfate 0.5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1728792, drugName: '2 ML Morphine Sulfate 0.5 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 1728800, drugName: '10 ML Morphine Sulfate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728801, drugName: '10 ML Morphine Sulfate 1 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728805, drugName: '2 ML Morphine Sulfate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728806, drugName: '2 ML Morphine Sulfate 1 MG/ML Injection [Astramorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1728999, drugName: '30 ML Morphine Sulfate 1 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1729197, drugName: '1 ML Morphine Sulfate 2 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1729320, drugName: 'Fentanyl 0.3 MG/ACTUAT Nasal Spray', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG/ACTUAT', strengthValue: 0.3, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1729322, drugName: 'Fentanyl 0.3 MG/ACTUAT Nasal Spray [Lazanda]', doseFormCode: 126542, doseFormName: 'Nasal Spray', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.3 MG/ACTUAT', strengthValue: 0.3, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1731517, drugName: '10 ML Morphine Sulfate 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731520, drugName: '4 ML Morphine Sulfate 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731522, drugName: '20 ML Morphine Sulfate 25 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731530, drugName: '1 ML Morphine Sulfate 15 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731537, drugName: '20 ML Morphine Sulfate 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731545, drugName: '50 ML Morphine Sulfate 50 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '50 MG/ML', strengthValue: 50.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731993, drugName: '1 ML Morphine Sulfate 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731995, drugName: '1 ML Morphine Sulfate 10 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731998, drugName: '20 ML Morphine Sulfate 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1731999, drugName: '20 ML Morphine Sulfate 10 MG/ML Injection [Infumorph]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1732003, drugName: '1 ML Morphine Sulfate 8 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '8 MG/ML', strengthValue: 8.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1732006, drugName: '1 ML Morphine Sulfate 4 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1732011, drugName: '1 ML Morphine Sulfate 8 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '8 MG/ML', strengthValue: 8.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1732014, drugName: '1 ML Morphine Sulfate 4 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1732136, drugName: '1 ML Morphine Sulfate 5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1732138, drugName: '30 ML Morphine Sulfate 5 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '5 MG/ML', strengthValue: 5.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1733080, drugName: '1 ML Morphine Sulfate 15 MG/ML Cartridge', doseFormCode: 1649572, doseFormName: 'Cartridge', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG/ML', strengthValue: 15.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1735003, drugName: '2 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735006, drugName: '10 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735007, drugName: '5 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735008, drugName: '20 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735013, drugName: '50 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735057, drugName: '2 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735060, drugName: '5 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735062, drugName: '20 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1735065, drugName: '10 ML Fentanyl 0.05 MG/ML Injection [Sublimaze]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 1740007, drugName: '{2 (Fentanyl 0.6 MG/ACTUAT Mucosal Spray) } Pack', doseFormCode: 746839, doseFormName: 'Pack', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG/ACTUAT', strengthValue: 0.6, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1740008, drugName: '{2 (Fentanyl 0.6 MG/ACTUAT Mucosal Spray [Subsys]) } Pack [Subsys 1200 MCG]', doseFormCode: 746839, doseFormName: 'Pack', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.6 MG/ACTUAT', strengthValue: 0.6, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1740009, drugName: '{2 (Fentanyl 0.8 MG/ACTUAT Mucosal Spray) } Pack', doseFormCode: 746839, doseFormName: 'Pack', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG/ACTUAT', strengthValue: 0.8, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1740010, drugName: '{2 (Fentanyl 0.8 MG/ACTUAT Mucosal Spray [Subsys]) } Pack [Subsys 1600 MCG]', doseFormCode: 746839, doseFormName: 'Pack', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.8 MG/ACTUAT', strengthValue: 0.8, strengthUnit: 'MG/ACTUAT' },\n  { drugCode: 1745881, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1745886, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1745889, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1745892, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet [Morphabond]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1790527, drugName: 'Abuse-Deterrent 12 HR Oxycodone 9 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' },\n  { drugCode: 1790533, drugName: 'Abuse-Deterrent 12 HR Oxycodone 9 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '9 MG', strengthValue: 9.0, strengthUnit: 'MG' },\n  { drugCode: 1791558, drugName: 'Abuse-Deterrent 12 HR Oxycodone 13.5 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '13.5 MG', strengthValue: 13.5, strengthUnit: 'MG' },\n  { drugCode: 1791560, drugName: 'Abuse-Deterrent 12 HR Oxycodone 13.5 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '13.5 MG', strengthValue: 13.5, strengthUnit: 'MG' },\n  { drugCode: 1791567, drugName: 'Abuse-Deterrent 12 HR Oxycodone 18 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '18 MG', strengthValue: 18.0, strengthUnit: 'MG' },\n  { drugCode: 1791569, drugName: 'Abuse-Deterrent 12 HR Oxycodone 18 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '18 MG', strengthValue: 18.0, strengthUnit: 'MG' },\n  { drugCode: 1791574, drugName: 'Abuse-Deterrent 12 HR Oxycodone 27 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '27 MG', strengthValue: 27.0, strengthUnit: 'MG' },\n  { drugCode: 1791576, drugName: 'Abuse-Deterrent 12 HR Oxycodone 27 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '27 MG', strengthValue: 27.0, strengthUnit: 'MG' },\n  { drugCode: 1791580, drugName: 'Abuse-Deterrent 12 HR Oxycodone 36 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '36 MG', strengthValue: 36.0, strengthUnit: 'MG' },\n  { drugCode: 1791582, drugName: 'Abuse-Deterrent 12 HR Oxycodone 36 MG Extended Release Oral Capsule [Xtampza]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '36 MG', strengthValue: 36.0, strengthUnit: 'MG' },\n  { drugCode: 1792707, drugName: 'Codeine Phosphate 2 MG/ML / Guaifenesin 40 MG/ML / Pseudoephedrine Hydrochloride 6 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1797650, drugName: 'Buprenorphine 74.2 MG Drug Implant', doseFormCode: 657710, doseFormName: 'Drug Implant', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '74.2 MG', strengthValue: 74.2, strengthUnit: 'MG' },\n  { drugCode: 1797655, drugName: 'Buprenorphine 74.2 MG Drug Implant [Probuphine]', doseFormCode: 657710, doseFormName: 'Drug Implant', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '74.2 MG', strengthValue: 74.2, strengthUnit: 'MG' },\n  { drugCode: 1806701, drugName: '12 HR Naltrexone hydrochloride 1.2 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1806707, drugName: '12 HR Naltrexone hydrochloride 1.2 MG / Oxycodone Hydrochloride 10 MG Extended Release Oral Capsule [Troxyca]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1806710, drugName: '12 HR Naltrexone hydrochloride 2.4 MG / Oxycodone Hydrochloride 20 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1806716, drugName: '12 HR Naltrexone hydrochloride 3.6 MG / Oxycodone Hydrochloride 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1806722, drugName: '12 HR Naltrexone hydrochloride 4.8 MG / Oxycodone Hydrochloride 40 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1806728, drugName: '12 HR Naltrexone hydrochloride 7.2 MG / Oxycodone Hydrochloride 60 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1806734, drugName: '12 HR Naltrexone hydrochloride 9.6 MG / Oxycodone Hydrochloride 80 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 1809204, drugName: 'Butorphanol Tartrate 2 MG/ML Injectable Solution [Torbugesic]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1811473, drugName: '1 ML Pentazocine 30 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1811475, drugName: '1 ML Pentazocine 30 MG/ML Injection [Talwin]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 8001, ingredientName: 'Pentazocine', strength: '30 MG/ML', strengthValue: 30.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1812164, drugName: 'Acetaminophen 325 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1860127, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1860129, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 20 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1860137, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 40 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1860148, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 80 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '80 MG', strengthValue: 80.0, strengthUnit: 'MG' },\n  { drugCode: 1860151, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1860154, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1860157, drugName: 'Abuse-Deterrent 12 HR Oxycodone Hydrochloride 10 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1860491, drugName: '12 HR Hydrocodone Bitartrate 10 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1860492, drugName: '12 HR Hydrocodone Bitartrate 10 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '10 MG', strengthValue: 10.0, strengthUnit: 'MG' },\n  { drugCode: 1860493, drugName: '12 HR Hydrocodone Bitartrate 15 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1860494, drugName: '12 HR Hydrocodone Bitartrate 15 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1860495, drugName: '12 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1860496, drugName: '12 HR Hydrocodone Bitartrate 20 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '20 MG', strengthValue: 20.0, strengthUnit: 'MG' },\n  { drugCode: 1860497, drugName: '12 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1860498, drugName: '12 HR Hydrocodone Bitartrate 30 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1860499, drugName: '12 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1860500, drugName: '12 HR Hydrocodone Bitartrate 40 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1860501, drugName: '12 HR Hydrocodone Bitartrate 50 MG Extended Release Oral Capsule', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 1860502, drugName: '12 HR Hydrocodone Bitartrate 50 MG Extended Release Oral Capsule [Zohydro]', doseFormCode: 316943, doseFormName: 'Extended Release Oral Capsule', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '50 MG', strengthValue: 50.0, strengthUnit: 'MG' },\n  { drugCode: 1864412, drugName: 'Buprenorphine 0.7 MG / Naloxone 0.18 MG Sublingual Tablet', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.7 MG', strengthValue: 0.7, strengthUnit: 'MG' },\n  { drugCode: 1864414, drugName: 'Buprenorphine 0.7 MG / Naloxone 0.18 MG Sublingual Tablet [Zubsolv]', doseFormCode: 317007, doseFormName: 'Sublingual Tablet', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '0.7 MG', strengthValue: 0.7, strengthUnit: 'MG' },\n  { drugCode: 1866543, drugName: '1 ML Nalbuphine Hydrochloride 10 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7238, ingredientName: 'Nalbuphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1866551, drugName: '1 ML Nalbuphine Hydrochloride 20 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7238, ingredientName: 'Nalbuphine', strength: '20 MG/ML', strengthValue: 20.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1871434, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1871440, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 15 MG Extended Release Oral Tablet [Arymo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1871441, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1871443, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 30 MG Extended Release Oral Tablet [Arymo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1871444, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1871446, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 60 MG Extended Release Oral Tablet [Arymo]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '60 MG', strengthValue: 60.0, strengthUnit: 'MG' },\n  { drugCode: 1872234, drugName: 'Abuse-Deterrent 12 HR Morphine Sulfate 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 7052, ingredientName: 'Morphine', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1872265, drugName: '1 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1872269, drugName: '1 ML Hydromorphone Hydrochloride 2 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1872271, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1872272, drugName: '1 ML Hydromorphone Hydrochloride 4 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '4 MG/ML', strengthValue: 4.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1872752, drugName: '0.5 ML Hydromorphone Hydrochloride 1 MG/ML Prefilled Syringe [Dilaudid]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 3423, ingredientName: 'Hydromorphone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1944529, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 15 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1944535, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 15 MG Oral Tablet [Roxybond]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '15 MG', strengthValue: 15.0, strengthUnit: 'MG' },\n  { drugCode: 1944538, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 30 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1944540, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 30 MG Oral Tablet [Roxybond]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '30 MG', strengthValue: 30.0, strengthUnit: 'MG' },\n  { drugCode: 1944541, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 5 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1944543, drugName: 'Abuse-Deterrent Oxycodone Hydrochloride 5 MG Oral Tablet [Roxybond]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '5 MG', strengthValue: 5.0, strengthUnit: 'MG' },\n  { drugCode: 1946525, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 300 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '300 MG', strengthValue: 300.0, strengthUnit: 'MG' },\n  { drugCode: 1946527, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 200 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '200 MG', strengthValue: 200.0, strengthUnit: 'MG' },\n  { drugCode: 1946529, drugName: 'Matrix Delivery 24 HR tramadol hydrochloride 100 MG Extended Release Oral Tablet', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 1947138, drugName: 'Butorphanol 10 MG/ML Injectable Solution [Torphaject]', doseFormCode: 316949, doseFormName: 'Injectable Solution', ingredientCode: 1841, ingredientName: 'Butorphanol', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1990745, drugName: 'Methadone Hydrochloride 40 MG Tablet for Oral Suspension [Diskets]', doseFormCode: 1861409, doseFormName: 'Tablet for Oral Suspension', ingredientCode: 6813, ingredientName: 'Methadone', strength: '40 MG', strengthValue: 40.0, strengthUnit: 'MG' },\n  { drugCode: 1995536, drugName: 'Acetaminophen 325 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Tablet [Panlor Reformulated Jan 2018]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 1996184, drugName: '0.5 ML Buprenorphine 200 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '200 MG/ML', strengthValue: 200.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1996189, drugName: '0.5 ML Buprenorphine 200 MG/ML Prefilled Syringe [Sublocade]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '200 MG/ML', strengthValue: 200.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1996192, drugName: '1.5 ML Buprenorphine 200 MG/ML Prefilled Syringe', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '200 MG/ML', strengthValue: 200.0, strengthUnit: 'MG/ML' },\n  { drugCode: 1996193, drugName: '1.5 ML Buprenorphine 200 MG/ML Prefilled Syringe [Sublocade]', doseFormCode: 721656, doseFormName: 'Prefilled Syringe', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '200 MG/ML', strengthValue: 200.0, strengthUnit: 'MG/ML' },\n  { drugCode: 2001623, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Codeine Phosphate 2.4 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2.4 MG/ML', strengthValue: 2.4, strengthUnit: 'MG/ML' },\n  { drugCode: 2003714, drugName: '1 ML Morphine Sulfate 2 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 2045500, drugName: 'Acetaminophen 300 MG / Oxycodone Hydrochloride 2.5 MG Oral Tablet [Nalocet]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2.5 MG', strengthValue: 2.5, strengthUnit: 'MG' },\n  { drugCode: 2055307, drugName: '20 ML Morphine Sulfate 10 MG/ML Injection [Mitigo]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '10 MG/ML', strengthValue: 10.0, strengthUnit: 'MG/ML' },\n  { drugCode: 2055311, drugName: '20 ML Morphine Sulfate 25 MG/ML Injection [Mitigo]', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 7052, ingredientName: 'Morphine', strength: '25 MG/ML', strengthValue: 25.0, strengthUnit: 'MG/ML' },\n  { drugCode: 2056893, drugName: 'Chlorpheniramine Maleate 0.8 MG/ML / Codeine Phosphate 2 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 2670, ingredientName: 'Codeine', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 2058257, drugName: 'Buprenorphine 16 MG / Naloxone 4 MG Oral Strip', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 2058843, drugName: 'Levorphanol Tartrate 1 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6378, ingredientName: 'Levorphanol', strength: '1 MG', strengthValue: 1.0, strengthUnit: 'MG' },\n  { drugCode: 2058845, drugName: 'Levorphanol Tartrate 3 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 6378, ingredientName: 'Levorphanol', strength: '3 MG', strengthValue: 3.0, strengthUnit: 'MG' },\n  { drugCode: 2099286, drugName: '12 HR Chlorpheniramine Maleate 8 MG / Codeine Phosphate 54.3 MG Extended Release Oral Tablet [Tuxarin]', doseFormCode: 316945, doseFormName: 'Extended Release Oral Tablet', ingredientCode: 2670, ingredientName: 'Codeine', strength: '54.3 MG', strengthValue: 54.3, strengthUnit: 'MG' },\n  { drugCode: 2105822, drugName: 'Acetaminophen 60 MG/ML / Oxycodone Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 7804, ingredientName: 'Oxycodone', strength: '2 MG/ML', strengthValue: 2.0, strengthUnit: 'MG/ML' },\n  { drugCode: 2105929, drugName: 'Acetaminophen 325 MG / Caffeine 30 MG / dihydrocodeine bitartrate 16 MG Oral Tablet [Dvorah]', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 23088, ingredientName: 'dihydrocodeine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 2106368, drugName: 'Buprenorphine 16 MG / Naloxone 4 MG Oral Strip [Cassipa]', doseFormCode: 704866, doseFormName: 'Oral Strip', ingredientCode: 1819, ingredientName: 'Buprenorphine', strength: '16 MG', strengthValue: 16.0, strengthUnit: 'MG' },\n  { drugCode: 2168270, drugName: '1 ML Fentanyl 0.05 MG/ML Injection', doseFormCode: 1649574, doseFormName: 'Injection', ingredientCode: 4337, ingredientName: 'Fentanyl', strength: '0.05 MG/ML', strengthValue: 0.05, strengthUnit: 'MG/ML' },\n  { drugCode: 2179635, drugName: 'tramadol hydrochloride 100 MG Oral Tablet', doseFormCode: 317541, doseFormName: 'Oral Tablet', ingredientCode: 10689, ingredientName: 'Tramadol', strength: '100 MG', strengthValue: 100.0, strengthUnit: 'MG' },\n  { drugCode: 2182349, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 2182353, drugName: 'Chlorpheniramine Maleate 0.4 MG/ML / Hydrocodone Bitartrate 0.5 MG/ML / Phenylephrine Hydrochloride 2 MG/ML Oral Solution [De-Chlor HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.5 MG/ML', strengthValue: 0.5, strengthUnit: 'MG/ML' },\n  { drugCode: 2182355, drugName: 'Chlorpheniramine Maleate 0.5 MG/ML / Hydrocodone Bitartrate 0.65 MG/ML / Phenylephrine Hydrochloride 1.6 MG/ML Oral Solution [Relasin HC]', doseFormCode: 316968, doseFormName: 'Oral Solution', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '0.65 MG/ML', strengthValue: 0.65, strengthUnit: 'MG/ML' },\n  { drugCode: 2183669, drugName: 'Chlorpheniramine Tannate 0.8 MG/ML / hydrocodone tannate 1 MG/ML Extended Release Suspension', doseFormCode: 316946, doseFormName: 'Extended Release Suspension', ingredientCode: 5489, ingredientName: 'Hydrocodone', strength: '1 MG/ML', strengthValue: 1.0, strengthUnit: 'MG/ML' }\n}\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKData2020",
        "version": "2.0.1",
        "name": "OMTKData2020",
        "title": "Library - OMTK Data (2020)",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OMTKData2020"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSREC11PatientView",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSREC11PatientView</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines</span></p></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSREC11PatientView version '2.0.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OpioidCDSCommon version '2.0.1' called Common\ninclude OpioidCDSRoutines version '2.0.1' called Routines\n\n/*\n**\n**  Recommendation #11\n**    Clinicians should avoid prescribing opioid pain medication and benzodiazepines\n**    concurrently whenever possible (recommendation category: A, evidence type: 3)\n**\n**  When\n**    Provider is prescribing an opioid analgesic with ambulatory misuse potential in the outpatient setting\n**    Provider is prescribing a benzodiazepine  or other central nervous system depressant medication\n**    Opioid review is useful for this patient:\n**      Patient is 18 or over\n**      Patient does not have findings indicating limited life expectancy\n**      Patient does not have orders for therapies indicating end of life care\n**      Patient is not undergoing active cancer treatment:\n**        Patient has had at least 2 encounters within the past year with any diagnosis of cancer\n**    Patient prescribed opioid analgesic with ambulatory misuse potential and benzodiazepine or other central nervous system depressant medication concurrently\n**  Then\n**    Recommend to avoid prescribing opioid pain medication and benzodiazepine or other central nervous system depressant concurrently\n**      Will revise\n**      Benefits outweigh risks, snooze 3 months\n**      N/A - see comment, snooze 3 months\n**\n*/\n\n// META: Plan Definition: http://fhir.org/guides/cdc/opioid-cds-r4/PlanDefinition/opioid-cds-11-patient-view\n\ncontext Patient\n\ndefine &quot;Is Recommendation Applicable?&quot;:\n  &quot;Inclusion Criteria&quot;\n    and not &quot;Exclusion Criteria&quot;\n\ndefine &quot;Inclusion Criteria&quot;:\n  (\n    exists (Common.&quot;Active Ambulatory Benzodiazepine Rx&quot;)\n      and exists (Common.&quot;Active Ambulatory Opioid Rx&quot;)\n  )\n    and Routines.&quot;Is Opioid Review Useful?&quot;\n\ndefine &quot;Exclusion Criteria&quot;:\n  Common.&quot;End of Life Assessment&quot;\n\ndefine &quot;Get Indicator&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'warning'\n  else null\n\ndefine &quot;Get Summary&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Patient has active prescriptions for opioid pain medication and benzodiazepines'\n  else null\n\ndefine &quot;Get Detail&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Avoid prescribing opioid pain medication and benzodiazepines concurrently whenever possible'\n  else null\n\n// Detected Issue - Avoid prescribing opioid pain medication and benzodiazepines concurrently\n\ndefine &quot;Concurrent Benzodiazepine Prescription Issue&quot;:\n  DetectedIssue {\n    //identifier:,\n    status: FHIR.ObservationStatus { value: 'preliminary' },\n    code: FHIR.CodeableConcept { text: FHIR.string { value: &quot;Get Summary&quot; } },\n    severity: FHIR.DetectedIssueSeverity { value: 'moderate' },\n    patient: FHIR.Reference { reference: FHIR.string { value: 'Patient/' + Patient.id } },\n    identified: FHIR.dateTime { value: Now() },\n    // TODO: Device representation...\n    // author:,\n    implicated:\n      (Common.&quot;Active Ambulatory Benzodiazepine Rx&quot; union Common.&quot;Active Ambulatory Opioid Rx&quot;) M\n        return FHIR.Reference { reference: FHIR.string { value: 'MedicationRequest/' + M.id } },\n    detail: FHIR.string { value: &quot;Get Detail&quot; },\n    reference: FHIR.uri { value: 'http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-11-patient-view'}\n  }\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC11PatientView",
        "version": "2.0.1",
        "name": "OpioidCDSREC11PatientView",
        "title": "Library - Recommendation #11 Patient View - Concurrent Use of Opioids and Benzodiazepines",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://hl7.org/fhir/Library/FHIRHelpers"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines"
          }
        ],
        "dataRequirement": [
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing"
              }
            ]
          },
          {
            "type": "ServiceRequest",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBPcGlvaWRDRFNSRUMxMVBhdGllbnRWaWV3IHZlcnNpb24gJzIuMC4xJwoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMCcKCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjAnIGNhbGxlZCBGSElSSGVscGVycwppbmNsdWRlIE9waW9pZENEU0NvbW1vbiB2ZXJzaW9uICcyLjAuMScgY2FsbGVkIENvbW1vbgppbmNsdWRlIE9waW9pZENEU1JvdXRpbmVzIHZlcnNpb24gJzIuMC4xJyBjYWxsZWQgUm91dGluZXMKCi8qCioqCioqICBSZWNvbW1lbmRhdGlvbiAjMTEKKiogICAgQ2xpbmljaWFucyBzaG91bGQgYXZvaWQgcHJlc2NyaWJpbmcgb3Bpb2lkIHBhaW4gbWVkaWNhdGlvbiBhbmQgYmVuem9kaWF6ZXBpbmVzCioqICAgIGNvbmN1cnJlbnRseSB3aGVuZXZlciBwb3NzaWJsZSAocmVjb21tZW5kYXRpb24gY2F0ZWdvcnk6IEEsIGV2aWRlbmNlIHR5cGU6IDMpCioqCioqICBXaGVuCioqICAgIFByb3ZpZGVyIGlzIHByZXNjcmliaW5nIGFuIG9waW9pZCBhbmFsZ2VzaWMgd2l0aCBhbWJ1bGF0b3J5IG1pc3VzZSBwb3RlbnRpYWwgaW4gdGhlIG91dHBhdGllbnQgc2V0dGluZwoqKiAgICBQcm92aWRlciBpcyBwcmVzY3JpYmluZyBhIGJlbnpvZGlhemVwaW5lIG1lZGljYXRpb24KKiogICAgT3Bpb2lkIHJldmlldyBpcyB1c2VmdWwgZm9yIHRoaXMgcGF0aWVudDoKKiogICAgICBQYXRpZW50IGlzIDE4IG9yIG92ZXIKKiogICAgICBQYXRpZW50IGRvZXMgbm90IGhhdmUgZmluZGluZ3MgaW5kaWNhdGluZyBsaW1pdGVkIGxpZmUgZXhwZWN0YW5jeQoqKiAgICAgIFBhdGllbnQgZG9lcyBub3QgaGF2ZSBvcmRlcnMgZm9yIHRoZXJhcGllcyBpbmRpY2F0aW5nIGVuZCBvZiBsaWZlIGNhcmUKKiogICAgICBQYXRpZW50IGlzIG5vdCB1bmRlcmdvaW5nIGFjdGl2ZSBjYW5jZXIgdHJlYXRtZW50OgoqKiAgICAgICAgUGF0aWVudCBoYXMgaGFkIGF0IGxlYXN0IDIgZW5jb3VudGVycyB3aXRoaW4gdGhlIHBhc3QgeWVhciB3aXRoIGFueSBkaWFnbm9zaXMgb2YgY2FuY2VyCioqICAgIFBhdGllbnQgcHJlc2NyaWJlZCBvcGlvaWQgYW5hbGdlc2ljIHdpdGggYW1idWxhdG9yeSBtaXN1c2UgcG90ZW50aWFsIGFuZCBiZW56b2RpYXplcGluZSBtZWRpY2F0aW9uIGNvbmN1cnJlbnRseQoqKiAgVGhlbgoqKiAgICBSZWNvbW1lbmQgdG8gYXZvaWQgcHJlc2NyaWJpbmcgb3Bpb2lkIHBhaW4gbWVkaWNhdGlvbiBhbmQgYmVuem9kaWF6ZXBpbmUgY29uY3VycmVudGx5CioqICAgICAgV2lsbCByZXZpc2UKKiogICAgICBCZW5lZml0cyBvdXR3ZWlnaCByaXNrcywgc25vb3plIDMgbW9udGhzCioqICAgICAgTi9BIC0gc2VlIGNvbW1lbnQsIHNub296ZSAzIG1vbnRocwoqKgoqLwoKLy8gTUVUQTogUGxhbiBEZWZpbml0aW9uOiBodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzLXI0L1BsYW5EZWZpbml0aW9uL29waW9pZC1jZHMtMTEtcGF0aWVudC12aWV3Cgpjb250ZXh0IFBhdGllbnQKCmRlZmluZSAiSXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8iOgogICJJbmNsdXNpb24gQ3JpdGVyaWEiCiAgICBhbmQgbm90ICJFeGNsdXNpb24gQ3JpdGVyaWEiCgpkZWZpbmUgIkluY2x1c2lvbiBDcml0ZXJpYSI6CiAgKAogICAgZXhpc3RzIChDb21tb24uIkFjdGl2ZSBBbWJ1bGF0b3J5IEJlbnpvZGlhemVwaW5lIFJ4IikKICAgICAgYW5kIGV4aXN0cyAoQ29tbW9uLiJBY3RpdmUgQW1idWxhdG9yeSBPcGlvaWQgUngiKQogICkKICAgIGFuZCBSb3V0aW5lcy4iSXMgT3Bpb2lkIFJldmlldyBVc2VmdWw/IgoKZGVmaW5lICJFeGNsdXNpb24gQ3JpdGVyaWEiOgogIENvbW1vbi4iRW5kIG9mIExpZmUgQXNzZXNzbWVudCIKCmRlZmluZSAiR2V0IEluZGljYXRvciI6CiAgaWYgIklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IgogICAgdGhlbiAnd2FybmluZycKICBlbHNlIG51bGwKCmRlZmluZSAiR2V0IFN1bW1hcnkiOgogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyIKICAgIHRoZW4gJ1BhdGllbnQgaGFzIGFjdGl2ZSBwcmVzY3JpcHRpb25zIGZvciBvcGlvaWQgcGFpbiBtZWRpY2F0aW9uIGFuZCBiZW56b2RpYXplcGluZXMnCiAgZWxzZSBudWxsCgpkZWZpbmUgIkdldCBEZXRhaWwiOgogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyIKICAgIHRoZW4gJ0F2b2lkIHByZXNjcmliaW5nIG9waW9pZCBwYWluIG1lZGljYXRpb24gYW5kIGJlbnpvZGlhemVwaW5lcyBjb25jdXJyZW50bHkgd2hlbmV2ZXIgcG9zc2libGUnCiAgZWxzZSBudWxsCgovLyBEZXRlY3RlZCBJc3N1ZSAtIEF2b2lkIHByZXNjcmliaW5nIG9waW9pZCBwYWluIG1lZGljYXRpb24gYW5kIGJlbnpvZGlhemVwaW5lcyBjb25jdXJyZW50bHkKCmRlZmluZSAiQ29uY3VycmVudCBCZW56b2RpYXplcGluZSBQcmVzY3JpcHRpb24gSXNzdWUiOgogIERldGVjdGVkSXNzdWUgewogICAgLy9pZGVudGlmaWVyOiwKICAgIHN0YXR1czogRkhJUi5PYnNlcnZhdGlvblN0YXR1cyB7IHZhbHVlOiAncHJlbGltaW5hcnknIH0sCiAgICBjb2RlOiBGSElSLkNvZGVhYmxlQ29uY2VwdCB7IHRleHQ6IEZISVIuc3RyaW5nIHsgdmFsdWU6ICJHZXQgU3VtbWFyeSIgfSB9LAogICAgc2V2ZXJpdHk6IEZISVIuRGV0ZWN0ZWRJc3N1ZVNldmVyaXR5IHsgdmFsdWU6ICdtb2RlcmF0ZScgfSwKICAgIHBhdGllbnQ6IEZISVIuUmVmZXJlbmNlIHsgcmVmZXJlbmNlOiBGSElSLnN0cmluZyB7IHZhbHVlOiAnUGF0aWVudC8nICsgUGF0aWVudC5pZCB9IH0sCiAgICBpZGVudGlmaWVkOiBGSElSLmRhdGVUaW1lIHsgdmFsdWU6IE5vdygpIH0sCiAgICAvLyBUT0RPOiBEZXZpY2UgcmVwcmVzZW50YXRpb24uLi4KICAgIC8vIGF1dGhvcjosCiAgICBpbXBsaWNhdGVkOgogICAgICAoQ29tbW9uLiJBY3RpdmUgQW1idWxhdG9yeSBCZW56b2RpYXplcGluZSBSeCIgdW5pb24gQ29tbW9uLiJBY3RpdmUgQW1idWxhdG9yeSBPcGlvaWQgUngiKSBNCiAgICAgICAgcmV0dXJuIEZISVIuUmVmZXJlbmNlIHsgcmVmZXJlbmNlOiBGSElSLnN0cmluZyB7IHZhbHVlOiAnTWVkaWNhdGlvblJlcXVlc3QvJyArIE0uaWQgfSB9LAogICAgZGV0YWlsOiBGSElSLnN0cmluZyB7IHZhbHVlOiAiR2V0IERldGFpbCIgfSwKICAgIHJlZmVyZW5jZTogRkhJUi51cmkgeyB2YWx1ZTogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvY2RjL29waW9pZC1jZHMvUGxhbkRlZmluaXRpb24vb3Bpb2lkY2RzLTExLXBhdGllbnQtdmlldyd9CiAgfQo="
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSREC11PatientView"
      }
    },
    {
      "resource": {
        "resourceType": "PlanDefinition",
        "id": "opioidcds-12-patient-view",
        "meta": {
          "profile": [
            "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-plandefinition"
          ]
        },
        "url": "http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-12-patient-view",
        "identifier": [
          {
            "use": "official",
            "value": "cdc-opioid-guidance"
          }
        ],
        "version": "2.0.1",
        "name": "PlanDefinition_Recommendation_12_Patient_View",
        "title": "PlanDefinition - 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain: Recommendation #12 (patient-view)",
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/plan-definition-type",
              "code": "eca-rule",
              "display": "ECA Rule"
            }
          ]
        },
        "status": "draft",
        "experimental": true,
        "date": "2019-08-01",
        "publisher": "Centers for Disease Control and Prevention (CDC)",
        "description": "Arrange evidence-based treatment (usually medication-assisted treatment with buprenorphine or methadone in combination with behavioral therapies) for patients with opioid use disorder.",
        "useContext": [
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "182888003",
                  "display": "Medication requested (situation)"
                }
              ]
            }
          },
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "82423001",
                  "display": "Chronic pain (finding)"
                }
              ]
            }
          }
        ],
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America"
              }
            ]
          }
        ],
        "purpose": "The 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain is intended to improve communication between providers and patients about the risks and benefits of opioid therapy for chronic pain, improve the safety and effectiveness of pain treatment, and reduce the risks associated with long-term opioid therapy, including opioid use disorder and overdose. The Guideline is not intended for patients who are in active cancer treatment, palliative care, or end-of-life care.",
        "usage": "Clinicians should offer or arrange evidence-based treatment (usually medication-assisted treatment with buprenorphine or methadone in combination with behavioral therapies) for patients with opioid use disorder.",
        "copyright": "© CDC 2022+.",
        "topic": [
          {
            "text": "Opioid Prescribing"
          }
        ],
        "author": [
          {
            "name": "Kensaku Kawamoto, MD, PhD, MHS"
          },
          {
            "name": "Bryn Rhodes"
          },
          {
            "name": "Floyd Eisenberg, MD, MPH"
          },
          {
            "name": "Robert McClure, MD, MPH"
          }
        ],
        "relatedArtifact": [
          {
            "type": "documentation",
            "display": "2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain",
            "url": "https://www.cdc.gov/mmwr/volumes/71/rr/rr7103a1.htm"
          }
        ],
        "library": [
          "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC12PatientView"
        ],
        "action": [
          {
            "title": "Current patient is 18 or older and recieving evidence-based treatment for Opioid Misuse Disorders.",
            "_title": {
              "fhir_comments": [
                " non-dynamic card summary "
              ]
            },
            "description": "Checking if the trigger prescription meets the inclusion criteria for recommendation #12 workflow.",
            "documentation": [
              {
                "type": "documentation",
                "document": {
                  "extension": [
                    {
                      "fhir_comments": [
                        " We can use the example code systems from the FHIR Clinical Reasoning Module, or we can define GRADE specific code systems and use those here "
                      ],
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-strengthOfRecommendation",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/recommendation-strength",
                            "code": "strong",
                            "display": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/evidence-quality",
                            "code": "moderate",
                            "display": "Moderate quality"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "trigger": [
              {
                "type": "named-event",
                "name": "patient-view"
              }
            ],
            "condition": [
              {
                "kind": "applicability",
                "expression": {
                  "description": "Check whether the current patient is 18 or older and recieving evidence-based treatment for Opioid Misuse Disorders.",
                  "language": "text/cql.identifier",
                  "expression": "Is Recommendation Applicable?"
                }
              }
            ],
            "groupingBehavior": "visual-group",
            "selectionBehavior": "exactly-one",
            "dynamicValue": [
              {
                "path": "action.title",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Summary"
                }
              },
              {
                "path": "action.description",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Detail"
                }
              },
              {
                "path": "activity.extension",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Indicator"
                }
              }
            ],
            "action": [
              {
                "description": "Will order methadone or buprenorphine"
              },
              {
                "description": "Will also refer to qualified treatment provider (i.e., substance disorder specialist)"
              },
              {
                "description": "N/A - see comment, snooze 3 months"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "PlanDefinition/opioidcds-12-patient-view"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSCommon",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSCommon</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"2\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogicMK2020</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"15\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Medication</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>id</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>ServiceRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSCommon version '2.0.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OMTKLogicMK2020 version '2.0.1' called OMTKLogic\n\ncodesystem &quot;LOINC&quot;: 'http://loinc.org'\ncodesystem &quot;SNOMED&quot;: 'http://snomed.info/sct'\ncodesystem &quot;Medication Request Category Codes&quot;: 'http://terminology.hl7.org/CodeSystem/medicationrequest-category'\ncodesystem &quot;Medication Request Status Codes&quot;: 'http://hl7.org/fhir/medication-request-status'\ncodesystem &quot;Condition Clinical Status Codes&quot;: 'http://terminology.hl7.org/CodeSystem/condition-clinical'\n\nvalueset &quot;US Core Condition Category Codes&quot;: 'http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category'\n\n// Expression-based\nvalueset &quot;Opioid analgesics with ambulatory misuse potential&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential'\nvalueset &quot;Extended release opioid with ambulatory misuse potential&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/extended-release-opioid-with-ambulatory-misuse-potential'\nvalueset &quot;Buprenorphine and methadone medications&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/buprenorphine-and-methadone-medications'\n\n// Enumerated-compose\nvalueset &quot;Limited life expectancy conditions&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions'\nvalueset &quot;Therapies indicating end of life care&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care'\nvalueset &quot;Conditions likely terminal for opioid prescribing&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing'\nvalueset &quot;CDC malignant cancer conditions&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/cdc-malignant-cancer-conditions'\nvalueset &quot;Oncology specialty designations (NUCC)&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/oncology-specialty-designations'\nvalueset &quot;Opioid misuse disorders&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-disorders'\nvalueset &quot;Substance misuse behavioral counseling&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-misuse-behavioral-counseling'\n\nvalueset &quot;Conditions documenting substance misuse&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-documenting-substance-misuse'\n// Harvested from VSAC - OID: 2.16.840.1.113883.3.464.1003.101.12.1001\n// Reviewed with Terminology, 2020-02-05 - Value set name in VSAC is &quot;Office Visit&quot;, need to verify suitability\nvalueset &quot;Office Visit&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/office-visit'\nvalueset &quot;Opioid counseling procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-counseling-procedure'\n\n/* Existing sets for first six recs */\nvalueset &quot;Benzodiazepine medications&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepine-medications'\nvalueset &quot;Non-opioid drug urine screening&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/non-opioid-drug-urine-screening'\nvalueset &quot;Naloxone medications&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone-medications'\nvalueset &quot;Opioid misuse assessment procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-misuse-assessment-procedure'\nvalueset &quot;Opioid drug urine screening&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-drug-urine-screening'\nvalueset &quot;Hospice Disposition&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-disposition' // Harvested from VSAC - OID: 2.16.840.1.113762.1.4.1108.15\nvalueset &quot;Hospice Finding Codes&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding'\nvalueset &quot;Hospice Procedure Codes&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure'\n\nvalueset &quot;Pain treatment plan&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pain-treatment-plan'\nvalueset &quot;Pain management procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pain-management-procedure'\nvalueset &quot;PDMP review procedure&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pdmp-review-procedure'\nvalueset &quot;PDMP data reviewed finding&quot;: 'http://fhir.org/guides/cdc/opioid-cds/ValueSet/pdmp-data-reviewed-finding'\n\ncode &quot;Community&quot;: 'community' from &quot;Medication Request Category Codes&quot;\ncode &quot;Active Condition&quot;: 'active' from &quot;Condition Clinical Status Codes&quot;\ncode &quot;Active MedicationRequest&quot;: 'active' from &quot;Medication Request Status Codes&quot;\n\n// TODO: code &quot;Nonpharmacologic therapy and nonopioid pharmocologic&quot;: 'TODO' from &quot;TODO&quot;\n\ncontext Patient\n\n// TODO: Capture process decisions for long-term opioid use\ndefine IsForChronicPain: true\n\ndefine &quot;Active Ambulatory Opioid Rx&quot;:\n  /* (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest: status in &quot;Active MedicationRequest&quot;])) Rx */\n  (\n    (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n      where date from MR.authoredOn 2 years or less on or before Today()\n        and MR.medication is Reference or MR.medication in &quot;Opioid analgesics with ambulatory misuse potential&quot;\n  ) Rx\n    let Med: [Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, '/')))]\n    where not(Rx.medication is Reference) or Med.code in &quot;Opioid analgesics with ambulatory misuse potential&quot;\n      return\n        MedicationRequest {\n          id: Rx.id,\n          status: Rx.status,\n          intent: Rx.intent,\n          category: Rx.category,\n          medication: if Rx.medication is Reference then First(Med.code) else Rx.medication as CodeableConcept,\n          subject: Rx.subject,\n          recorder: Rx.recorder,\n          dosageInstruction: Rx.dosageInstruction,\n          dispenseRequest: Rx.dispenseRequest\n        }\n\ndefine &quot;Active Ambulatory Benzodiazepine Rx&quot;:\n/* (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest: status in &quot;Active MedicationRequest&quot;])) Rx */\n(\n  (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n    where date from MR.authoredOn 2 years or less on or before Today()\n      and MR.medication is Reference or MR.medication in &quot;Benzodiazepine medications&quot;\n) Rx\n  let Med: [Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, '/')))]\n  where not(Rx.medication is Reference) or Med.code in &quot;Benzodiazepine medications&quot;\n    return\n      MedicationRequest {\n        id: Rx.id,\n        status: Rx.status,\n        intent: Rx.intent,\n        category: Rx.category,\n        medication: if Rx.medication is Reference then First(Med.code) else Rx.medication as CodeableConcept,\n        subject: Rx.subject,\n        recorder: Rx.recorder,\n        dosageInstruction: Rx.dosageInstruction,\n        dispenseRequest: Rx.dispenseRequest\n      }\n\ndefine &quot;Active Ambulatory Naloxone Rx&quot;:\n/* (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest: status in &quot;Active MedicationRequest&quot;])) Rx */\n(\n  (&quot;Get Active Ambulatory Medication Requests&quot;([MedicationRequest])) MR\n    where date from MR.authoredOn 2 years or less on or before Today()\n      and MR.medication is Reference or MR.medication in &quot;Naloxone medications&quot;\n) Rx\n  let Med: [Medication: id in (Last(Split((Rx.medication as FHIR.Reference).reference, '/')))]\n  where not(Rx.medication is Reference) or Med.code in &quot;Naloxone medications&quot;\n    return\n      MedicationRequest {\n        id: Rx.id,\n        status: Rx.status,\n        intent: Rx.intent,\n        category: Rx.category,\n        medication: if Rx.medication is Reference then First(Med.code) else Rx.medication as CodeableConcept,\n        subject: Rx.subject,\n        recorder: Rx.recorder,\n        dosageInstruction: Rx.dosageInstruction,\n        dispenseRequest: Rx.dispenseRequest\n      }\n\ndefine function &quot;Get Active Ambulatory Medication Requests&quot; (value List&lt;MedicationRequest&gt;) returns List&lt;MedicationRequest&gt;:\n  value Rx\n    where Rx.status.value = 'active'\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n\ndefine function &quot;Is Ambulatory Medication Request?&quot; (value List&lt;MedicationRequest&gt;) returns List&lt;MedicationRequest&gt;:\n  value Rx\n    where exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n\ndefine function &quot;Is Opioid Analgesic with Ambulatory Misuse Potential?&quot;(value List&lt;MedicationRequest&gt;):\n  value Rx\n    let MedRef: if (Rx.medication is FHIR.Reference) then (Rx.medication as FHIR.Reference).reference else null,\n      Med: if MedRef is null then (Rx.medication as FHIR.CodeableConcept) else SingletonFrom([Medication: id in (Last(Split(MedRef, '/')))] Med return Med.code)\n    where Med in &quot;Opioid analgesics with ambulatory misuse potential&quot;\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n    return\n          MedicationRequest {\n            id: Rx.id,\n            status: Rx.status,\n            intent: Rx.intent,\n            category: Rx.category,\n            medication: FHIR.CodeableConcept{ coding: Med.coding },\n            subject: Rx.subject,\n            authoredOn: Rx.authoredOn,\n            recorder: Rx.recorder,\n            dosageInstruction: Rx.dosageInstruction,\n            dispenseRequest: Rx.dispenseRequest\n          }\n\ndefine function &quot;Is Benzodiazepine?&quot;(value List&lt;MedicationRequest&gt;):\n  value Rx\n    let MedRef: if (Rx.medication is FHIR.Reference) then (Rx.medication as FHIR.Reference).reference else null,\n      Med: if MedRef is null then (Rx.medication as FHIR.CodeableConcept) else SingletonFrom([Medication: id in (Last(Split(MedRef, '/')))] Med return Med.code)\n    where Med in &quot;Benzodiazepine medications&quot;\n      and exists (\n        Rx.category RxCategory\n          where FHIRHelpers.ToConcept(RxCategory) ~ &quot;Community&quot;\n      )\n    return\n          MedicationRequest {\n            id: Rx.id,\n            status: Rx.status,\n            intent: Rx.intent,\n            category: Rx.category,\n            medication: FHIR.CodeableConcept{ coding: Med.coding },\n            subject: Rx.subject,\n            authoredOn: Rx.authoredOn,\n            recorder: Rx.recorder,\n            dosageInstruction: Rx.dosageInstruction,\n            dispenseRequest: Rx.dispenseRequest\n          }\n\ndefine &quot;End of Life Assessment&quot;:\n    // 1. Conditions indicating end of life or with limited life expectancy\n    exists (\n      &quot;Conditions Indicating End of Life or With Limited Life Expectancy&quot;\n    )\n    // 2. Admitted/referred/discharged to hospice care\n    or exists (\n      &quot;Admitted/Referred/Discharged to Hospice Care&quot;\n    )\n    // 3. Medications indicating end of life\n    /* or exists (\n      &quot;Medications Indicating End of Life&quot;\n    ) */\n\ndefine &quot;Conditions Indicating End of Life or With Limited Life Expectancy&quot;:\n  (\n    [Condition: category in &quot;US Core Condition Category Codes&quot;] C\n      where C.code in &quot;Conditions likely terminal for opioid prescribing&quot;\n        and exists (\n          C.clinicalStatus.coding Coding\n            where FHIRHelpers.ToCode(Coding) ~ &quot;Active Condition&quot;\n        )\n  )\n  union\n  (\n    [Condition: category in &quot;US Core Condition Category Codes&quot;] C\n      where C.code in &quot;Limited life expectancy conditions&quot;\n        and exists (\n          C.clinicalStatus.coding Coding\n            where FHIRHelpers.ToCode(Coding) ~ &quot;Active Condition&quot;\n        )\n  )\n\ndefine &quot;Admitted/Referred/Discharged to Hospice Care&quot;:\n  (\n    [Procedure: code in &quot;Hospice Procedure Codes&quot;] P\n      where P.status.value in { 'in-progress', 'completed' }\n  )\n  union\n  (\n    [ServiceRequest: code in &quot;Hospice Procedure Codes&quot;] E\n      where E.status.value in { 'planned', 'arrived', 'in-progress', 'finished', 'onleave' }\n  )\n  union\n  (\n    [Observation: code in &quot;Hospice Finding Codes&quot;] O\n      where not (O.status.value in { 'unknown', 'entered-in-error', 'cancelled' })\n  )\n  union\n  (\n    [Encounter] E\n      where\n        (\n          if E.hospitalization.dischargeDisposition.coding is null\n              or not exists (E.hospitalization.dischargeDisposition.coding)\n            then false\n          else E.hospitalization.dischargeDisposition in &quot;Hospice Disposition&quot;\n        )\n        and E.status.value in { 'planned', 'arrived', 'in-progress', 'finished', 'onleave' }\n  )\n\n/*\n\ndefine &quot;Medications Indicating End of Life&quot;:\n  (\n    [MedicationAdministration: &quot;End Of Life Opioids&quot;] MA\n      where MA.status.value in { 'in-progress', 'on-hold', 'completed' }\n  )\n  union\n  (\n    [MedicationDispense: &quot;End Of Life Opioids&quot;] MD\n      where MD.status.value in { 'preparation', 'in-progress', 'on-hold', 'completed' }\n  )\n  union\n  (\n    [MedicationRequest: &quot;End Of Life Opioids&quot;] MR\n      where MR.status.value in { 'active', 'completed' }\n  )\n  union\n  (\n    [MedicationStatement: &quot;End Of Life Opioids&quot;] MS\n      where MS.status.value in { 'active', 'completed', 'intended' }\n  )\n\n*/\n\ndefine &quot;Previous 10 Days Interval&quot;:\nInterval[Today() - 10 days, Today()]\n\ndefine &quot;First Month&quot;:\nInterval[Today() - 3 months, Today() - 2 months]\n\ndefine &quot;Second Month&quot;:\nInterval[Today() - 2 months, Today() - 1 months]\n\ndefine &quot;Third Month&quot;:\nInterval[Today() - 1 months, Today()]\n\ndefine &quot;Prescribed Opioids for 21 or more of 30 Days for each of the past 3 Months&quot;:\n  &quot;Days on Opioids during Period&quot;(&quot;First Month&quot;) &gt;= 21\n    and &quot;Days on Opioids during Period&quot;(&quot;Second Month&quot;) &gt;= 21\n    and &quot;Days on Opioids during Period&quot;(&quot;Third Month&quot;) &gt;= 21\n\ndefine function &quot;Prescription Relevant Period&quot;(prescription FHIR.MedicationRequest):\n  if (\n    prescription.authoredOn is not null and prescription.dispenseRequest is not null\n      and prescription.dispenseRequest.expectedSupplyDuration is not null\n  )\n  then Interval[\n    date from prescription.authoredOn,\n    date from prescription.authoredOn + System.Quantity{ value: GetDurationInDays(prescription.dispenseRequest.expectedSupplyDuration), unit: 'days' }\n  ]\n  else null\n\ndefine function &quot;Days on Opioids during Period&quot;(period Interval&lt;Date&gt;):\n  Sum(\n    (\n      collapse (\n        [MedicationRequest: &quot;Opioid analgesics with ambulatory misuse potential&quot;] OpioidPrescription\n        return &quot;Prescription Relevant Period&quot;( OpioidPrescription ) intersect period\n      )\n    ) OpioidUseInterval\n      return days between start of OpioidUseInterval and end of OpioidUseInterval\n  )\n\ndefine function Prescriptions(Orders List&lt;MedicationRequest&gt;):\n  Orders O\n    let\n      // NOTE: Assuming medication is specified as a CodeableConcept with a single RxNorm code\n      rxNormCode: FHIRHelpers.ToCode((O.medication as FHIR.CodeableConcept).coding[0]),\n      medicationName: OMTKLogic.GetMedicationName(rxNormCode),\n      // NOTE: Assuming a single dosage instruction element\n      dosageInstruction: O.dosageInstruction[0],\n      // NOTE: Assuming a single dose and rate element\n      doseAndRate: dosageInstruction.doseAndRate[0],\n      repeat: dosageInstruction.timing.repeat,\n      frequency: Coalesce(repeat.frequencyMax.value, repeat.frequency.value),\n      period: System.Quantity { value: repeat.period.value, unit: repeat.periodUnit.value },\n      doseDescription:\n        Coalesce(\n          // There should be a conversion from FHIR.SimpleQuantity to System.Quantity\n          if doseAndRate.dose is FHIR.Range\n            then ToString((doseAndRate.dose as FHIR.Range).low)\n                + '-' + ToString((doseAndRate.dose as FHIR.Range).high)\n                + (doseAndRate.dose as FHIR.Range).high.unit.value\n            else ToString(FHIRHelpers.ToQuantity(doseAndRate.dose)),\n            ''\n        ),\n      frequencyDescription:\n        ToString(dosageInstruction.timing.repeat.frequency.value) +\n          Coalesce(\n            '-' + ToString(dosageInstruction.timing.repeat.frequencyMax.value),\n            ''\n          )\n    return {\n      rxNormCode: rxNormCode,\n      isDraft: O.status.value = 'draft',\n      // NOTE: Assuming asNeeded is expressed as a boolean\n      isPRN: dosageInstruction.asNeeded,\n      prescription:\n        if dosageInstruction.text is not null then\n          medicationName + ' ' + dosageInstruction.text.value\n        else\n          // TODO: Shouldn't need the .value here on asNeededBoolean\n          medicationName + ' ' + doseDescription + ' q' + frequencyDescription + (if dosageInstruction.asNeeded then ' PRN' else ''),\n      dose: if doseAndRate.dose is FHIR.Range\n            then (doseAndRate.dose as FHIR.Range).high\n            else FHIRHelpers.ToQuantity(doseAndRate.dose),\n      dosesPerDay: Coalesce(OMTKLogic.ToDaily(frequency, period), 1.0)\n    }\n\ndefine function MME(prescriptions List&lt;MedicationRequest&gt;):\n  (Prescriptions(prescriptions)) P\n    let mme: SingletonFrom(OMTKLogic.CalculateMMEs({ { rxNormCode: P.rxNormCode, doseQuantity: P.dose, dosesPerDay: P.dosesPerDay } }))\n    return {\n      rxNormCode: P.rxNormCode,\n      isDraft: P.isDraft,\n      isPRN: P.isPRN,\n      prescription: P.prescription,\n      dailyDose: mme.dailyDoseDescription,\n      conversionFactor: mme.conversionFactor,\n      mme: mme.mme\n    }\n\ndefine function TotalMME(prescriptions List&lt;MedicationRequest&gt;):\n  System.Quantity {\n    value: Sum((MME(prescriptions)) M return M.mme.value),\n    unit: 'mg/d'\n  }\n\ndefine function GetDurationInDays(value FHIR.Duration):\n  if value is null then null\n  else\n    case\n      when value.code.value ~ 'a' then value.value.value * 365.0\n      when value.code.value ~ 'mo' then value.value.value * 30.0\n      when value.code.value ~ 'wk' then value.value.value * 7.0\n      when value.code.value ~ 'd' then value.value.value\n      when value.code.value ~ 'h' then value.value.value / 24.0\n      when value.code.value ~ 'min' then value.value.value / 60.0 / 24.0\n      when value.code.value ~ 's' then value.value.value / 60.0 / 60.0 / 24.0\n      when value.code.value ~ 'ms' then value.value.value / 60.0 / 60.0 / 24.0 / 1000.0\n      when value.code.value is null then Message(1000, true, 'Undefined', 'Error', 'Duration unit code is null')\n      else Message(1000, true, 'Undefined', 'Error', 'Unsupported duration unit code: ' + value.code.value)\n    end\n\ndefine function GetIngredient(rxNormCode Code):\n  OMTKLogic.GetIngredients(rxNormCode).ingredientName\n\ndefine function GetIngredients(rxNormCodes List&lt;Code&gt;):\n  rxNormCodes rnc return GetIngredient(rnc)\n\ndefine function GetMedicationNames(medications List&lt;MedicationRequest&gt;):\n  medications M\n    return OMTKLogic.GetIngredients(ToRxNormCode((M.medication as FHIR.CodeableConcept).coding)).rxNormCode.display\n\n/*\n*  Conversion Functions\n*/\ndefine function CodeableConceptsToString(concepts List&lt;FHIR.CodeableConcept&gt;):\n  concepts c return CodeableConceptToString(c)\n\n\ndefine function CodingToString(coding FHIR.Coding):\n  if (coding is null)\n  then null\n  else\n    'Code {' &amp;\n      'code: ' &amp; coding.code &amp;\n      'system: ' &amp; coding.system &amp;\n      'version: ' &amp; coding.version &amp;\n      'display: ' &amp; coding.display &amp;\n    '}'\n\ndefine function CodeableConceptToString(concept FHIR.CodeableConcept):\n  if (concept is null or concept.coding is null)\n  then null\n  else\n    'CodeableConcept {' &amp;\n      'Coding: [' &amp;\n        Combine(concept.coding Coding return CodingToString(Coding), ',')\n      &amp; ']'\n    &amp; '}'\n\ndefine function ToCodes(coding List&lt;FHIR.Coding&gt;):\n  coding c return FHIRHelpers.ToCode(c)\n\ndefine function ToRxNormCode(coding List&lt;FHIR.Coding&gt;):\n  singleton from (\n    coding C where C.system = 'http://www.nlm.nih.gov/research/umls/rxnorm'\n  )\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon",
        "version": "2.0.1",
        "name": "OpioidCDSCommon",
        "title": "Library - OpioidCDS Common",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://hl7.org/fhir/Library/FHIRHelpers"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogicMK2020"
          }
        ],
        "dataRequirement": [
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
              }
            ]
          },
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "status",
                "code": [
                  {
                    "system": "http://hl7.org/fhir/medication-request-status",
                    "code": "active",
                    "display": "Active"
                  }
                ]
              }
            ]
          },
          {
            "type": "Medication",
            "codeFilter": [
              {
                "path": "id"
              }
            ]
          },
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/benzodiazepine-medications"
              }
            ]
          },
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/naloxone-medications"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
              }
            ]
          },
          {
            "type": "ServiceRequest",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-finding"
              }
            ]
          },
          {
            "type": "Encounter"
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSCommon"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSREC10PatientView",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSREC10PatientView</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"2\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/non-opioid-drug-urine-screening</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-drug-urine-screening</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSREC10PatientView version '2.0.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OpioidCDSCommon version '2.0.1' called Common\ninclude OpioidCDSRoutines version '2.0.1' called Routines\n\ncode &quot;Urine Drug Screening&quot;: '310627008' from Common.SNOMED display 'Urine drug screening (procedure)'\n\n/*\n**  Recommendation #10\n**    When prescribing opioids for chronic pain, providers should use urine drug\n**    testing before starting opioid therapy and consider urine drug testing at\n**    least annually to assess for prescribed medications as well as other controlled\n**    prescription drugs and illicit drugs (recommendation category: B, evidence type: 4)\n**\n**  When\n**    Provider is prescribing an opioid analgesic with ambulatory misuse potential in the outpatient setting\n**    Prescription is for treating chronic pain.\n**    Opioid review is useful for this patient:\n**      Patient is 18 or over\n**      Patient does not have findings indicating limited life expectancy\n**      Patient does not have orders for therapies indicating end of life care\n**      Patient is not undergoing active cancer treatment:\n**        Patient has had at least 2 encounters within the past year with any diagnosis of cancer\n**    Urine drug screening has not been performed in last 12 months\n**  Then\n**    Recommend urine drug screening\n**      Will perform urine screening\n**      Not for chronic pain management, snooze 3 months\n**      N/A - see comment, snooze 3 months\n**\n*/\n\n// META: Plan Definition: http://fhir.org/guides/cdc/opioid-cds-r4/PlanDefinition/opioid-cds-10-patient-view\n\ncontext Patient\n\ndefine &quot;Lookback Year&quot;:\n  Interval[Today() - 12 months - 1 days, Today() - 1 day]\n\ndefine &quot;Patient Is Being Prescribed Opioid Analgesic with Ambulatory Misuse Potential&quot;:\n  exists (\n    Common.&quot;Active Ambulatory Opioid Rx&quot; AmbulatoryOpioidPrescription\n      where Routines.&quot;Is Acute Pain Prescription?&quot;( AmbulatoryOpioidPrescription )\n  )\n\ndefine &quot;Is Recommendation Applicable?&quot;:\n  &quot;Inclusion Criteria&quot;\n    and not &quot;Exclusion Criteria&quot;\n\ndefine &quot;Inclusion Criteria&quot;:\n  &quot;Patient Is Being Prescribed Opioid Analgesic with Ambulatory Misuse Potential&quot;\n    and Routines.&quot;Is Opioid Review Useful?&quot;\n    and not &quot;Patient had Urine Screening in Last 12 Months&quot;\n\ndefine &quot;Exclusion Criteria&quot;:\n  Common.&quot;End of Life Assessment&quot;\n\ndefine &quot;Patient had Urine Screening in Last 12 Months&quot;:\n  exists( &quot;Urine Screenings during the Last 12 Months&quot; )\n\ndefine &quot;Urine Screenings during the Last 12 Months&quot;:\n  (\n    [Observation: &quot;code&quot; in Common.&quot;Non-opioid drug urine screening&quot;] IllicitDrugScreen\n      where date from IllicitDrugScreen.effective in day of &quot;Lookback Year&quot;\n        and not (IllicitDrugScreen.status.value in { 'unknown', 'entered-in-error', 'cancelled' })\n  )\n  union\n  (\n    [Observation: &quot;code&quot; in Common.&quot;Opioid drug urine screening&quot;] OpioidDrugScreen\n      where date from OpioidDrugScreen.effective in day of &quot;Lookback Year&quot;\n        and not (OpioidDrugScreen.status.value in { 'unknown', 'entered-in-error', 'cancelled' })\n  )\n\ndefine &quot;No Screening In Last 12 Months Indicator&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'warning'\n  else null\n\ndefine &quot;No Screening In Last 12 Months Summary&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Annual Urine Screening Check'\n  else null\n\ndefine &quot;No Screening In Last 12 Months Detail&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Patients on opioid therapy should have a urine drug test performed every 12 months.'\n  else null\n\n/*\nPlanDefinition:\n  Inclusion Criteria:\n    No Screening in Last 12 months - ServiceRequest - Urine Screening\n    Opioids found in urine screening\n    Illicit drugs found in urine screening\n*/\n\n// Service Request - Urine Screening\n// Detected Issue - Opioids found in urine screening\n// Detected Issue - Illicit drugs found in urine screening\n\ndefine &quot;Urine Drug Screening Request&quot;:\n    ServiceRequest {\n      //identifier:,\n      instantiatesCanonical: { FHIR.canonical { value: 'http://fhir.org/guides/cdc/activitydefinition/urine-screening-request' } },\n      status: FHIR.RequestStatus { value: 'draft' },\n      intent: FHIR.RequestIntent { value: 'proposal' },\n      priority: FHIR.RequestPriority { value: 'routine' },\n      code: FHIR.CodeableConcept { coding: { ToCoding(&quot;Urine Drug Screening&quot;) } },\n      subject: FHIR.Reference { reference: FHIR.string { value: 'Patient/' + Patient.id } },\n      occurrence: FHIR.Period { start: FHIR.dateTime { value: Today() }, end: FHIR.dateTime { value: Today() + 7 days } },\n      authoredOn: FHIR.dateTime { value: Now() },\n      reasonCode: { FHIR.CodeableConcept { text: FHIR.string { value: &quot;No Screening In Last 12 Months Detail&quot; } } }\n      // doesn't really work, need a relatedArtifact here...\n      //reasonCode: { FHIR.CodeableConcept { text: FHIR.string { value: 'https://www.cdc.gov/mmwr/volumes/71/rr/rr7103a1.htm#Recommendation10' } } }\n    }\n\n/*\ndefine &quot;Opioids Issue&quot;:\n  DetectedIssue {\n    //identifier:,\n    status: FHIR.ObservationStatus { value: 'preliminary' },\n    code: FHIR.CodeableConcept { text: FHIR.string { value: &quot;Evidence of Opioids Summary&quot; } },\n    severity: FHIR.DetectedIssueSeverity { value: 'moderate' },\n    patient: FHIR.Reference { reference: FHIR.string { value: 'Patient/' + Patient.id } },\n    identified: FHIR.dateTime { value: Now() },\n    // TODO: Device representation...\n    // author:,\n    // TODO: Reference the lab results that were used to infer this\n    // implicated:,\n    detail: FHIR.string { value: &quot;Evidence of Opioids Detail&quot; },\n    reference: FHIR.uri { value: 'http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-10-patient-view'}\n  }\n\ndefine &quot;Illicit Drugs Issue&quot;:\n  DetectedIssue {\n    //identifier:,\n    status: FHIR.ObservationStatus { value: 'preliminary' },\n    code: FHIR.CodeableConcept { text: FHIR.string { value: &quot;Evidence of Illicit Drugs Summary&quot; } },\n    severity: FHIR.DetectedIssueSeverity { value: 'moderate' },\n    patient: FHIR.Reference { reference: FHIR.string { value: 'Patient/' + Patient.id } },\n    identified: FHIR.dateTime { value: Now() },\n    // TODO: Device representation...\n    // author:,\n    // TODO: Reference the lab results that were used to infer this\n    // implicated:,\n    detail: FHIR.string { value: &quot;Evidence of Illicit Drugs Detail&quot; },\n    reference: FHIR.uri { value: 'http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-10-patient-view'}\n  }\n*/\n\ndefine function ToCoding(code System.Code):\n  FHIR.Coding {\n    code: FHIR.code { value: code.code },\n    system: FHIR.uri { value: code.system },\n    version: FHIR.string { value: code.version },\n    display: FHIR.string { value: code.display }\n  }\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC10PatientView",
        "version": "2.0.1",
        "name": "OpioidCDSREC10PatientView",
        "title": "Library - Recommendation #10 Patient View - Urine Drug Testing",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://hl7.org/fhir/Library/FHIRHelpers"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines"
          }
        ],
        "dataRequirement": [
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/non-opioid-drug-urine-screening"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-drug-urine-screening"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSREC10PatientView"
      }
    },
    {
      "resource": {
        "resourceType": "PlanDefinition",
        "id": "opioidcds-10-patient-view",
        "meta": {
          "profile": [
            "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-plandefinition"
          ]
        },
        "url": "http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-10-patient-view",
        "identifier": [
          {
            "use": "official",
            "value": "cdc-opioid-guidance"
          }
        ],
        "version": "2.0.1",
        "name": "PlanDefinition_Recommendation_10_Patient_View",
        "title": "PlanDefinition - 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain: Recommendation #10 (patient-view)",
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/plan-definition-type",
              "code": "eca-rule",
              "display": "ECA Rule"
            }
          ]
        },
        "status": "draft",
        "experimental": true,
        "date": "2019-01-12",
        "publisher": "Centers for Disease Control and Prevention (CDC)",
        "description": "When prescribing opioids for chronic pain, providers should use urine drug testing before starting opioid therapy and consider urine drug testing at least annually to assess for prescribed medications as well as other controlled prescription drugs and illicit drugs.",
        "useContext": [
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "182888003",
                  "display": "Medication requested (situation)"
                }
              ]
            }
          },
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "82423001",
                  "display": "Chronic pain (finding)"
                }
              ]
            }
          }
        ],
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America"
              }
            ]
          }
        ],
        "purpose": "The 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain is intended to improve communication between providers and patients about the risks and benefits of opioid therapy for chronic pain, improve the safety and effectiveness of pain treatment, and reduce the risks associated with long-term opioid therapy, including opioid use disorder and overdose. The Guideline is not intended for patients who are in active cancer treatment, palliative care, or end-of-life care.",
        "usage": "Providers should be aware if patients are taking other prescription drugs or illicit drugs that might increase their risk of an overdose.",
        "copyright": "© CDC 2022+.",
        "topic": [
          {
            "text": "Opioid Prescribing"
          }
        ],
        "author": [
          {
            "name": "Kensaku Kawamoto, MD, PhD, MHS"
          },
          {
            "name": "Bryn Rhodes"
          },
          {
            "name": "Floyd Eisenberg, MD, MPH"
          },
          {
            "name": "Robert McClure, MD, MPH"
          }
        ],
        "library": [
          "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC10PatientView"
        ],
        "action": [
          {
            "title": "Annual Urine Screening Check",
            "description": "Patient has not had a urine screening in the past 12 months",
            "documentation": [
              {
                "type": "documentation",
                "display": "2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain",
                "url": "https://www.cdc.gov/mmwr/volumes/71/rr/rr7103a1.htm"
              },
              {
                "type": "documentation",
                "document": {
                  "extension": [
                    {
                      "fhir_comments": [
                        " We can use the example code systems from the FHIR CLinical Reasoning Module, or we can define GRADE specific code systems and use those here "
                      ],
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-strengthOfRecommendation",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/recommendation-strength",
                            "code": "weak",
                            "display": "Weak"
                          }
                        ]
                      }
                    },
                    {
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/evidence-quality",
                            "code": "very-low",
                            "display": "Very Low quality"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "trigger": [
              {
                "type": "named-event",
                "name": "patient-view"
              }
            ],
            "condition": [
              {
                "kind": "applicability",
                "expression": {
                  "description": "Patient has not had a urine screening in the past 12 months",
                  "language": "text/cql.identifier",
                  "expression": "Is Recommendation Applicable?"
                }
              }
            ],
            "dynamicValue": [
              {
                "fhir_comments": [
                  " dynamic card elements "
                ],
                "path": "action.description",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "No Screening In Last 12 Months Detail"
                }
              },
              {
                "path": "action.title",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "No Screening In Last 12 Months Summary"
                }
              },
              {
                "path": "action.extension",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "No Screening In Last 12 Months Indicator"
                }
              }
            ],
            "action": [
              {
                "description": "Will perform urine screening",
                "_description": {
                  "fhir_comments": [
                    " Open Order Set, where available "
                  ]
                }
              },
              {
                "description": "Not for chronic pain management. Snooze 3 months"
              },
              {
                "description": "N/A - see comment, snooze 3 months"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "PlanDefinition/opioidcds-10-patient-view"
      }
    },
    {
      "resource": {
        "resourceType": "PlanDefinition",
        "id": "opioidcds-04-patient-view",
        "meta": {
          "profile": [
            "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-plandefinition"
          ]
        },
        "url": "http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-04-patient-view",
        "identifier": [
          {
            "use": "official",
            "value": "cdc-opioid-guidance"
          }
        ],
        "version": "2.0.1",
        "name": "PlanDefinition_Recommendation_04_Patient_View",
        "title": "2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain: Recommendation #4 (patient view)",
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/plan-definition-type",
              "code": "eca-rule",
              "display": "ECA Rule"
            }
          ]
        },
        "status": "draft",
        "experimental": true,
        "date": "2018-03-19",
        "publisher": "Centers for Disease Control and Prevention (CDC)",
        "description": "When starting opioid therapy for chronic pain, clinicians should prescribe immediate-release opioids instead of extended-release/long-acting (ER/LA) opioids.",
        "useContext": [
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "182888003",
                  "display": "Medication requested (situation)"
                }
              ]
            }
          },
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "82423001",
                  "display": "Chronic pain (finding)"
                }
              ]
            }
          }
        ],
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America"
              }
            ]
          }
        ],
        "purpose": "The 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain is intended to improve communication between providers and patients about the risks and benefits of opioid therapy for chronic pain, improve the safety and effectiveness of pain treatment, and reduce the risks associated with long-term opioid therapy, including opioid use disorder and overdose. The Guideline is not intended for patients who are in active cancer treatment, palliative care, or end-of-life care.",
        "usage": "Providers should use caution when prescribing extended-release/long-acting (ER/LA) opioids as they carry a higher risk and negligible benefit compared to immediate-release opioids.",
        "copyright": "© CDC 2022+.",
        "topic": [
          {
            "text": "Opioid Prescribing"
          }
        ],
        "author": [
          {
            "name": "Kensaku Kawamoto, MD, PhD, MHS"
          },
          {
            "name": "Bryn Rhodes"
          },
          {
            "name": "Floyd Eisenberg, MD, MPH"
          },
          {
            "name": "Robert McClure, MD, MPH"
          }
        ],
        "relatedArtifact": [
          {
            "type": "documentation",
            "display": "2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain",
            "url": "https://www.cdc.gov/mmwr/volumes/71/rr/rr7103a1.htm"
          },
          {
            "type": "documentation",
            "display": "MME Conversion Tables",
            "url": "https://www.cdc.gov/drugoverdose/pdf/calculating_total_daily_dose-a.pdf"
          }
        ],
        "library": [
          "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC04PatientView"
        ],
        "action": [
          {
            "title": "Extended-release opioid prescription triggered.",
            "_title": {
              "fhir_comments": [
                " non-dynamic card summary "
              ]
            },
            "description": "Checking if the trigger prescription meets the inclusion criteria for recommendation #4 workflow.",
            "documentation": [
              {
                "type": "documentation",
                "document": {
                  "extension": [
                    {
                      "fhir_comments": [
                        " We can use the example code systems from the FHIR CLinical Reasoning Module, or we can define GRADE specific code systems and use those here "
                      ],
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-strengthOfRecommendation",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/recommendation-strength",
                            "code": "strong",
                            "display": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/evidence-quality",
                            "code": "very-low",
                            "display": "Very Low quality"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "trigger": [
              {
                "type": "named-event",
                "name": "patient-view"
              }
            ],
            "condition": [
              {
                "kind": "applicability",
                "expression": {
                  "description": "Check whether the opioid prescription for the existing patient is extended-release without any opioids-with-abuse-potential prescribed in the past 90 days.",
                  "language": "text/cql.identifier",
                  "expression": "Is Recommendation Applicable?"
                }
              }
            ],
            "groupingBehavior": "visual-group",
            "selectionBehavior": "exactly-one",
            "dynamicValue": [
              {
                "path": "action.title",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Summary"
                }
              },
              {
                "path": "action.description",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Detail"
                }
              },
              {
                "path": "activity.extension",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Indicator"
                }
              }
            ],
            "action": [
              {
                "description": "Will precribe immediate release"
              },
              {
                "description": "Benefits outweigh risks, snooze 3 months"
              },
              {
                "description": "N/A - see comment, snooze 3 months"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "PlanDefinition/opioidcds-04-patient-view"
      }
    },
    {
      "resource": {
        "resourceType": "PlanDefinition",
        "id": "opioidcds-11-patient-view",
        "meta": {
          "profile": [
            "http://hl7.org/fhir/uv/cpg/StructureDefinition/cpg-plandefinition"
          ]
        },
        "url": "http://fhir.org/guides/cdc/opioid-cds/PlanDefinition/opioidcds-11-patient-view",
        "identifier": [
          {
            "use": "official",
            "value": "cdc-opioid-guidance"
          }
        ],
        "version": "2.0.1",
        "name": "PlanDefinition_Recommendation_11_Patient_View",
        "title": "PlanDefinition - 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain: Recommendation #11 (patient-view)",
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/plan-definition-type",
              "code": "eca-rule",
              "display": "ECA Rule"
            }
          ]
        },
        "status": "draft",
        "experimental": true,
        "date": "2019-01-12",
        "publisher": "Centers for Disease Control and Prevention (CDC)",
        "description": "Concurrently prescribing opioid medications with benzodiazepines increases the risk of harm for the patient.",
        "useContext": [
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "182888003",
                  "display": "Medication requested (situation)"
                }
              ]
            }
          },
          {
            "code": {
              "system": "http://terminology.hl7.org/CodeSystem/usage-context-type",
              "code": "focus",
              "display": "Clinical Focus"
            },
            "valueCodeableConcept": {
              "coding": [
                {
                  "system": "http://snomed.info/sct",
                  "code": "82423001",
                  "display": "Chronic pain (finding)"
                }
              ]
            }
          }
        ],
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America"
              }
            ]
          }
        ],
        "purpose": "The 2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain is intended to improve communication between providers and patients about the risks and benefits of opioid therapy for chronic pain, improve the safety and effectiveness of pain treatment, and reduce the risks associated with long-term opioid therapy, including opioid use disorder and overdose. The Guideline is not intended for patients who are in active cancer treatment, palliative care, or end-of-life care.",
        "usage": "Clinicians should avoid prescribing opioid pain medication and benzodiazepines or other central nervous system depressant concurrently whenever possible.",
        "copyright": "© CDC 2022+.",
        "topic": [
          {
            "text": "Opioid Prescribing"
          }
        ],
        "author": [
          {
            "name": "Kensaku Kawamoto, MD, PhD, MHS"
          },
          {
            "name": "Bryn Rhodes"
          },
          {
            "name": "Floyd Eisenberg, MD, MPH"
          },
          {
            "name": "Robert McClure, MD, MPH"
          }
        ],
        "library": [
          "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC11PatientView"
        ],
        "action": [
          {
            "title": "Existing patient has concurrent opioid and benzodiazepine prescriptions.",
            "description": "Checking if the trigger prescription meets the inclusion criteria for recommendation #11 workflow.",
            "documentation": [
              {
                "type": "documentation",
                "display": "2022 CDC Clinical Practice Guideline for Prescribing Opioids for Pain",
                "url": "https://www.cdc.gov/mmwr/volumes/71/rr/rr7103a1.htm"
              },
              {
                "type": "documentation",
                "document": {
                  "extension": [
                    {
                      "fhir_comments": [
                        " We can use the example code systems from the FHIR CLinical Reasoning Module, or we can define GRADE specific code systems and use those here "
                      ],
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-strengthOfRecommendation",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/recommendation-strength",
                            "code": "strong",
                            "display": "Strong"
                          }
                        ]
                      }
                    },
                    {
                      "url": "http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence",
                      "valueCodeableConcept": {
                        "coding": [
                          {
                            "system": "http://terminology.hl7.org/CodeSystem/evidence-quality",
                            "code": "low",
                            "display": "Low quality"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ],
            "trigger": [
              {
                "type": "named-event",
                "name": "patient-view"
              }
            ],
            "condition": [
              {
                "kind": "applicability",
                "expression": {
                  "description": "Check whether the existing patient is using opioids concurrently with benzodiazepines.",
                  "language": "text/cql.identifier",
                  "expression": "Is Recommendation Applicable?"
                }
              }
            ],
            "groupingBehavior": "visual-group",
            "selectionBehavior": "exactly-one",
            "dynamicValue": [
              {
                "path": "action.description",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Detail"
                }
              },
              {
                "path": "action.title",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Summary"
                }
              },
              {
                "path": "action.extension",
                "expression": {
                  "language": "text/cql.identifier",
                  "expression": "Get Indicator"
                }
              }
            ],
            "action": [
              {
                "description": "Will revise",
                "_description": {
                  "fhir_comments": [
                    " Open Order Set, where available "
                  ]
                }
              },
              {
                "description": "Benefits outweigh risks, snooze 3 months"
              },
              {
                "description": "N/A - see comment, snooze 3 months"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "PlanDefinition/opioidcds-11-patient-view"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "FHIRHelpers",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-FHIRHelpers</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">4.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library FHIRHelpers version '4.0.1'\n\nusing FHIR version '4.0.1'\n\ndefine function ToInterval(period FHIR.Period):\n    if period is null then\n        null\n    else\n        Interval[period.&quot;start&quot;.value, period.&quot;end&quot;.value]\n\ndefine function ToQuantity(quantity FHIR.Quantity):\n    if quantity is null then\n        null\n    else\n        System.Quantity { value: quantity.value.value, unit: quantity.unit.value }\n\ndefine function ToInterval(range FHIR.Range):\n    if range is null then\n        null\n    else\n        Interval[ToQuantity(range.low), ToQuantity(range.high)]\n\ndefine function ToCode(coding FHIR.Coding):\n    if coding is null then\n        null\n    else\n        System.Code {\n          code: coding.code.value,\n          system: coding.system.value,\n          version: coding.version.value,\n          display: coding.display.value\n        }\n\ndefine function ToConcept(concept FHIR.CodeableConcept):\n    if concept is null then\n        null\n    else\n        System.Concept {\n            codes: concept.coding C return ToCode(C),\n            display: concept.text.value\n        }\n\ndefine function ToString(value FHIR.uuid): value.value\ndefine function ToString(value FHIR.TestScriptRequestMethodCode): value.value\ndefine function ToString(value FHIR.SortDirection): value.value\ndefine function ToString(value FHIR.BiologicallyDerivedProductStatus): value.value\ndefine function ToString(value FHIR.UnitsOfTime): value.value\ndefine function ToString(value FHIR.AddressType): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceCategory): value.value\ndefine function ToString(value FHIR.IssueSeverity): value.value\ndefine function ToString(value FHIR.CareTeamStatus): value.value\ndefine function ToString(value FHIR.EncounterStatus): value.value\ndefine function ToString(value FHIR.StructureDefinitionKind): value.value\ndefine function ToString(value FHIR.PublicationStatus): value.value\ndefine function ToString(value FHIR.FHIRVersion): value.value\ndefine function ToString(value FHIR.CarePlanActivityKind): value.value\ndefine function ToString(value FHIR.StructureMapSourceListMode): value.value\ndefine function ToString(value FHIR.RequestStatus): value.value\ndefine function ToString(value FHIR.strandType): value.value\ndefine function ToString(value FHIR.QuestionnaireResponseStatus): value.value\ndefine function ToString(value FHIR.SearchComparator): value.value\ndefine function ToString(value FHIR.ChargeItemStatus): value.value\ndefine function ToString(value FHIR.ActionParticipantType): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceType): value.value\ndefine function ToString(value FHIR.CarePlanActivityStatus): value.value\ndefine function ToString(value FHIR.InvoiceStatus): value.value\ndefine function ToString(value FHIR.ClaimProcessingCodes): value.value\ndefine function ToString(value FHIR.RequestResourceType): value.value\ndefine function ToString(value FHIR.ParticipationStatus): value.value\ndefine function ToString(value FHIR.DeviceNameType): value.value\ndefine function ToString(value FHIR.DocumentMode): value.value\ndefine function ToString(value FHIR.AssertionOperatorType): value.value\ndefine function ToString(value FHIR.DaysOfWeek): value.value\ndefine function ToString(value FHIR.IssueType): value.value\ndefine function ToString(value FHIR.canonical): value.value\ndefine function ToString(value FHIR.StructureMapContextType): value.value\ndefine function ToString(value FHIR.FamilyHistoryStatus): value.value\ndefine function ToString(value FHIR.status): value.value\ndefine function ToString(value FHIR.ExtensionContextType): value.value\ndefine function ToString(value FHIR.AssertionResponseTypes): value.value\ndefine function ToString(value FHIR.RequestIntent): value.value\ndefine function ToString(value FHIR.string): value.value\ndefine function ToString(value FHIR.ActionRequiredBehavior): value.value\ndefine function ToString(value FHIR.GraphCompartmentUse): value.value\ndefine function ToString(value FHIR.orientationType): value.value\ndefine function ToString(value FHIR.AccountStatus): value.value\ndefine function ToString(value FHIR.IdentifierUse): value.value\ndefine function ToString(value FHIR.StructureMapTargetListMode): value.value\ndefine function ToString(value FHIR.ExposureState): value.value\ndefine function ToString(value FHIR.TestReportParticipantType): value.value\ndefine function ToString(value FHIR.BindingStrength): value.value\ndefine function ToString(value FHIR.RequestPriority): value.value\ndefine function ToString(value FHIR.ParticipantRequired): value.value\ndefine function ToString(value FHIR.XPathUsageType): value.value\ndefine function ToString(value FHIR.id): value.value\ndefine function ToString(value FHIR.FilterOperator): value.value\ndefine function ToString(value FHIR.NamingSystemType): value.value\ndefine function ToString(value FHIR.ContractResourceStatusCodes): value.value\ndefine function ToString(value FHIR.ResearchSubjectStatus): value.value\ndefine function ToString(value FHIR.StructureMapTransform): value.value\ndefine function ToString(value FHIR.ResponseType): value.value\ndefine function ToDecimal(value FHIR.decimal): value.value\ndefine function ToString(value FHIR.AggregationMode): value.value\ndefine function ToString(value FHIR.sequenceType): value.value\ndefine function ToString(value FHIR.SystemRestfulInteraction): value.value\ndefine function ToString(value FHIR.AdverseEventActuality): value.value\ndefine function ToString(value FHIR.SubscriptionChannelType): value.value\ndefine function ToString(value FHIR.AssertionDirectionType): value.value\ndefine function ToString(value FHIR.CarePlanIntent): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceCriticality): value.value\ndefine function ToString(value FHIR.PropertyRepresentation): value.value\ndefine function ToString(value FHIR.TriggerType): value.value\ndefine function ToString(value FHIR.CompositionStatus): value.value\ndefine function ToString(value FHIR.AppointmentStatus): value.value\ndefine function ToString(value FHIR.MessageSignificanceCategory): value.value\ndefine function ToString(value FHIR.ListMode): value.value\ndefine function ToString(value FHIR.ResearchElementType): value.value\ndefine function ToString(value FHIR.ObservationStatus): value.value\ndefine function ToString(value FHIR.ResourceType): value.value\ndefine function ToBoolean(value FHIR.boolean): value.value\ndefine function ToString(value FHIR.StructureMapGroupTypeMode): value.value\ndefine function ToString(value FHIR.SupplyRequestStatus): value.value\ndefine function ToString(value FHIR.EncounterLocationStatus): value.value\ndefine function ToString(value FHIR.ConditionalDeleteStatus): value.value\ndefine function ToString(value FHIR.url): value.value\ndefine function ToString(value FHIR.uri): value.value\ndefine function ToString(value FHIR.Use): value.value\ndefine function ToString(value FHIR.MedicationRequestStatus): value.value\ndefine function ToString(value FHIR.IdentityAssuranceLevel): value.value\ndefine function ToString(value FHIR.DeviceMetricColor): value.value\ndefine function ToTime(value FHIR.time): value.value\ndefine function ToString(value FHIR.ConditionalReadStatus): value.value\ndefine function ToString(value FHIR.AllergyIntoleranceSeverity): value.value\ndefine function ToString(value FHIR.FinancialResourceStatusCodes): value.value\ndefine function ToString(value FHIR.OperationKind): value.value\ndefine function ToString(value FHIR.SubscriptionStatus): value.value\ndefine function ToString(value FHIR.GoalLifecycleStatus): value.value\ndefine function ToString(value FHIR.ObservationDataType): value.value\ndefine function ToString(value FHIR.DocumentReferenceStatus): value.value\ndefine function ToString(value FHIR.repositoryType): value.value\ndefine function ToString(value FHIR.LocationStatus): value.value\ndefine function ToString(value FHIR.NoteType): value.value\ndefine function ToString(value FHIR.TestReportStatus): value.value\ndefine function ToString(value FHIR.CodeSystemContentMode): value.value\ndefine function ToString(value FHIR.FHIRDeviceStatus): value.value\ndefine function ToString(value FHIR.ContactPointSystem): value.value\ndefine function ToString(value FHIR.SlotStatus): value.value\ndefine function ToString(value FHIR.PropertyType): value.value\ndefine function ToString(value FHIR.TypeDerivationRule): value.value\ndefine function ToString(value FHIR.GuidanceResponseStatus): value.value\ndefine function ToString(value FHIR.RelatedArtifactType): value.value\ndefine function ToString(value FHIR.oid): value.value\ndefine function ToString(value FHIR.CompartmentType): value.value\ndefine function ToString(value FHIR.MedicationRequestIntent): value.value\ndefine function ToString(value FHIR.InvoicePriceComponentType): value.value\ndefine function ToString(value FHIR.DeviceMetricCalibrationState): value.value\ndefine function ToString(value FHIR.GroupType): value.value\ndefine function ToString(value FHIR.EnableWhenBehavior): value.value\ndefine function ToString(value FHIR.TaskIntent): value.value\ndefine function ToString(value FHIR.ImmunizationEvaluationStatusCodes): value.value\ndefine function ToString(value FHIR.ExampleScenarioActorType): value.value\ndefine function ToString(value FHIR.ProvenanceEntityRole): value.value\ndefine function ToString(value FHIR.SpecimenStatus): value.value\ndefine function ToString(value FHIR.RestfulCapabilityMode): value.value\ndefine function ToString(value FHIR.DetectedIssueSeverity): value.value\ndefine function ToString(value FHIR.VisionEyes): value.value\ndefine function ToString(value FHIR.ConsentDataMeaning): value.value\ndefine function ToString(value FHIR.messageheaderResponseRequest): value.value\ndefine function ToString(value FHIR.GuidePageGeneration): value.value\ndefine function ToString(value FHIR.DocumentRelationshipType): value.value\ndefine function ToString(value FHIR.VariableType): value.value\ndefine function ToString(value FHIR.TestReportResult): value.value\ndefine function ToString(value FHIR.ConceptMapGroupUnmappedMode): value.value\ndefine function ToDateTime(value FHIR.instant): value.value\ndefine function ToDateTime(value FHIR.dateTime): value.value\ndefine function ToDate(value FHIR.date): value.value\ndefine function ToInteger(value FHIR.positiveInt): value.value\ndefine function ToString(value FHIR.ClinicalImpressionStatus): value.value\ndefine function ToString(value FHIR.EligibilityResponsePurpose): value.value\ndefine function ToString(value FHIR.NarrativeStatus): value.value\ndefine function ToString(value FHIR.ImagingStudyStatus): value.value\ndefine function ToString(value FHIR.EndpointStatus): value.value\ndefine function ToString(value FHIR.BiologicallyDerivedProductCategory): value.value\ndefine function ToString(value FHIR.ResourceVersionPolicy): value.value\ndefine function ToString(value FHIR.ActionCardinalityBehavior): value.value\ndefine function ToString(value FHIR.GroupMeasure): value.value\ndefine function ToString(value FHIR.NamingSystemIdentifierType): value.value\ndefine function ToString(value FHIR.ImmunizationStatusCodes): value.value\ndefine function ToString(value FHIR.MedicationStatusCodes): value.value\ndefine function ToString(value FHIR.DiscriminatorType): value.value\ndefine function ToString(value FHIR.StructureMapInputMode): value.value\ndefine function ToString(value FHIR.LinkageType): value.value\ndefine function ToString(value FHIR.ReferenceHandlingPolicy): value.value\ndefine function ToString(value FHIR.ResearchStudyStatus): value.value\ndefine function ToString(value FHIR.AuditEventOutcome): value.value\ndefine function ToString(value FHIR.SpecimenContainedPreference): value.value\ndefine function ToString(value FHIR.ActionRelationshipType): value.value\ndefine function ToString(value FHIR.ConstraintSeverity): value.value\ndefine function ToString(value FHIR.EventCapabilityMode): value.value\ndefine function ToString(value FHIR.CodeSearchSupport): value.value\ndefine function ToString(value FHIR.ObservationRangeCategory): value.value\ndefine function ToString(value FHIR.UDIEntryType): value.value\ndefine function ToString(value FHIR.DeviceMetricCategory): value.value\ndefine function ToString(value FHIR.TestReportActionResult): value.value\ndefine function ToString(value FHIR.CapabilityStatementKind): value.value\ndefine function ToString(value FHIR.EventTiming): value.value\ndefine function ToString(value FHIR.SearchParamType): value.value\ndefine function ToString(value FHIR.ActionGroupingBehavior): value.value\ndefine function ToString(value FHIR.StructureMapModelMode): value.value\ndefine function ToString(value FHIR.TaskStatus): value.value\ndefine function ToString(value FHIR.BiologicallyDerivedProductStorageScale): value.value\ndefine function ToString(value FHIR.GraphCompartmentRule): value.value\ndefine function ToString(value FHIR.SlicingRules): value.value\ndefine function ToString(value FHIR.ExplanationOfBenefitStatus): value.value\ndefine function ToString(value FHIR.GuideParameterCode): value.value\ndefine function ToString(value FHIR.CatalogEntryRelationType): value.value\ndefine function ToString(value FHIR.LinkType): value.value\ndefine function ToString(value FHIR.ConceptMapEquivalence): value.value\ndefine function ToString(value FHIR.AuditEventAction): value.value\ndefine function ToString(value FHIR.SearchModifierCode): value.value\ndefine function ToString(value FHIR.EventStatus): value.value\ndefine function ToString(value FHIR.OperationParameterUse): value.value\ndefine function ToString(value FHIR.ConsentProvisionType): value.value\ndefine function ToString(value FHIR.ActionConditionKind): value.value\ndefine function ToString(value FHIR.qualityType): value.value\ndefine function ToString(value FHIR.AdministrativeGender): value.value\ndefine function ToString(value FHIR.QuestionnaireItemType): value.value\ndefine function ToString(value FHIR.DeviceMetricCalibrationType): value.value\ndefine function ToString(value FHIR.EvidenceVariableType): value.value\ndefine function ToString(value FHIR.code): value.value\ndefine function ToString(value FHIR.ActionSelectionBehavior): value.value\ndefine function ToString(value FHIR.SupplyDeliveryStatus): value.value\ndefine function ToString(value FHIR.DiagnosticReportStatus): value.value\ndefine function ToString(value FHIR.FlagStatus): value.value\ndefine function ToString(value FHIR.SPDXLicense): value.value\ndefine function ToString(value FHIR.ListStatus): value.value\ndefine function ToString(value FHIR.base64Binary): value.value\ndefine function ToString(value FHIR.DeviceUseStatementStatus): value.value\ndefine function ToString(value FHIR.AuditEventAgentNetworkType): value.value\ndefine function ToString(value FHIR.ExpressionLanguage): value.value\ndefine function ToString(value FHIR.AddressUse): value.value\ndefine function ToString(value FHIR.ContactPointUse): value.value\ndefine function ToString(value FHIR.DeviceMetricOperationalStatus): value.value\ndefine function ToString(value FHIR.ContributorType): value.value\ndefine function ToString(value FHIR.ReferenceVersionRules): value.value\ndefine function ToString(value FHIR.MeasureReportStatus): value.value\ndefine function ToString(value FHIR.SearchEntryMode): value.value\ndefine function ToInteger(value FHIR.unsignedInt): value.value\ndefine function ToString(value FHIR.NameUse): value.value\ndefine function ToString(value FHIR.LocationMode): value.value\ndefine function ToInteger(value FHIR.integer): value.value\ndefine function ToString(value FHIR.FHIRSubstanceStatus): value.value\ndefine function ToString(value FHIR.QuestionnaireItemOperator): value.value\ndefine function ToString(value FHIR.HTTPVerb): value.value\ndefine function ToString(value FHIR.EpisodeOfCareStatus): value.value\ndefine function ToString(value FHIR.RemittanceOutcome): value.value\ndefine function ToString(value FHIR.markdown): value.value\ndefine function ToString(value FHIR.EligibilityRequestPurpose): value.value\ndefine function ToString(value FHIR.QuantityComparator): value.value\ndefine function ToString(value FHIR.MeasureReportType): value.value\ndefine function ToString(value FHIR.ActionPrecheckBehavior): value.value\ndefine function ToString(value FHIR.SampledDataDataType): value.value\ndefine function ToString(value FHIR.CompositionAttestationMode): value.value\ndefine function ToString(value FHIR.TypeRestfulInteraction): value.value\ndefine function ToString(value FHIR.CodeSystemHierarchyMeaning): value.value\ndefine function ToString(value FHIR.vConfidentialityClassification): value.value\ndefine function ToString(value FHIR.ContractResourcePublicationStatusCodes): value.value\ndefine function ToString(value FHIR.VisionBase): value.value\ndefine function ToString(value FHIR.BundleType): value.value\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://hl7.org/fhir/Library/FHIRHelpers",
        "version": "4.0.0",
        "name": "FHIRHelpers",
        "title": "Library - FHIR Helpers",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/FHIRHelpers"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSREC12PatientView",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSREC12PatientView</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/buprenorphine-and-methadone-medications</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-misuse-behavioral-counseling</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSREC12PatientView version '2.0.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OpioidCDSCommon version '2.0.1' called Common\ninclude OpioidCDSCommonConfig version '2.0.1' called Config\n\n/*\n**\n**  Recommendation #12\n**    Clinicians should offer or arrange evidence-based treatment (usually\n**    medication-assisted treatment with buprenorphine or methadone in combination\n**    with behavioral therapies) for patients with opioid use disorder\n**    (recommendation category: A, evidence type: 2)\n**\n**  When\n**    Patient is 18 years and older and not receiving evidence-based treatment for\n**      opioid use disorder, which may include medication treatment with buprenorphine\n**      or methadone, or opioid-specific behavioral counseling\n**    Patient has a diagnosis of opioid use disorder in the past 90 days\n**  Then\n**    Recommend opioid agonist or partial agonist treatment with methadone maintenance\n**    therapy, buprenorphine therapy, and/or behavioral therapy. Potential actions include:\n**      Order methadone or buprenorphine\n**      Refer to qualified treatment provider (i.e. substance disorder specialist)\n**      N/A - see comment; snooze 3 months\n**\n*/\n\n// META: PlanDefinition: http://fhir.org/guides/cdc/opioid-cds-r4/PlanDefinition/plandefinition-OpioidCDSREC12PatientView\n\ncontext Patient\n\ndefine &quot;Opioid Use Disorder Lookback Period&quot;:\n  Interval[Today() - 90 days, Today()]\n\ndefine &quot;Is Recommendation Applicable?&quot;:\n  &quot;Inclusion Criteria&quot;\n    and not &quot;Exclusion Criteria&quot;\n\ndefine &quot;Inclusion Criteria&quot;:\n  &quot;Patient 18 or Older?&quot;\n    and &quot;Not Receiving Evidence-Based Treatment for Opioid Use Disorder&quot;\n    and &quot;Presence of Diagnosis of Opioid Use Disorder&quot;\n    and &quot;Positive Result from Opioid Use Disorder Evaluation Tool&quot;\n\ndefine &quot;Exclusion Criteria&quot;:\n  false\n\ndefine &quot;Patient 18 or Older?&quot;:\n  Config.&quot;Age Less than 18 Years Is Enabled&quot;\n    and AgeInYears() &gt;= 18\n\ndefine &quot;Not Receiving Evidence-Based Treatment for Opioid Use Disorder&quot;:\n  Config.&quot;Evidence Based Treatment Criteria For Opioid Use Disorder&quot;\n    and not (\n      exists (\n        [MedicationRequest: Common.&quot;Buprenorphine and methadone medications&quot;] MR\n          where MR.status in { 'active', 'completed' }\n            and date from MR.authoredOn during day of &quot;Opioid Use Disorder Lookback Period&quot;\n      )\n      or exists (\n        [Procedure: Common.&quot;Substance misuse behavioral counseling&quot;] P\n          where P.status ~ 'completed'\n            and (\n              case\n                when P.performed is FHIR.dateTime then\n                  Interval[FHIRHelpers.ToDateTime(P.performed as FHIR.dateTime), FHIRHelpers.ToDateTime(P.performed as FHIR.dateTime)]\n                when P.performed is FHIR.Period then\n                  FHIRHelpers.ToInterval(P.performed as FHIR.Period)\n                else\n                  null as Interval&lt;DateTime&gt;\n                end\n            ) during day of &quot;Opioid Use Disorder Lookback Period&quot;\n      )\n    )\n\ndefine &quot;Presence of Diagnosis of Opioid Use Disorder&quot;:\n  exists (\n    [Condition: category in Common.&quot;US Core Condition Category Codes&quot;] C\n      where C.code in Common.&quot;Opioid misuse disorders&quot;\n        and exists (\n          C.clinicalStatus.coding Coding\n            where FHIRHelpers.ToCode(Coding) ~ Common.&quot;Active Condition&quot;\n        )\n        and date from C.recordedDate during day of &quot;Opioid Use Disorder Lookback Period&quot;\n    )\n\ndefine &quot;Positive Result from Opioid Use Disorder Evaluation Tool&quot;:\n  true\n\ndefine &quot;Get Indicator&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'warning'\n  else null\n\ndefine &quot;Get Summary&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Recommend opioid agonist or partial agonist treatment with methadone maintenance therapy or buprenorphine and/or behavioral therapy'\n  else null\n\ndefine &quot;Get Detail&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then null\n  else null\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC12PatientView",
        "version": "2.0.1",
        "name": "OpioidCDSREC12PatientView",
        "title": "Library - Recommendation #12 (patient-view) - Evidence-based Treatment for Patients with Opioid Use Disorder",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://hl7.org/fhir/Library/FHIRHelpers"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig"
          }
        ],
        "dataRequirement": [
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/buprenorphine-and-methadone-medications"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/substance-misuse-behavioral-counseling"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "category",
                "valueSet": "http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGxpYnJhcnkgeG1sbnM9InVybjpobDctb3JnOmVsbTpyMSIgeG1sbnM6dD0idXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczpmaGlyPSJodHRwOi8vaGw3Lm9yZy9maGlyIiB4bWxuczpxZG00Mz0idXJuOmhlYWx0aGl0LWdvdjpxZG06djRfMyIgeG1sbnM6cWRtNTM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY1XzMiIHhtbG5zOmE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSI+CiAgIDxhbm5vdGF0aW9uIHRyYW5zbGF0b3JWZXJzaW9uPSIxLjIiIHRyYW5zbGF0b3JPcHRpb25zPSJFbmFibGVEYXRlUmFuZ2VPcHRpbWl6YXRpb24iIHhzaTp0eXBlPSJhOkNxbFRvRWxtSW5mbyIvPgogICA8aWRlbnRpZmllciBpZD0iT3Bpb2lkQ0RTUkVDMTJQYXRpZW50VmlldyIgdmVyc2lvbj0iMi4wLjEiLz4KICAgPHNjaGVtYUlkZW50aWZpZXIgaWQ9InVybjpobDctb3JnOmVsbSIgdmVyc2lvbj0icjEiLz4KICAgPHVzaW5ncz4KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IlN5c3RlbSIgdXJpPSJ1cm46aGw3LW9yZzplbG0tdHlwZXM6cjEiLz4KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IkZISVIiIHVyaT0iaHR0cDovL2hsNy5vcmcvZmhpciIgdmVyc2lvbj0iNC4wLjAiLz4KICAgPC91c2luZ3M+CiAgIDxpbmNsdWRlcz4KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IkZISVJIZWxwZXJzIiBwYXRoPSJGSElSSGVscGVycyIgdmVyc2lvbj0iNC4wLjAiLz4KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IkNvbW1vbiIgcGF0aD0iT3Bpb2lkQ0RTQ29tbW9uIiB2ZXJzaW9uPSIyLjAuMSIvPgogICAgICA8ZGVmIGxvY2FsSWRlbnRpZmllcj0iQ29uZmlnIiBwYXRoPSJPcGlvaWRDRFNDb21tb25Db25maWciIHZlcnNpb249IjIuMC4xIi8+CiAgIDwvaW5jbHVkZXM+CiAgIDxzdGF0ZW1lbnRzPgogICAgICA8ZGVmIG5hbWU9IlBhdGllbnQiIGNvbnRleHQ9IlBhdGllbnQiPgogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iU2luZ2xldG9uRnJvbSI+CiAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOlBhdGllbnQiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPgogICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9Ik9waW9pZCBVc2UgRGlzb3JkZXIgTG9va2JhY2sgUGVyaW9kIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24gbG93Q2xvc2VkPSJ0cnVlIiBoaWdoQ2xvc2VkPSJ0cnVlIiB4c2k6dHlwZT0iSW50ZXJ2YWwiPgogICAgICAgICAgICA8bG93IHhzaTp0eXBlPSJTdWJ0cmFjdCI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJUb2RheSIvPgogICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZT0iOTAiIHVuaXQ9ImRheXMiIHhzaTp0eXBlPSJRdWFudGl0eSIvPgogICAgICAgICAgICA8L2xvdz4KICAgICAgICAgICAgPGhpZ2ggeHNpOnR5cGU9IlRvZGF5Ii8+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbmFtZT0iUGF0aWVudCAxOCBvciBPbGRlcj8iIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iQW5kIj4KICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iQWdlIExlc3MgdGhhbiAxOCBZZWFycyBJcyBFbmFibGVkIiBsaWJyYXJ5TmFtZT0iQ29uZmlnIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iR3JlYXRlck9yRXF1YWwiPgogICAgICAgICAgICAgICA8b3BlcmFuZCBwcmVjaXNpb249IlllYXIiIHhzaTp0eXBlPSJDYWxjdWxhdGVBZ2UiPgogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJiaXJ0aERhdGUudmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgbmFtZT0iUGF0aWVudCIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB2YWx1ZT0iMTgiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJOb3QgUmVjZWl2aW5nIEV2aWRlbmNlLUJhc2VkIFRyZWF0bWVudCBmb3IgT3Bpb2lkIFVzZSBEaXNvcmRlciIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJBbmQiPgogICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJFdmlkZW5jZSBCYXNlZCBUcmVhdG1lbnQgQ3JpdGVyaWEgRm9yIE9waW9pZCBVc2UgRGlzb3JkZXIiIGxpYnJhcnlOYW1lPSJDb25maWciIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJOb3QiPgogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iT3IiPgogICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iRXhpc3RzIj4KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iTVIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBkYXRhVHlwZT0iZmhpcjpNZWRpY2F0aW9uUmVxdWVzdCIgY29kZVByb3BlcnR5PSJtZWRpY2F0aW9uIiB4c2k6dHlwZT0iUmV0cmlldmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iQnVwcmVub3JwaGluZSBhbmQgbWV0aGFkb25lIG1lZGljYXRpb25zIiBsaWJyYXJ5TmFtZT0iQ29tbW9uIiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHdoZXJlIHhzaTp0eXBlPSJBbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJUb1N0cmluZyIgbGlicmFyeU5hbWU9IkZISVJIZWxwZXJzIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJzdGF0dXMiIHNjb3BlPSJNUiIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9Ikxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iYWN0aXZlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iY29tcGxldGVkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJJbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJEYXRlRnJvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlRvRGF0ZVRpbWUiIGxpYnJhcnlOYW1lPSJGSElSSGVscGVycyIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0iYXV0aG9yZWRPbiIgc2NvcGU9Ik1SIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik9waW9pZCBVc2UgRGlzb3JkZXIgTG9va2JhY2sgUGVyaW9kIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvd2hlcmU+CiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iRXhpc3RzIj4KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iUCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIGRhdGFUeXBlPSJmaGlyOlByb2NlZHVyZSIgY29kZVByb3BlcnR5PSJjb2RlIiB4c2k6dHlwZT0iUmV0cmlldmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iU3Vic3RhbmNlIG1pc3VzZSBiZWhhdmlvcmFsIGNvdW5zZWxpbmciIGxpYnJhcnlOYW1lPSJDb21tb24iIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc291cmNlPgogICAgICAgICAgICAgICAgICAgICAgICA8d2hlcmUgeHNpOnR5cGU9IkFuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFcXVpdmFsZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iVG9TdHJpbmciIGxpYnJhcnlOYW1lPSJGSElSSGVscGVycyIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0ic3RhdHVzIiBzY29wZT0iUCIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImNvbXBsZXRlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkluY2x1ZGVkSW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iQ2FzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjYXNlSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHdoZW4geHNpOnR5cGU9IklzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0icGVyZm9ybWVkIiBzY29wZT0iUCIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpc1R5cGVTcGVjaWZpZXIgbmFtZT0iZmhpcjpkYXRlVGltZSIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3doZW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuIGxvd0Nsb3NlZD0idHJ1ZSIgaGlnaENsb3NlZD0idHJ1ZSIgeHNpOnR5cGU9IkludGVydmFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvdyBuYW1lPSJUb0RhdGVUaW1lIiBsaWJyYXJ5TmFtZT0iRkhJUkhlbHBlcnMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHN0cmljdD0iZmFsc2UiIHhzaTp0eXBlPSJBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InBlcmZvcm1lZCIgc2NvcGU9IlAiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNUeXBlU3BlY2lmaWVyIG5hbWU9ImZoaXI6ZGF0ZVRpbWUiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2ggbmFtZT0iVG9EYXRlVGltZSIgbGlicmFyeU5hbWU9IkZISVJIZWxwZXJzIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBzdHJpY3Q9ImZhbHNlIiB4c2k6dHlwZT0iQXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJwZXJmb3JtZWQiIHNjb3BlPSJQIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzVHlwZVNwZWNpZmllciBuYW1lPSJmaGlyOmRhdGVUaW1lIiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oaWdoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2FzZUl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjYXNlSXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHdoZW4geHNpOnR5cGU9IklzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0icGVyZm9ybWVkIiBzY29wZT0iUCIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpc1R5cGVTcGVjaWZpZXIgbmFtZT0iZmhpcjpQZXJpb2QiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC93aGVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlbiBuYW1lPSJUb0ludGVydmFsIiBsaWJyYXJ5TmFtZT0iRkhJUkhlbHBlcnMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHN0cmljdD0iZmFsc2UiIHhzaTp0eXBlPSJBcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InBlcmZvcm1lZCIgc2NvcGU9IlAiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNUeXBlU3BlY2lmaWVyIG5hbWU9ImZoaXI6UGVyaW9kIiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Nhc2VJdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxzZSBzdHJpY3Q9ImZhbHNlIiB4c2k6dHlwZT0iQXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iTnVsbCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNUeXBlU3BlY2lmaWVyIHhzaTp0eXBlPSJJbnRlcnZhbFR5cGVTcGVjaWZpZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9pbnRUeXBlIG5hbWU9InQ6RGF0ZVRpbWUiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc1R5cGVTcGVjaWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZWxzZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSW50ZXJ2YWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93IHhzaTp0eXBlPSJUb0RhdGVUaW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0ibG93IiB4c2k6dHlwZT0iUHJvcGVydHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIG5hbWU9Ik9waW9pZCBVc2UgRGlzb3JkZXIgTG9va2JhY2sgUGVyaW9kIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbG93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG93Q2xvc2VkRXhwcmVzc2lvbiBwYXRoPSJsb3dDbG9zZWQiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgbmFtZT0iT3Bpb2lkIFVzZSBEaXNvcmRlciBMb29rYmFjayBQZXJpb2QiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbG93Q2xvc2VkRXhwcmVzc2lvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2ggeHNpOnR5cGU9IlRvRGF0ZVRpbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJoaWdoIiB4c2k6dHlwZT0iUHJvcGVydHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIG5hbWU9Ik9waW9pZCBVc2UgRGlzb3JkZXIgTG9va2JhY2sgUGVyaW9kIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaGlnaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhpZ2hDbG9zZWRFeHByZXNzaW9uIHBhdGg9ImhpZ2hDbG9zZWQiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgbmFtZT0iT3Bpb2lkIFVzZSBEaXNvcmRlciBMb29rYmFjayBQZXJpb2QiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaGlnaENsb3NlZEV4cHJlc3Npb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICAgICA8L3doZXJlPgogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbmFtZT0iUHJlc2VuY2Ugb2YgRGlhZ25vc2lzIG9mIE9waW9pZCBVc2UgRGlzb3JkZXIiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iRXhpc3RzIj4KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4KICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iQyI+CiAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIGRhdGFUeXBlPSJmaGlyOkNvbmRpdGlvbiIgY29kZVByb3BlcnR5PSJjYXRlZ29yeSIgeHNpOnR5cGU9IlJldHJpZXZlIj4KICAgICAgICAgICAgICAgICAgICAgPGNvZGVzIG5hbWU9IlVTIENvcmUgQ29uZGl0aW9uIENhdGVnb3J5IENvZGVzIiBsaWJyYXJ5TmFtZT0iQ29tbW9uIiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4KICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICAgICAgICAgICA8L3NvdXJjZT4KICAgICAgICAgICAgICAgPHdoZXJlIHhzaTp0eXBlPSJBbmQiPgogICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iQW5kIj4KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkluVmFsdWVTZXQiPgogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBuYW1lPSJUb0NvbmNlcHQiIGxpYnJhcnlOYW1lPSJGSElSSGVscGVycyIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0iY29kZSIgc2NvcGU9IkMiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZXNldCBuYW1lPSJPcGlvaWQgbWlzdXNlIGRpc29yZGVycyIgbGlicmFyeU5hbWU9IkNvbW1vbiIvPgogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFeGlzdHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iUXVlcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIGFsaWFzPSJDb2RpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBwYXRoPSJjb2RpbmciIHhzaTp0eXBlPSJQcm9wZXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgcGF0aD0iY2xpbmljYWxTdGF0dXMiIHNjb3BlPSJDIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHdoZXJlIHhzaTp0eXBlPSJFcXVpdmFsZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iVG9Db2RlIiBsaWJyYXJ5TmFtZT0iRkhJUkhlbHBlcnMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IkNvZGluZyIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iQWN0aXZlIENvbmRpdGlvbiIgbGlicmFyeU5hbWU9IkNvbW1vbiIgeHNpOnR5cGU9IkNvZGVSZWYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC93aGVyZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJJbiI+CiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJEYXRlRnJvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlRvRGF0ZVRpbWUiIGxpYnJhcnlOYW1lPSJGSElSSGVscGVycyIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0icmVjb3JkZWREYXRlIiBzY29wZT0iQyIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJPcGlvaWQgVXNlIERpc29yZGVyIExvb2tiYWNrIFBlcmlvZCIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICA8L3doZXJlPgogICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbmFtZT0iUG9zaXRpdmUgUmVzdWx0IGZyb20gT3Bpb2lkIFVzZSBEaXNvcmRlciBFdmFsdWF0aW9uIFRvb2wiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9InRydWUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9IkluY2x1c2lvbiBDcml0ZXJpYSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJBbmQiPgogICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iQW5kIj4KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkFuZCI+CiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBhdGllbnQgMTggb3IgT2xkZXI/IiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJOb3QgUmVjZWl2aW5nIEV2aWRlbmNlLUJhc2VkIFRyZWF0bWVudCBmb3IgT3Bpb2lkIFVzZSBEaXNvcmRlciIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4KICAgICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQcmVzZW5jZSBvZiBEaWFnbm9zaXMgb2YgT3Bpb2lkIFVzZSBEaXNvcmRlciIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4KICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQb3NpdGl2ZSBSZXN1bHQgZnJvbSBPcGlvaWQgVXNlIERpc29yZGVyIEV2YWx1YXRpb24gVG9vbCIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJFeGNsdXNpb24gQ3JpdGVyaWEiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9ImZhbHNlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJBbmQiPgogICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJJbmNsdXNpb24gQ3JpdGVyaWEiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJOb3QiPgogICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJFeGNsdXNpb24gQ3JpdGVyaWEiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJHZXQgSW5kaWNhdG9yIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IklmIj4KICAgICAgICAgICAgPGNvbmRpdGlvbiBhc1R5cGU9InQ6Qm9vbGVhbiIgeHNpOnR5cGU9IkFzIj4KICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iSXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8iIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDwvY29uZGl0aW9uPgogICAgICAgICAgICA8dGhlbiB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0id2FybmluZyIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgICAgICAgPGVsc2UgYXNUeXBlPSJ0OlN0cmluZyIgeHNpOnR5cGU9IkFzIj4KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9Ik51bGwiLz4KICAgICAgICAgICAgPC9lbHNlPgogICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIG5hbWU9IkdldCBTdW1tYXJ5IiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IklmIj4KICAgICAgICAgICAgPGNvbmRpdGlvbiBhc1R5cGU9InQ6Qm9vbGVhbiIgeHNpOnR5cGU9IkFzIj4KICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iSXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8iIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDwvY29uZGl0aW9uPgogICAgICAgICAgICA8dGhlbiB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iUmVjb21tZW5kIG9waW9pZCBhZ29uaXN0IG9yIHBhcnRpYWwgYWdvbmlzdCB0cmVhdG1lbnQgd2l0aCBtZXRoYWRvbmUgbWFpbnRlbmFuY2UgdGhlcmFweSBvciBidXByZW5vcnBoaW5lIGFuZC9vciBiZWhhdmlvcmFsIHRoZXJhcHkiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgICAgICAgIDxlbHNlIGFzVHlwZT0idDpTdHJpbmciIHhzaTp0eXBlPSJBcyI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJOdWxsIi8+CiAgICAgICAgICAgIDwvZWxzZT4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBuYW1lPSJHZXQgRGV0YWlsIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IklmIj4KICAgICAgICAgICAgPGNvbmRpdGlvbiBhc1R5cGU9InQ6Qm9vbGVhbiIgeHNpOnR5cGU9IkFzIj4KICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iSXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8iIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDwvY29uZGl0aW9uPgogICAgICAgICAgICA8dGhlbiB4c2k6dHlwZT0iTnVsbCIvPgogICAgICAgICAgICA8ZWxzZSB4c2k6dHlwZT0iTnVsbCIvPgogICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgIDwvZGVmPgogICA8L3N0YXRlbWVudHM+CjwvbGlicmFyeT4K"
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBPcGlvaWRDRFNSRUMxMlBhdGllbnRWaWV3IHZlcnNpb24gJzIuMC4xJwoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMCcKCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjAnIGNhbGxlZCBGSElSSGVscGVycwppbmNsdWRlIE9waW9pZENEU0NvbW1vbiB2ZXJzaW9uICcyLjAuMScgY2FsbGVkIENvbW1vbgppbmNsdWRlIE9waW9pZENEU0NvbW1vbkNvbmZpZyB2ZXJzaW9uICcyLjAuMScgY2FsbGVkIENvbmZpZwoKLyoKKioKKiogIFJlY29tbWVuZGF0aW9uICMxMgoqKiAgICBDbGluaWNpYW5zIHNob3VsZCBvZmZlciBvciBhcnJhbmdlIGV2aWRlbmNlLWJhc2VkIHRyZWF0bWVudCAodXN1YWxseQoqKiAgICBtZWRpY2F0aW9uLWFzc2lzdGVkIHRyZWF0bWVudCB3aXRoIGJ1cHJlbm9ycGhpbmUgb3IgbWV0aGFkb25lIGluIGNvbWJpbmF0aW9uCioqICAgIHdpdGggYmVoYXZpb3JhbCB0aGVyYXBpZXMpIGZvciBwYXRpZW50cyB3aXRoIG9waW9pZCB1c2UgZGlzb3JkZXIKKiogICAgKHJlY29tbWVuZGF0aW9uIGNhdGVnb3J5OiBBLCBldmlkZW5jZSB0eXBlOiAyKQoqKgoqKiAgV2hlbgoqKiAgICBQYXRpZW50IGlzIDE4IHllYXJzIGFuZCBvbGRlciBhbmQgbm90IHJlY2VpdmluZyBldmlkZW5jZS1iYXNlZCB0cmVhdG1lbnQgZm9yCioqICAgICAgb3Bpb2lkIHVzZSBkaXNvcmRlciwgd2hpY2ggbWF5IGluY2x1ZGUgbWVkaWNhdGlvbiB0cmVhdG1lbnQgd2l0aCBidXByZW5vcnBoaW5lCioqICAgICAgb3IgbWV0aGFkb25lLCBvciBvcGlvaWQtc3BlY2lmaWMgYmVoYXZpb3JhbCBjb3Vuc2VsaW5nCioqICAgIFBhdGllbnQgaGFzIGEgZGlhZ25vc2lzIG9mIG9waW9pZCB1c2UgZGlzb3JkZXIgaW4gdGhlIHBhc3QgOTAgZGF5cwoqKiAgVGhlbgoqKiAgICBSZWNvbW1lbmQgb3Bpb2lkIGFnb25pc3Qgb3IgcGFydGlhbCBhZ29uaXN0IHRyZWF0bWVudCB3aXRoIG1ldGhhZG9uZSBtYWludGVuYW5jZQoqKiAgICB0aGVyYXB5LCBidXByZW5vcnBoaW5lIHRoZXJhcHksIGFuZC9vciBiZWhhdmlvcmFsIHRoZXJhcHkuIFBvdGVudGlhbCBhY3Rpb25zIGluY2x1ZGU6CioqICAgICAgT3JkZXIgbWV0aGFkb25lIG9yIGJ1cHJlbm9ycGhpbmUKKiogICAgICBSZWZlciB0byBxdWFsaWZpZWQgdHJlYXRtZW50IHByb3ZpZGVyIChpLmUuIHN1YnN0YW5jZSBkaXNvcmRlciBzcGVjaWFsaXN0KQoqKiAgICAgIE4vQSAtIHNlZSBjb21tZW50OyBzbm9vemUgMyBtb250aHMKKioKKi8KCi8vIE1FVEE6IFBsYW5EZWZpbml0aW9uOiBodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzLXI0L1BsYW5EZWZpbml0aW9uL3BsYW5kZWZpbml0aW9uLU9waW9pZENEU1JFQzEyUGF0aWVudFZpZXcKCmNvbnRleHQgUGF0aWVudAoKZGVmaW5lICJPcGlvaWQgVXNlIERpc29yZGVyIExvb2tiYWNrIFBlcmlvZCI6CiAgSW50ZXJ2YWxbVG9kYXkoKSAtIDkwIGRheXMsIFRvZGF5KCldCgpkZWZpbmUgIklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IjoKICAiSW5jbHVzaW9uIENyaXRlcmlhIgogICAgYW5kIG5vdCAiRXhjbHVzaW9uIENyaXRlcmlhIgoKZGVmaW5lICJJbmNsdXNpb24gQ3JpdGVyaWEiOgogICJQYXRpZW50IDE4IG9yIE9sZGVyPyIKICAgIGFuZCAiTm90IFJlY2VpdmluZyBFdmlkZW5jZS1CYXNlZCBUcmVhdG1lbnQgZm9yIE9waW9pZCBVc2UgRGlzb3JkZXIiCiAgICBhbmQgIlByZXNlbmNlIG9mIERpYWdub3NpcyBvZiBPcGlvaWQgVXNlIERpc29yZGVyIgogICAgYW5kICJQb3NpdGl2ZSBSZXN1bHQgZnJvbSBPcGlvaWQgVXNlIERpc29yZGVyIEV2YWx1YXRpb24gVG9vbCIKCmRlZmluZSAiRXhjbHVzaW9uIENyaXRlcmlhIjoKICBmYWxzZQoKZGVmaW5lICJQYXRpZW50IDE4IG9yIE9sZGVyPyI6CiAgQ29uZmlnLiJBZ2UgTGVzcyB0aGFuIDE4IFllYXJzIElzIEVuYWJsZWQiCiAgICBhbmQgQWdlSW5ZZWFycygpID49IDE4CgpkZWZpbmUgIk5vdCBSZWNlaXZpbmcgRXZpZGVuY2UtQmFzZWQgVHJlYXRtZW50IGZvciBPcGlvaWQgVXNlIERpc29yZGVyIjoKICBDb25maWcuIkV2aWRlbmNlIEJhc2VkIFRyZWF0bWVudCBDcml0ZXJpYSBGb3IgT3Bpb2lkIFVzZSBEaXNvcmRlciIKICAgIGFuZCBub3QgKAogICAgICBleGlzdHMgKAogICAgICAgIFtNZWRpY2F0aW9uUmVxdWVzdDogQ29tbW9uLiJCdXByZW5vcnBoaW5lIGFuZCBtZXRoYWRvbmUgbWVkaWNhdGlvbnMiXSBNUgogICAgICAgICAgd2hlcmUgTVIuc3RhdHVzIGluIHsgJ2FjdGl2ZScsICdjb21wbGV0ZWQnIH0KICAgICAgICAgICAgYW5kIGRhdGUgZnJvbSBNUi5hdXRob3JlZE9uIGR1cmluZyBkYXkgb2YgIk9waW9pZCBVc2UgRGlzb3JkZXIgTG9va2JhY2sgUGVyaW9kIgogICAgICApCiAgICAgIG9yIGV4aXN0cyAoCiAgICAgICAgW1Byb2NlZHVyZTogQ29tbW9uLiJTdWJzdGFuY2UgbWlzdXNlIGJlaGF2aW9yYWwgY291bnNlbGluZyJdIFAKICAgICAgICAgIHdoZXJlIFAuc3RhdHVzIH4gJ2NvbXBsZXRlZCcKICAgICAgICAgICAgYW5kICgKICAgICAgICAgICAgICBjYXNlCiAgICAgICAgICAgICAgICB3aGVuIFAucGVyZm9ybWVkIGlzIEZISVIuZGF0ZVRpbWUgdGhlbgogICAgICAgICAgICAgICAgICBJbnRlcnZhbFtGSElSSGVscGVycy5Ub0RhdGVUaW1lKFAucGVyZm9ybWVkIGFzIEZISVIuZGF0ZVRpbWUpLCBGSElSSGVscGVycy5Ub0RhdGVUaW1lKFAucGVyZm9ybWVkIGFzIEZISVIuZGF0ZVRpbWUpXQogICAgICAgICAgICAgICAgd2hlbiBQLnBlcmZvcm1lZCBpcyBGSElSLlBlcmlvZCB0aGVuCiAgICAgICAgICAgICAgICAgIEZISVJIZWxwZXJzLlRvSW50ZXJ2YWwoUC5wZXJmb3JtZWQgYXMgRkhJUi5QZXJpb2QpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgIG51bGwgYXMgSW50ZXJ2YWw8RGF0ZVRpbWU+CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgKSBkdXJpbmcgZGF5IG9mICJPcGlvaWQgVXNlIERpc29yZGVyIExvb2tiYWNrIFBlcmlvZCIKICAgICAgKQogICAgKQoKZGVmaW5lICJQcmVzZW5jZSBvZiBEaWFnbm9zaXMgb2YgT3Bpb2lkIFVzZSBEaXNvcmRlciI6CiAgZXhpc3RzICgKICAgIFtDb25kaXRpb246IGNhdGVnb3J5IGluIENvbW1vbi4iVVMgQ29yZSBDb25kaXRpb24gQ2F0ZWdvcnkgQ29kZXMiXSBDCiAgICAgIHdoZXJlIEMuY29kZSBpbiBDb21tb24uIk9waW9pZCBtaXN1c2UgZGlzb3JkZXJzIgogICAgICAgIGFuZCBleGlzdHMgKAogICAgICAgICAgQy5jbGluaWNhbFN0YXR1cy5jb2RpbmcgQ29kaW5nCiAgICAgICAgICAgIHdoZXJlIEZISVJIZWxwZXJzLlRvQ29kZShDb2RpbmcpIH4gQ29tbW9uLiJBY3RpdmUgQ29uZGl0aW9uIgogICAgICAgICkKICAgICAgICBhbmQgZGF0ZSBmcm9tIEMucmVjb3JkZWREYXRlIGR1cmluZyBkYXkgb2YgIk9waW9pZCBVc2UgRGlzb3JkZXIgTG9va2JhY2sgUGVyaW9kIgogICAgKQoKZGVmaW5lICJQb3NpdGl2ZSBSZXN1bHQgZnJvbSBPcGlvaWQgVXNlIERpc29yZGVyIEV2YWx1YXRpb24gVG9vbCI6CiAgdHJ1ZQoKZGVmaW5lICJHZXQgSW5kaWNhdG9yIjoKICBpZiAiSXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8iCiAgICB0aGVuICd3YXJuaW5nJwogIGVsc2UgbnVsbAoKZGVmaW5lICJHZXQgU3VtbWFyeSI6CiAgaWYgIklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IgogICAgdGhlbiAnUmVjb21tZW5kIG9waW9pZCBhZ29uaXN0IG9yIHBhcnRpYWwgYWdvbmlzdCB0cmVhdG1lbnQgd2l0aCBtZXRoYWRvbmUgbWFpbnRlbmFuY2UgdGhlcmFweSBvciBidXByZW5vcnBoaW5lIGFuZC9vciBiZWhhdmlvcmFsIHRoZXJhcHknCiAgZWxzZSBudWxsCgpkZWZpbmUgIkdldCBEZXRhaWwiOgogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyIKICAgIHRoZW4gbnVsbAogIGVsc2UgbnVsbAo="
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSREC12PatientView"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSREC04PatientView",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSREC04PatientView</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines</span></p></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSREC04PatientView version '2.0.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OpioidCDSCommon version '2.0.1' called Common\ninclude OpioidCDSRoutines version '2.0.1' called Routines\n\n/*\n**\n**  Recommendation #4\n**    Prescribe immediate-release opioids instead of extended-release/long-acting (ER/LA) opioids\n**\n**  When\n**    Provider is prescribing an extended release opioid with ambulatory misuse potential in the outpatient setting\n**    Prescription is for treating chronic pain.\n**    Opioid review is useful for this patient:\n**      Patient is 18 or over\n**      Patient does not have findings indicating limited life expectancy\n**      Patient does not have orders for therapies indicating end of life care\n**      Patient is not undergoing active cancer treatment:\n**        Patient has had at least 2 encounters within the past year with any diagnosis of cancer\n**    Patient is opioid naive:\n**      No indication of opioid use in the past 90 days from a prescription, self report (for future implementation), or a dispensing event (for future implementation)\n**  Then\n**    Recommend use of immediate release opioids:\n**      Will prescribe immediate release opioid analgesic with ambulatory misuse potential\n**      Benefits outweigh risks, snooze 3 months\n**      N/A - see comment, snooze 3 months\n**\n*/\n\n// META: Plan Definition: http://fhir.org/guides/cdc/opioid-cds-r4/PlanDefinition/opioid-cds-04\n\ncontext Patient\n\ndefine &quot;Inclusion Period&quot;:\n  Interval[Today() - 91 days, Today() - 1 days]\n\ndefine &quot;Encounter Period&quot;:\n  Interval[Today() - 12 months - 1 days, Today() - 1 days]\n\ndefine &quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;:\n  Common.&quot;Active Ambulatory Opioid Rx&quot; AmbulatoryOpioidPrescription\n    where Routines.&quot;Is Acute Pain Prescription?&quot;(AmbulatoryOpioidPrescription)\n      and AmbulatoryOpioidPrescription.medication in Common.&quot;Extended release opioid with ambulatory misuse potential&quot;\n\ndefine &quot;Patient Is Being Prescribed Extended Release Opioid Analgesic with Ambulatory Misuse Potential&quot;:\n  exists (&quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;)\n\ndefine &quot;Is Recommendation Applicable?&quot;:\n  &quot;Inclusion Criteria&quot;\n    and not &quot;Exclusion Criteria&quot;\n\ndefine &quot;Inclusion Criteria&quot;:\n  &quot;Patient Is Being Prescribed Extended Release Opioid Analgesic with Ambulatory Misuse Potential&quot;\n    and Routines.&quot;Is Opioid Review Useful?&quot;\n    and Routines.&quot;Is Opioid Naive?&quot;\n\ndefine &quot;Exclusion Criteria&quot;:\n  Common.&quot;End of Life Assessment&quot;\n\ndefine &quot;Get Indicator&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'warning'\n  else null\n\ndefine &quot;Get Summary&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'Recommend use of immediate-release opioids instead of extended release/long acting opioids when starting patient on opioids.'\n  else null\n\ndefine &quot;Get Detail&quot;:\n  if &quot;Is Recommendation Applicable?&quot;\n    then 'The following medication requests(s) release rates should be re-evaluated: ' + Combine(flatten(Common.GetMedicationNames(&quot;Chronic Pain Extended Release Opioid Analgesic with Ambulatory Misuse Potential Prescriptions&quot;)), ', ')\n  else null\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC04PatientView",
        "version": "2.0.1",
        "name": "OpioidCDSREC04PatientView",
        "title": "Library - Recommendation #4 Patient View - Opioid Immediate Release Form When Starting Opioid Therapy",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://hl7.org/fhir/Library/FHIRHelpers"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines"
          }
        ],
        "dataRequirement": [
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
              }
            ]
          },
          {
            "type": "MedicationRequest"
          },
          {
            "type": "Medication",
            "codeFilter": [
              {
                "path": "id"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions"
              }
            ]
          },
          {
            "type": "ServiceRequest",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/office-visit"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBPcGlvaWRDRFNSRUMwNFBhdGllbnRWaWV3IHZlcnNpb24gJzIuMC4xJwoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMCcKCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjAnIGNhbGxlZCBGSElSSGVscGVycwppbmNsdWRlIE9waW9pZENEU0NvbW1vbiB2ZXJzaW9uICcyLjAuMScgY2FsbGVkIENvbW1vbgppbmNsdWRlIE9waW9pZENEU1JvdXRpbmVzIHZlcnNpb24gJzIuMC4xJyBjYWxsZWQgUm91dGluZXMKCi8qCioqCioqICBSZWNvbW1lbmRhdGlvbiAjNAoqKiAgICBQcmVzY3JpYmUgaW1tZWRpYXRlLXJlbGVhc2Ugb3Bpb2lkcyBpbnN0ZWFkIG9mIGV4dGVuZGVkLXJlbGVhc2UvbG9uZy1hY3RpbmcgKEVSL0xBKSBvcGlvaWRzCioqCioqICBXaGVuCioqICAgIFByb3ZpZGVyIGlzIHByZXNjcmliaW5nIGFuIGV4dGVuZGVkIHJlbGVhc2Ugb3Bpb2lkIHdpdGggYW1idWxhdG9yeSBtaXN1c2UgcG90ZW50aWFsIGluIHRoZSBvdXRwYXRpZW50IHNldHRpbmcKKiogICAgUHJlc2NyaXB0aW9uIGlzIGZvciB0cmVhdGluZyBjaHJvbmljIHBhaW4uCioqICAgIE9waW9pZCByZXZpZXcgaXMgdXNlZnVsIGZvciB0aGlzIHBhdGllbnQ6CioqICAgICAgUGF0aWVudCBpcyAxOCBvciBvdmVyCioqICAgICAgUGF0aWVudCBkb2VzIG5vdCBoYXZlIGZpbmRpbmdzIGluZGljYXRpbmcgbGltaXRlZCBsaWZlIGV4cGVjdGFuY3kKKiogICAgICBQYXRpZW50IGRvZXMgbm90IGhhdmUgb3JkZXJzIGZvciB0aGVyYXBpZXMgaW5kaWNhdGluZyBlbmQgb2YgbGlmZSBjYXJlCioqICAgICAgUGF0aWVudCBpcyBub3QgdW5kZXJnb2luZyBhY3RpdmUgY2FuY2VyIHRyZWF0bWVudDoKKiogICAgICAgIFBhdGllbnQgaGFzIGhhZCBhdCBsZWFzdCAyIGVuY291bnRlcnMgd2l0aGluIHRoZSBwYXN0IHllYXIgd2l0aCBhbnkgZGlhZ25vc2lzIG9mIGNhbmNlcgoqKiAgICBQYXRpZW50IGlzIG9waW9pZCBuYWl2ZToKKiogICAgICBObyBpbmRpY2F0aW9uIG9mIG9waW9pZCB1c2UgaW4gdGhlIHBhc3QgOTAgZGF5cyBmcm9tIGEgcHJlc2NyaXB0aW9uLCBzZWxmIHJlcG9ydCwgb3IgYSBkaXNwZW5zaW5nIGV2ZW50CioqICBUaGVuCioqICAgIFJlY29tbWVuZCB1c2Ugb2YgaW1tZWRpYXRlIHJlbGVhc2Ugb3Bpb2lkczoKKiogICAgICBXaWxsIHByZXNjcmliZSBpbW1lZGlhdGUgcmVsZWFzZSBvcGlvaWQgYW5hbGdlc2ljIHdpdGggYW1idWxhdG9yeSBtaXN1c2UgcG90ZW50aWFsCioqICAgICAgQmVuZWZpdHMgb3V0d2VpZ2ggcmlza3MsIHNub296ZSAzIG1vbnRocwoqKiAgICAgIE4vQSAtIHNlZSBjb21tZW50LCBzbm9vemUgMyBtb250aHMKKioKKi8KCi8vIE1FVEE6IFBsYW4gRGVmaW5pdGlvbjogaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9jZGMvb3Bpb2lkLWNkcy1yNC9QbGFuRGVmaW5pdGlvbi9vcGlvaWQtY2RzLTA0Cgpjb250ZXh0IFBhdGllbnQKCmRlZmluZSAiSW5jbHVzaW9uIFBlcmlvZCI6CiAgSW50ZXJ2YWxbVG9kYXkoKSAtIDkxIGRheXMsIFRvZGF5KCkgLSAxIGRheXNdCgpkZWZpbmUgIkVuY291bnRlciBQZXJpb2QiOgogIEludGVydmFsW1RvZGF5KCkgLSAxMiBtb250aHMgLSAxIGRheXMsIFRvZGF5KCkgLSAxIGRheXNdCgpkZWZpbmUgIkNocm9uaWMgUGFpbiBFeHRlbmRlZCBSZWxlYXNlIE9waW9pZCBBbmFsZ2VzaWMgd2l0aCBBbWJ1bGF0b3J5IE1pc3VzZSBQb3RlbnRpYWwgUHJlc2NyaXB0aW9ucyI6CiAgQ29tbW9uLiJBY3RpdmUgQW1idWxhdG9yeSBPcGlvaWQgUngiIEFtYnVsYXRvcnlPcGlvaWRQcmVzY3JpcHRpb24KICAgIHdoZXJlIFJvdXRpbmVzLiJJcyBDaHJvbmljIFBhaW4gUHJlc2NyaXB0aW9uPyIoQW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbikKICAgICAgYW5kIEFtYnVsYXRvcnlPcGlvaWRQcmVzY3JpcHRpb24ubWVkaWNhdGlvbiBpbiBDb21tb24uIkV4dGVuZGVkIHJlbGVhc2Ugb3Bpb2lkIHdpdGggYW1idWxhdG9yeSBtaXN1c2UgcG90ZW50aWFsIgoKZGVmaW5lICJQYXRpZW50IElzIEJlaW5nIFByZXNjcmliZWQgRXh0ZW5kZWQgUmVsZWFzZSBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIjoKICBleGlzdHMgKCJDaHJvbmljIFBhaW4gRXh0ZW5kZWQgUmVsZWFzZSBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIFByZXNjcmlwdGlvbnMiKQoKZGVmaW5lICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyI6CiAgIkluY2x1c2lvbiBDcml0ZXJpYSIKICAgIGFuZCBub3QgIkV4Y2x1c2lvbiBDcml0ZXJpYSIKCmRlZmluZSAiSW5jbHVzaW9uIENyaXRlcmlhIjoKICAiUGF0aWVudCBJcyBCZWluZyBQcmVzY3JpYmVkIEV4dGVuZGVkIFJlbGVhc2UgT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCIKICAgIGFuZCBSb3V0aW5lcy4iSXMgT3Bpb2lkIFJldmlldyBVc2VmdWw/IgogICAgYW5kIFJvdXRpbmVzLiJJcyBPcGlvaWQgTmFpdmU/IgoKZGVmaW5lICJFeGNsdXNpb24gQ3JpdGVyaWEiOgogIENvbW1vbi4iRW5kIG9mIExpZmUgQXNzZXNzbWVudCIKCmRlZmluZSAiR2V0IEluZGljYXRvciI6CiAgaWYgIklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IgogICAgdGhlbiAnd2FybmluZycKICBlbHNlIG51bGwKCmRlZmluZSAiR2V0IFN1bW1hcnkiOgogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyIKICAgIHRoZW4gJ1JlY29tbWVuZCB1c2Ugb2YgaW1tZWRpYXRlLXJlbGVhc2Ugb3Bpb2lkcyBpbnN0ZWFkIG9mIGV4dGVuZGVkIHJlbGVhc2UvbG9uZyBhY3Rpbmcgb3Bpb2lkcyB3aGVuIHN0YXJ0aW5nIHBhdGllbnQgb24gb3Bpb2lkcy4nCiAgZWxzZSBudWxsCgpkZWZpbmUgIkdldCBEZXRhaWwiOgogIGlmICJJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyIKICAgIHRoZW4gJ1RoZSBmb2xsb3dpbmcgbWVkaWNhdGlvbiByZXF1ZXN0cyhzKSByZWxlYXNlIHJhdGVzIHNob3VsZCBiZSByZS1ldmFsdWF0ZWQ6ICcgKyBDb21iaW5lKGZsYXR0ZW4oQ29tbW9uLkdldE1lZGljYXRpb25OYW1lcygiQ2hyb25pYyBQYWluIEV4dGVuZGVkIFJlbGVhc2UgT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCBQcmVzY3JpcHRpb25zIikpLCAnLCAnKQogIGVsc2UgbnVsbAo="
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSREC04PatientView"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OMTKLogicMK2020",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OMTKLogicMK2020</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OMTKData2020</span></p></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OMTKLogicMK2020 version '2.0.1'\n\n/*\nThis version of the OMTKLogic library uses the FHIR MedicationKnowledge Resource\nas the source for drug ingredient and strength information, rather than the\nOMTK data source.\n*/\n\nusing FHIR version '4.0.1'\n\ninclude OMTKData2020 version '2.0.1' called OMTKData\n\ncodesystem RxNorm: 'http://www.nlm.nih.gov/research/umls/rxnorm'\n\ncontext Patient\n\n/*\n  Normalizes the input units to UCUM units\n\n  Note guidance for UCUM presentation of medication units from SNOMED here:\n  https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjU3vLpicPTAhWFMGMKHRpOBUAQFggiMAA&amp;url=https%3A%2F%2Fconfluence.ihtsdotools.org%2Fdownload%2Fattachments%2F17859188%2FExpressing%2520Units%2520of%2520Measure%2520for%2520Medicinal%2520Products.doc%3Fapi%3Dv2&amp;usg=AFQjCNE5sboicqvJDUyXJ2im8VzBpgHE8A\n\n  The values listed here are the only ones currently present in the OMTK data\n\n  Based on the HL7 UCUM subset here:\n  http://download.hl7.de/documents/ucum/ucumdata.html\n*/\ndefine function ToUCUM(unit System.String):\n  case unit\n    when 'MG' then 'mg'\n    when 'MG/ACTUAT' then 'mg/{actuat}'\n    when 'MG/HR' then 'mg/h'\n    when 'MG/ML' then 'mg/mL'\n    else 'Error: unknown{' + unit + '}'\n  end\n\n/*\n  Calculates daily frequency given frequency within a period\n*/\ndefine function ToDaily(frequency System.Integer, period System.Quantity):\n  case period.unit\n    when 'h' then frequency * (24.0 / period.value)\n    when 'min' then frequency * (24.0 / period.value) * 60\n    when 's' then frequency * (24.0 / period.value) * 60 * 60\n    when 'd' then frequency * (24.0 / period.value) / 24\n    when 'wk' then frequency * (24.0 / period.value) / (24 * 7)\n    when 'mo' then frequency * (24.0 / period.value) / (24 * 30) /* assuming 30 days in month */\n    when 'a' then frequency * (24.0 / period.value) / (24 * 365) /* assuming 365 days in year */\n    else null\n  end\n\n/*\n  Returns true if the given dose form is a patch (transdermal system)\n*/\ndefine function IsPatch(doseFormCode System.Code):\n  ToInteger(doseFormCode.code) = 316987\n\n/*\n  Returns the conversion factor for the given ingredient\n\nOpioid (strength in mg except where noted)\tMME Conversion Factor*\nBuprenorphine, transdermal patch (MCG/HR)\t12.6\nBuprenorphine, tablet or film\t30\nBuprenorphine, film (MCG)\t0.03\nButorphanol\t7\nCodeine\t0.15\nDihydrocodeine\t0.25\nFentanyl, buccal/SL tabet or lozenge/troche (MCG)\t0.13\nFentanyl, film or oral spray (MCG)\t0.18\nFentanyl, nasal spray (MCG)\t0.16\nFentanyl, transdermal patch (MCG/HR)\t2.4\nHydrocodone\t1\nHydromorphone\t4\nLevomethadyl acetate\t8\nLevorphanol tartrate\t11\nMeperidine \t0.1\nMethadone\t3\n  1-20 mg/d 4\n  21-40 mg/d 8\n  41-60 mg/d 10\n  61-80 mg/d 12\nMorphine\t1\nOpium\t1 // NOTE: Not present as an ingredient in the RxNorm data\nOxycodone\t1.5\nOxymorphone\t3\nPentazocine\t0.37\nTapentadol\t0.4\nTramadol\t0.1\n\n*/\ndefine function GetConversionFactor(ingredientCode System.Code, dailyDose System.Quantity, doseFormCode System.Code):\n  case ToInteger(ingredientCode.code)\n    when 161 then 0  /*\tAcetaminophen */\n    when 1191 then 0 /*\tAspirin */\n    when 1223 then 0 /*\tAtropine */\n    when 1767 then 0 /*\tBrompheniramine */\n    when 1819 then ( /*\tBuprenorphine */\n      case\n        when ToInteger(doseFormCode.code) = 316987 then 12.6 /* Transdermal system */\n        else 30 /* Tablet or Film (or Film in MCG) */\n      end\n    )\n    when 1841 then 7 /*\tButorphanol */\n    when 1886 then 0 /*\tCaffeine */\n    when 2101 then 0 /*\tCarisoprodol */\n    when 2354 then 0 /*\tchlorcyclizine */\n    when 2400 then 0 /*\tChlorpheniramine */\n    when 2670 then 0.15 /*\tCodeine */\n    when 3423 then 4 /*\tHydromorphone */\n    when 3498 then 0 /*\tDiphenhydramine */\n    when 4337 then ( /*\tFentanyl */\n      case\n        when ToInteger(doseFormCode.code) in { 970789, 317007, 316992 } then 0.13 /* Buccal Tablet, Sublingual Tablet, Oral Lozenge */\n        when ToInteger(doseFormCode.code) = 858080 then 0.18 /* Buccal Film */\n        when ToInteger(doseFormCode.code) in { 126542, 346163 } then 0.16 /* Nasal Spray, Mucosal Spray */\n        when IsPatch(doseFormCode) then 2.4 /* Transdermal system */\n        else 1000 /* Really ought to be an error because it represents a previously unencountered dose form.... */\n      end\n    )\n    when 5032 then 0 /*\tGuaifenesin */\n    when 5489 then 1 /*\tHydrocodone */\n    when 5640 then 0 /*\tIbuprofen */\n    when 6102 then 0 /*\tKaolin */\n    when 6378 then 11 /*\tLevorphanol (NOTE: Given as Levorphanol tartrate in the CDC conversion table) */\n    when 6754 then 0.1 /*\tMeperidine */\n    when 6813 then ( /*\tMethadone */\n      case\n        when dailyDose.value between 1 and 20 then 4\n        when dailyDose.value between 21 and 40 then 8\n        when dailyDose.value between 41 and 60 then 10\n        when dailyDose.value &gt;= 61 then 12\n        else 1000 /* Really ought to be an error because it represents an unexpected dose range... */\n      end\n    )\n    when 7052 then 1 /*\tMorphine */\n    when 7242 then 0 /*\tNaloxone */\n    when 7243 then 0 /*\tNaltrexone */\n    when 7804 then 1.5 /*\tOxycodone */\n    when 7814 then 3 /*\tOxymorphone */\n    when 8001 then 0.37 /*\tPentazocine */\n    when 8163 then 0 /*\tPhenylephrine */\n    when 8175 then 0 /*\tPhenylpropanolamine */\n    when 8745 then 0 /*\tPromethazine */\n    when 8896 then 0 /*\tPseudoephedrine */\n    when 9009 then 0 /*\tPyrilamine */\n    when 10689 then 0.1 /*\tTramadol */\n    when 10849 then 0 /*\tTriprolidine */\n    when 19759 then 0 /*\tbromodiphenhydramine */\n    when 19860 then 0 /*\tbutalbital */\n    when 22696 then 0 /*\tdexbrompheniramine */\n    when 22697 then 0 /*\tdexchlorpheniramine */\n    when 23088 then 0.25 /*\tdihydrocodeine */\n    when 27084 then 0 /*\thomatropine */\n    when 35780 then 0 /*\tropivacaine */\n    when 237005 then 8 /*\tLevomethadyl (NOTE: given as Levomethadyl acetate in the CDC conversion table) */\n    when 636827 then 0 /*\tguaiacolsulfonate */\n    when 787390 then 0.4 /*\ttapentadol */\n    else 0\n  end\n\ndefine function EnsureMicrogramQuantity(strength System.Quantity):\n  if strength.value &lt; 0.1 and (PositionOf('mg', strength.unit) = 0) then\n    System.Quantity {\n      value: strength.value * 1000,\n      unit: 'mcg' + Substring(strength.unit, 2)\n    }\n  else\n    strength\n\n/*\n  Returns the non-surgical opioid ingredients and their strengths that\n  make up the drug identified by the given rxNormCode as a list of tuples:\n\n  List&lt;Tuple {\n    rxNormCode Code,\n    doseFormCode Code,\n    doseFormName String,\n    ingredientCode Code,\n    ingredientName String,\n    strength Quantity\n  }&gt;\n*/\n\n/*\nDrugIngredients:\n  List&lt;{\n    drugCode Integer,\n    drugName String,\n    doseFormCode Integer,\n    doseFormName String,\n    ingredientCode Integer,\n    ingredientName String,\n    strength String,\n    strengthValue Decimal,\n    strengthUnit String\n  }&gt;\n*/\ndefine function GetIngredients(rxNormCode System.Code):\n  OMTKData.DrugIngredients DI\n    where DI.drugCode = ToInteger(rxNormCode.code)\n    return {\n      rxNormCode: System.Code { code: ToString(DI.drugCode), system: 'http://www.nlm.nih.gov/research/umls/rxnorm', display: DI.drugName },\n      doseFormCode: System.Code { code: ToString(DI.doseFormCode), system: 'http://www.nlm.nih.gov/research/umls/rxnorm', display: DI.doseFormName },\n      doseFormName: DI.doseFormName,\n      ingredientCode: System.Code { code: ToString(DI.ingredientCode), system: 'http://www.nlm.nih.gov/research/umls/rxnorm', display: DI.ingredientName },\n      ingredientName: DI.ingredientName,\n      strength: EnsureMicrogramQuantity(\n          System.Quantity {\n            value: DI.strengthValue,\n            unit: ToUCUM(DI.strengthUnit)\n          }\n        )\n    }\n\n/* define function GetIngredients(rxNormCode Code):\n  flatten (\n    [MedicationKnowledge: rxNormCode] M\n      return\n        M.ingredient I\n          where I.code in &quot;Opioid Ingredients&quot; // TODO: Need a value set of opioid ingredients\n          return {\n            rxNormCode: M.code,\n            doseFormCode: M.doseForm, // TODO: MedicationKnowledge specifies SNOMED-CT dose forms here, would need to profile to RXNorm\n            doseFormName: M.doseForm.text,\n            ingredientCode: I.item as CodeableConcept, // TODO: Profile to code only\n            ingredientName: (I.item as CodeableConcept).text,\n            strength: EnsureMicrogramQuantity(I.strength.denominator) // TODO: Is this correct?\n          }\n  ) */\n\n/*\n  Calculates daily dose for a specific ingredient based on the ingredient strength, dose form, dose quantity, and daily frequency\n*/\ndefine function GetDailyDose(ingredientCode System.Code, strength System.Quantity, doseFormCode System.Code, doseQuantity System.Quantity, dosesPerDay System.Decimal):\n  case\n\t  /* if patch --&gt; daily dose = dose value (e.g, number patches with doseQuantity unit = &quot;patch&quot;) * per-hour strength */\n    when IsPatch(doseFormCode) then\n      /* buprenorphine or fentanyl patch */\n      if ToInteger(ingredientCode.code) in { 1819, 4337 } then\n        System.Quantity {\n          value: dosesPerDay * doseQuantity.value * strength.value,\n          unit: strength.unit\n        }\n      else\n        null\n\n    /* if dose unit in actual mass units (mg or mcg -- when it's a single med) --&gt; daily dose = numTimesPerDay * dose */\n    when doseQuantity.unit in { 'mg', 'mcg' } then\n      System.Quantity {\n        value: dosesPerDay * doseQuantity.value,\n        unit: doseQuantity.unit\n      }\n\n    /* if doseQuantity is in actual volume units (mL) --&gt; daily dose = numTimesPerDay * dose * strength */\n    when doseQuantity.unit = 'mL' and (PositionOf('/mL', strength.unit) = Length(strength.unit) - 3) then\n      System.Quantity {\n        value: dosesPerDay * doseQuantity.value * strength.value,\n        unit: Substring(strength.unit, 0, PositionOf('/', strength.unit))\n      }\n\n\t\t/* if doseQuantity is not in actual units (e.g., 1 tab, 1 spray -- when it's a combo med with a unit of tablet, or it's mg/actuat) --&gt;  daily dose = numTimesPerDay * dose value * strength value */\n    else\n      System.Quantity {\n        value: dosesPerDay * doseQuantity.value * strength.value,\n        unit: Substring(strength.unit, 0, PositionOf('/', strength.unit))\n      }\n  end\n\ndefine function GetMedicationName(rxNormCode System.Code):\n  if rxNormCode.display is null then\n    SingletonFrom(\n      OMTKData.DrugIngredients DI\n        where DI.drugCode = ToInteger(rxNormCode.code)\n        return DI.drugName\n    )\n    else rxNormCode.display\n\n/*\n  Builds a description for the daily dose for an ingredient\n*/\ndefine function GetDailyDoseDescription(ingredientCode System.Code, ingredientName System.String, strength System.Quantity, doseFormCode System.Code, doseFormName System.String, doseQuantity System.Quantity, dosesPerDay System.Decimal, dailyDose System.Quantity):\n  case\n    /* if patch */\n    when IsPatch(doseFormCode) then\n      /* buprenorphine or fentanyl patch */\n      if ToInteger(ingredientCode.code) in { 1819, 4337 } then\n        ingredientName + ' patch: ' + ToString(doseQuantity.value) + ' * ' + ToString(strength.value) + ' = ' + ToString(dailyDose.value)\n      else\n        null\n\n    /* if dose unit in actual mass units (mg or mcg -- when it's a single med) */\n    when doseQuantity.unit in { 'mg', 'mcg' } then\n      ingredientName + ' ' + doseFormName + ': ' + ToString(dosesPerDay) + '/d * ' + ToString(doseQuantity.value) + ' = ' + ToString(dailyDose.value)\n\n    /* if doseQuantity in actual volume units (mL) or not in actual units (e.g. 1 tab, 1 spray) */\n    else\n      ingredientName + ' ' + doseFormName + ': ' + ToString(dosesPerDay) + '/d * ' + ToString(doseQuantity.value) + ' * ' + ToString(strength.value) + ' = ' + ToString(dailyDose.value)\n  end\n\n/*\n  Calculates MMEs for the given input prescription information and returns it\n  as a list of tuples:\n\n  List&lt;Tuple {\n    rxNormCode Code,\n    doseFormCode Code,\n    doseQuantity Quantity,\n    dosesPerDay Decimal,\n    ingredientCode Code,\n    ingredientName String,\n    strength Quantity,\n    dailyDose Quantity,\n    dailyDoseDescription String,\n    conversionFactor Decimal,\n    mme Quantity\n  }&gt;\n*/\ndefine function CalculateMMEs(medications List&lt;Tuple { rxNormCode System.Code, doseQuantity System.Quantity, dosesPerDay System.Decimal }&gt;):\n  Flatten(\n    medications M\n      let Ingredients: GetIngredients(M.rxNormCode)\n      return\n        Ingredients I\n          let\n            adjustedDoseQuantity: EnsureMicrogramQuantity(M.doseQuantity),\n            dailyDose: GetDailyDose(I.ingredientCode, I.strength, I.doseFormCode, adjustedDoseQuantity, M.dosesPerDay),\n            factor: GetConversionFactor(I.ingredientCode, dailyDose, I.doseFormCode)\n          return {\n            rxNormCode: M.rxNormCode,\n            doseFormCode: I.doseFormCode,\n            doseQuantity: adjustedDoseQuantity,\n            dosesPerDay: M.dosesPerDay,\n            ingredientCode: I.ingredientCode,\n            ingredientName: I.ingredientName,\n            strength: I.strength,\n            dailyDose: dailyDose,\n            dailyDoseDescription: GetDailyDoseDescription(I.ingredientCode, I.ingredientName, I.strength, I.doseFormCode, I.doseFormName, adjustedDoseQuantity, M.dosesPerDay, dailyDose),\n            conversionFactor: factor,\n            mme: System.Quantity {\n              value: dailyDose.value * factor,\n              unit: dailyDose.unit + '/d'\n            }\n          }\n  )\n\n/* define TestCalculateMMEs:\n  CalculateMMEs({ { rxNormCode: Code '388508' from RxNorm, doseQuantity: Quantity { value: 1, unit: 'patch' }, dosesPerDay: 0.33 } }) */\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogicMK2020",
        "version": "2.0.1",
        "name": "OMTKLogicMK2020",
        "title": "Library - OMTK Data (2020)",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKData2020"
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OMTKLogicMK2020"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "OpioidCDSRoutines",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-OpioidCDSRoutines</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">2.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"7\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>ServiceRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/office-visit</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>PractitionerRole</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>category</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationDispense</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library OpioidCDSRoutines version '2.0.1'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude OpioidCDSCommon version '2.0.1' called Common\ninclude OpioidCDSCommonConfig version '2.0.1' called Config\n\ncontext Patient\n\n/*\n**  Routine #1\n**  Opioid Review Useful Routine\n**\n**  Definition              | Answer to Proceed   | Details                                      | Data (Terminology) Requirement\n**  ------------------------------------------------------------------------------------------------------------------------------------\n**  Age &lt; 18 years?         | No                  | Calculate age from date of birth; exclude    | Date of birth\n**                          |                     | patients with age less than 18 years at the  |\n**                          |                     | time of the prescription                     |\n**  ------------------------------------------------------------------------------------------------------------------------------------\n**  Limited life            | No                  | Look for documented findings consistent      | Limited life expectancy conditions\n**  expectancy conditions   |                     | with those listed in the limited life        |\n**  present?                |                     | expectancy value set (terminal illness, bad  |\n**                          |                     | prognosis, pre-terminal)                     |\n**  ------------------------------------------------------------------------------------------------------------------------------------\n**  Order for therapies     | No                  | Look for patients with an existing order for | Therapies indicating end of life care\n**  indicating end of life  |                     | therapies indicating end of life care        |\n**  care in past 90 days?   |                     | written within past 90 days                  |\n**  ------------------------------------------------------------------------------------------------------------------------------------\n**  Active cancer           | No                  | See sub-routine 3                            | See sub-routine 3\n**  treatment?              |                     |                                              |\n**  ------------------------------------------------------------------------------------------------------------------------------------\n**  Conditions Likely       | No                  | Look for patients with active conditions in  | Conditions likely terminal for opioid\n**  Terminal for opioid     |                     | the value set end-of-life-conditions         | prescribing\n**  prescribing present?    |                     |                                              |\n**  ------------------------------------------------------------------------------------------------------------------------------------\n**\n*/\n\ndefine &quot;Palliative Care Lookback Period&quot;:\n  Interval[Today() - 90 days, Today()]\n\ndefine &quot;Is Opioid Review Useful?&quot;:\n  not &quot;Patient Age Less Than 18&quot;\n    and not &quot;Conditions Indicating End Of Life Present&quot;\n    and not &quot;Order For Palliative Care In Past 90 Days&quot;\n    and not &quot;Is Active Cancer Treatment?&quot;\n    and not &quot;Conditions Including Cancer To Exclude Opioid Management Indicating End-Stage Disease Present&quot;\n\n\ndefine &quot;Patient Age Less Than 18&quot;:\n  Config.&quot;Age Less than 18 Years Is Enabled&quot;\n    and AgeInYearsAt(Today()) &lt; 18\n\ndefine &quot;Conditions Indicating End Of Life Present&quot;:\n  exists (\n    [Condition: category in Common.&quot;US Core Condition Category Codes&quot;] LLEC\n      where LLEC.code in Common.&quot;Limited life expectancy conditions&quot;\n        and exists (\n          LLEC.clinicalStatus.coding Coding\n            where FHIRHelpers.ToCode(Coding) ~ Common.&quot;Active Condition&quot;\n        )\n  )\n\ndefine &quot;Order For Palliative Care In Past 90 Days&quot;:\n  exists (\n    [ServiceRequest: Common.&quot;Therapies indicating end of life care&quot;] SR\n      where SR.status in { 'active', 'completed'}\n        and SR.intent != null\n        and FHIRHelpers.ToDateTime(SR.authoredOn) during day of &quot;Palliative Care Lookback Period&quot;\n  )\n\ndefine &quot;Conditions Including Cancer To Exclude Opioid Management Indicating End-Stage Disease Present&quot;:\n  Config.&quot;End-Stage Disease Criteria Enabled&quot;\n    and exists (\n      [Condition: category in Common.&quot;US Core Condition Category Codes&quot;] EOLC\n        where EOLC.code in Common.&quot;Conditions likely terminal for opioid prescribing&quot;\n          and exists (\n            EOLC.clinicalStatus.coding Coding\n              where FHIRHelpers.ToCode(Coding) ~ Common.&quot;Active Condition&quot;\n          )\n    )\n\n// End of Opioid Review Useful Routine\n\n/*\n**  Routine #2\n**  Opioid Naive Routine\n**\n**  Definition                    | Answer to Proceed   | Details                                           | Data (Terminology) Requirement\n**  ----------------------------------------------------------------------------------------------------------------------------------------\n**  Opioid analgesics with        | No                  | Look for an existing prescription (order) for     | Opioid analgesics with\n**  ambulatory misuse potential   |                     | opioid that is in the value set for opioid with   | ambulatory misuse potential\n**  prescription in past 90 days  |                     | ambulatory abuse potential authored               |\n**  including today               |                     | within the past 90 days (including today)         |\n**  ----------------------------------------------------------------------------------------------------------------------------------------\n**  Opioid analgesics with        | No                  | Look for evidence of active medication on         | Opioid analgesics with\n**  ambulatory misuse potential   |                     | the medication list that is in the value set      | ambulatory misuse potential\n**  reported in past 90 days      |                     | for opioid with ambulatory care abuse             |\n**  including today*              |                     | potential                                         |\n**  ----------------------------------------------------------------------------------------------------------------------------------------\n**  Opioid analgesics with        | No                  | Look for evidence of a dispensing event for       | Opioid analgesics with\n**  ambulatory misuse potential   |                     | medication that is in the value set for opioid    | ambulatory misuse potential\n**  dispensing event in past 90   |                     | with ambulatory use potential occurring           |\n**  days including today*         |                     | within the past 90 days (including today)         |\n**  ----------------------------------------------------------------------------------------------------------------------------------------\n**  *Future consideration: Current algorithm addresses only orders (prescriptions).\n**\n**  Note – orders use RxNorm, but medication lists and dispensed medication will\n**  require an NDC value set and/or local mapping of NDC to RxNorm to enable this element\n**\n*/\n\ndefine &quot;Prescription/Dispense Inclusion Period&quot;:\n    Interval[Now() - 89 days, Now()]\n\ndefine &quot;Report Inclusion Period&quot;:\n    Interval[Now() - 90 days, Now())\n\n// NOTE: MedicationStatement-dependent logic comment out due to bug in Publisher not supporting MedicationStatement in AllTypes.\ndefine &quot;Is Opioid Naive?&quot;:\n    not (&quot;Has Opioid RX with Ambulatory Abuse Potential In Past 90 Days&quot;)\n    /* and not (&quot;Has Report of Opioid with Ambulatory Care Abuse Potential Reported in Past 90 Days&quot;) */\n    and not (&quot;Has Opioid Dispense with Ambulatory Abuse Potential In Past 90 Days&quot;)\n\ndefine &quot;Opioid RX with Ambulatory Abuse Potential In Past 90 Days&quot;:\n  Common.&quot;Active Ambulatory Opioid Rx&quot; Rx\n      where Rx.authoredOn during day of &quot;Prescription/Dispense Inclusion Period&quot;\n\ndefine &quot;Has Opioid RX with Ambulatory Abuse Potential In Past 90 Days&quot;:\n    Config.&quot;Opioid Naive Prescription Condition Is Enabled&quot;\n        and exists (&quot;Opioid RX with Ambulatory Abuse Potential In Past 90 Days&quot;)\n\n// NOTE: 2020-02-05: Review direction of MedicationStatement resource (US-Core focusing on MedicationRequest i/o Statement)\n// NOTE: 2020-04-21: MedicationStatement a) Shouldn't be use since guidance/direction from USCore is targeting MedicationUse in R5, and b) Breaks in the publisher\n/* define &quot;Reports of Opioid with Ambulatory Care Abuse Potential Reported in Past 90 Days&quot;:\n    [MedicationStatement: Common.&quot;Opioid analgesics with ambulatory misuse potential&quot;] Statement\n        where Statement.status in {'active', 'completed'}\n            and Statement.effective during day of &quot;Report Inclusion Period&quot; */\n\n/* define &quot;Has Report of Opioid with Ambulatory Care Abuse Potential Reported in Past 90 Days&quot;:\n    Config.&quot;Opioid Naive Report Condition Is Enabled&quot;\n        and exists (&quot;Reports of Opioid with Ambulatory Care Abuse Potential Reported in Past 90 Days&quot;) */\n\ndefine &quot;Opioid Dispense with Ambulatory Abuse Potential In Past 90 Days&quot;:\n    [MedicationDispense: Common.&quot;Opioid analgesics with ambulatory misuse potential&quot;] OpioidDispense\n        where OpioidDispense.whenHandedOver during day of &quot;Prescription/Dispense Inclusion Period&quot;\n            and OpioidDispense.status = 'completed'\n\ndefine &quot;Has Opioid Dispense with Ambulatory Abuse Potential In Past 90 Days&quot;:\n    Config.&quot;Opioid Naive Dispense Condition Is Enabled&quot;\n        and exists (&quot;Opioid Dispense with Ambulatory Abuse Potential In Past 90 Days&quot;)\n\n// End of Opioid Naive Routine\n\n/*\n**  Routine #3\n**  Active Cancer Treatment Routine\n**\n**  Definition                    | Answer to Proceed   | Details                                    | Data (Terminology) Requirement\n**  ---------------------------------------------------------------------------------------------------------------------------------\n**  Two office visits within the  | No                  | Look for a minimum of two distinct         | Office Visit\n**  past 12 months                |                     | encounters within 12 months of the date    |\n**                                |                     | of the current visit for which each of the |\n**                                |                     | following is true:                         |\n**                                |                     |   - the encounter diagnosis (primary or    |\n**                                |                     |     secondary or co-morbidity diagnosis)   |\n**                                |                     |     is listed in the CDC Malignant Cancer  |\n**                                |                     |     Conditions value set                   |\n**  ---------------------------------------------------------------------------------------------------------------------------------\n**  Office visits with an         | No                  | The encounter is performed by an           | Oncology specialty\n**  oncology specialist           |                     | oncologist as defined in the oncology      | designations (NUCC)\n**  present                       |                     | specialty designations using the           |\n**                                |                     | National Uniform Claim Committee           |\n**                                |                     | (NUCC) classifications                     |\n**  ---------------------------------------------------------------------------------------------------------------------------------\n**  Office visits including CDC   | No                  | The encounter diagnosis (primary or        | CDC malignant cancer\n**  malignant cancer              |                     | secondary or co-morbidity diagnosis)       | conditions\n**  condition                     |                     | is listed in the CDC Malignant Cancer      |\n**                                |                     | Conditions value set                       |\n**  ----------------------------------------------------------------------------------------------------------------------------------\n**\n*/\n\ndefine &quot;Encounter Period&quot;:\n  Interval[Now() - 12 months, Now())\n\ndefine &quot;Is Active Cancer Treatment?&quot;:\n  Config.&quot;Active Cancer Treatment Encounters Condition Is Enabled&quot;\n    and &quot;Has Two or More Encounters with Cancer Diagnosis During Encounter Period&quot;\n\ndefine &quot;Active Cancer Diagnoses&quot;:\n  [Condition: category in Common.&quot;US Core Condition Category Codes&quot;] C\n    where C.code in Common.&quot;CDC malignant cancer conditions&quot;\n\ndefine &quot;Oncologist Practitioner Roles&quot;:\n  [PractitionerRole] PractitionerRole\n    where exists (\n      PractitionerRole.specialty Specialty\n        where Specialty in Common.&quot;Oncology specialty designations (NUCC)&quot;\n    )\n\ndefine &quot;Encounters with Cancer Diagnosis During Encounter Period&quot;:\n  [Encounter: Common.&quot;Office Visit&quot;] Encounter\n    where date from Encounter.period.&quot;start&quot;.value in day of &quot;Encounter Period&quot;\n      and exists (\n        Encounter.diagnosis EncounterDiagnosis\n          with &quot;Active Cancer Diagnoses&quot; CancerDiagnosis\n          such that EndsWith(EncounterDiagnosis.condition.reference, CancerDiagnosis.id)\n      )\n      and exists (\n        Encounter.participant EncounterParticipant\n          where EncounterParticipant.type in Common.&quot;Oncology specialty designations (NUCC)&quot;\n            or exists (\n              &quot;Oncologist Practitioner Roles&quot; PractitionerRole\n                where EndsWith(EncounterParticipant.individual.reference, PractitionerRole.id)\n            )\n      )\n\ndefine &quot;Number of Enounters with Cancer Diagnosis During Encounter Period&quot;:\n  Count (&quot;Encounters with Cancer Diagnosis During Encounter Period&quot;)\n\ndefine &quot;Has Two or More Encounters with Cancer Diagnosis During Encounter Period&quot;:\n  &quot;Number of Enounters with Cancer Diagnosis During Encounter Period&quot; &gt;= 2\n\n// End of Active Cancer Treatment Routine\n\n/*\n**  Routine #4\n**  For Chronic Pain Routine\n**\n**  Definition                  | Answer to Proceed   | Details                                        | Data (Terminology) Requirement\n**  -----------------------------------------------------------------------------------------------------------------------------------\n**  Order for opioid analgesic  | Yes                 | Order for opioid analgesics with ambulatory    | Opioid analgesics with\n**  with expected supply        |                     | misuse potential with a supply duration of &gt;=  | ambulatory misuse potential\n**  duration &gt;= 28 days         |                     | 28 days                                        |\n**  -----------------------------------------------------------------------------------------------------------------------------------\n**\n*/\n\ndefine function &quot;Is Acute Pain Prescription?&quot;(prescription FHIR.MedicationRequest):\n  (\n    prescription.dispenseRequest is not null\n      and prescription.dispenseRequest.expectedSupplyDuration is not null\n      and Common.GetDurationInDays(prescription.dispenseRequest.expectedSupplyDuration) &gt;= 28\n  )\n\n// End of For Chronic Pain Routine\n\n/*\n**  Routine #5\n**  For Acute Pain Routine\n**\n**  Definition                  | Answer to Proceed   | Details                                        | Data (Terminology) Requirement\n**  -----------------------------------------------------------------------------------------------------------------------------------\n**  Order for opioid analgesics | Yes                 | Look for an existing prescription (order) for  | Opioid analgesics with\n**  with ambulatory misuse      |                     | opioid analgesics with ambulatory abuse        | ambulatory misuse potential\n**  potential of duration &lt; 28  |                     | potential of duration &lt; 28 days                |\n**  days                        |                     |                                                |\n**  -----------------------------------------------------------------------------------------------------------------------------------\n**\n*/\n\ndefine function &quot;Is Acute Pain Prescription?&quot;(prescription FHIR.MedicationRequest):\n  prescription.dispenseRequest is not null\n    and prescription.dispenseRequest.expectedSupplyDuration is not null\n    and Common.GetDurationInDays( prescription.dispenseRequest.expectedSupplyDuration ) &lt; 28\n\n// End of For Acute Pain Routine\n\n// TODO: Include logic for dispensing and patient-reported events\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
        },
        "contained": [
          {
            "resourceType": "Device",
            "id": "cqf-tooling",
            "meta": {
              "profile": [
                "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
              ]
            },
            "type": {
              "coding": [
                {
                  "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
                  "code": "tooling"
                }
              ]
            },
            "version": [
              {
                "value": "1.2.0-SNAPSHOT"
              }
            ]
          }
        ],
        "extension": [
          {
            "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
            "valueReference": {
              "reference": "#cqf-tooling"
            }
          }
        ],
        "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines",
        "version": "2.0.1",
        "name": "OpioidCDSRoutines",
        "title": "Library - OpioidCDS Routines",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/library-type",
              "code": "logic-library"
            }
          ]
        },
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": "http://hl7.org/fhir/Library/FHIRHelpers"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon"
          },
          {
            "type": "depends-on",
            "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig"
          }
        ],
        "dataRequirement": [
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "category",
                "valueSet": "http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category"
              }
            ]
          },
          {
            "type": "ServiceRequest",
            "codeFilter": [
              {
                "path": "code",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/office-visit"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "category",
                "valueSet": "http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category"
              }
            ]
          },
          {
            "type": "PractitionerRole"
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "category",
                "valueSet": "http://hl7.org/fhir/us/core/ValueSet/us-core-condition-category"
              }
            ]
          },
          {
            "type": "MedicationDispense",
            "codeFilter": [
              {
                "path": "medication",
                "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "Library/OpioidCDSRoutines"
      }
    }
  ]
}
