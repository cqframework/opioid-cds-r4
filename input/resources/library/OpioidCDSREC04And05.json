{
  "resourceType": "Library",
  "id": "OpioidCDSREC04And05",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  }, {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC04And05",
  "version": "2022.1.0",
  "name": "OpioidCDSREC04And05",
  "title": "Library - Recommendations #4 and #5 - Lowest Effective Dose",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Common",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon|2022.1.0"
  }, {
    "type": "depends-on",
    "display": "Library Config",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig|2022.1.0"
  }, {
    "type": "depends-on",
    "display": "Library Routines",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines|2022.1.0"
  }, {
    "type": "depends-on",
    "display": "Library MMECalculator",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/MMECalculator|3.0.0"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Common",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon|2022.1.0"
  }, {
    "type": "depends-on",
    "display": "Library OMTKLogic",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogic|3.0.0"
  }, {
    "type": "depends-on",
    "display": "Library OMTKData",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/OMTKData|3.0.0"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library ConversionFactors",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/ConversionFactors|3.0.0"
  }, {
    "type": "depends-on",
    "display": "Library CDCMMEClinicalConversionFactors",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/CDCMMEClinicalConversionFactors|3.0.0"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Code system Usage Context Type",
    "resource": "http://terminology.hl7.org/CodeSystem/usage-context-type"
  }, {
    "type": "depends-on",
    "display": "Code system CDC MME Usage Context Codes",
    "resource": "http://fhir.org/guides/cdc/opioid-mme-r4/CodeSystem/CDCMMEUsageContextCodes"
  }, {
    "type": "depends-on",
    "display": "Value set Opioid analgesics with ambulatory misuse potential",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"
  }, {
    "type": "depends-on",
    "display": "Value set Community",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/medicationrequest-category-community"
  }, {
    "type": "depends-on",
    "display": "Value set Encounter Diagnosis Condition Category",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-encounter-diagnosis-category"
  }, {
    "type": "depends-on",
    "display": "Value set Problem List Condition Category",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-problem-list-category"
  }, {
    "type": "depends-on",
    "display": "Value set US Core Health Concern Condition Category",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-us-core-health-concern-category"
  }, {
    "type": "depends-on",
    "display": "Value set Limited life expectancy conditions",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions"
  }, {
    "type": "depends-on",
    "display": "Value set Active Condition",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-clinical-status-active"
  }, {
    "type": "depends-on",
    "display": "Value set Therapies indicating end of life care",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care"
  }, {
    "type": "depends-on",
    "display": "Value set Conditions likely terminal for opioid prescribing",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing"
  }, {
    "type": "depends-on",
    "display": "Value set Hospice Procedure Codes",
    "resource": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
  } ],
  "parameter": [ {
    "name": "ContextPrescriptions",
    "use": "in",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "ErrorLevel",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "ConversionFactorSupplementName",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Chronic Pain Opioid Analgesic with Ambulatory Misuse Potential Prescriptions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Total MME",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Taper Now",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Consider Tapering",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Patient Is Being Prescribed Opioid Analgesic with Ambulatory Misuse Potential",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Inclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Exclusion Criteria",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Is Recommendation Applicable?",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Get Indicator",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Get Summary",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Get Detail",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Medication",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Medication" ],
    "mustSupport": [ "id" ],
    "codeFilter": [ {
      "path": "id"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "category" ],
    "codeFilter": [ {
      "path": "category",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-encounter-diagnosis-category"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "category" ],
    "codeFilter": [ {
      "path": "category",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-problem-list-category"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "category" ],
    "codeFilter": [ {
      "path": "category",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/condition-us-core-health-concern-category"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "mustSupport": [ "status", "intent", "authoredOn", "code" ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status", "status.value" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "mustSupport": [ "code", "status", "status.value" ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "period", "period.start", "status", "status.value" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGxpYnJhcnkgeG1sbnM9InVybjpobDctb3JnOmVsbTpyMSIgeG1sbnM6dD0idXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczpmaGlyPSJodHRwOi8vaGw3Lm9yZy9maGlyIiB4bWxuczpxZG00Mz0idXJuOmhlYWx0aGl0LWdvdjpxZG06djRfMyIgeG1sbnM6cWRtNTM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY1XzMiIHhtbG5zOmE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSI+CiAgIDxhbm5vdGF0aW9uIHRyYW5zbGF0b3JWZXJzaW9uPSIyLjEuMCIgdHJhbnNsYXRvck9wdGlvbnM9IkVuYWJsZUFubm90YXRpb25zLEVuYWJsZUxvY2F0b3JzLERpc2FibGVMaXN0RGVtb3Rpb24sRGlzYWJsZUxpc3RQcm9tb3Rpb24iIHhzaTp0eXBlPSJhOkNxbFRvRWxtSW5mbyIvPgogICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgPGE6cyByPSI3NCI+CiAgICAgICAgIDxhOnM+bGlicmFyeSBPcGlvaWRDRFNSRUMwNEFuZDA1IHZlcnNpb24gJzIwMjIuMS4wJzwvYTpzPgogICAgICA8L2E6cz4KICAgPC9hbm5vdGF0aW9uPgogICA8aWRlbnRpZmllciBpZD0iT3Bpb2lkQ0RTUkVDMDRBbmQwNSIgc3lzdGVtPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzIiB2ZXJzaW9uPSIyMDIyLjEuMCIvPgogICA8c2NoZW1hSWRlbnRpZmllciBpZD0idXJuOmhsNy1vcmc6ZWxtIiB2ZXJzaW9uPSJyMSIvPgogICA8dXNpbmdzPgogICAgICA8ZGVmIGxvY2FsSWRlbnRpZmllcj0iU3lzdGVtIiB1cmk9InVybjpobDctb3JnOmVsbS10eXBlczpyMSIvPgogICAgICA8ZGVmIGxvY2FsSWQ9IjEiIGxvY2F0b3I9IjM6MS0zOjI2IiBsb2NhbElkZW50aWZpZXI9IkZISVIiIHVyaT0iaHR0cDovL2hsNy5vcmcvZmhpciIgdmVyc2lvbj0iNC4wLjEiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSIxIj4KICAgICAgICAgICAgICAgPGE6cz51c2luZyA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cz4KICAgICAgICAgICAgICAgICAgPGE6cz5GSElSPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzPiB2ZXJzaW9uICc0LjAuMSc8L2E6cz4KICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgIDwvYW5ub3RhdGlvbj4KICAgICAgPC9kZWY+CiAgIDwvdXNpbmdzPgogICA8aW5jbHVkZXM+CiAgICAgIDxkZWYgbG9jYWxJZD0iMiIgbG9jYXRvcj0iNToxLTU6NTYiIGxvY2FsSWRlbnRpZmllcj0iQ29tbW9uIiBwYXRoPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzL09waW9pZENEU0NvbW1vbiIgdmVyc2lvbj0iMjAyMi4xLjAiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSIyIj4KICAgICAgICAgICAgICAgPGE6cz5pbmNsdWRlIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzPgogICAgICAgICAgICAgICAgICA8YTpzPk9waW9pZENEU0NvbW1vbjwvYTpzPgogICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cz4gdmVyc2lvbiAnMjAyMi4xLjAnIGNhbGxlZCBDb21tb248L2E6cz4KICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgIDwvYW5ub3RhdGlvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iMyIgbG9jYXRvcj0iNjoxLTY6NjIiIGxvY2FsSWRlbnRpZmllcj0iQ29uZmlnIiBwYXRoPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzL09waW9pZENEU0NvbW1vbkNvbmZpZyIgdmVyc2lvbj0iMjAyMi4xLjAiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSIzIj4KICAgICAgICAgICAgICAgPGE6cz5pbmNsdWRlIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzPgogICAgICAgICAgICAgICAgICA8YTpzPk9waW9pZENEU0NvbW1vbkNvbmZpZzwvYTpzPgogICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cz4gdmVyc2lvbiAnMjAyMi4xLjAnIGNhbGxlZCBDb25maWc8L2E6cz4KICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgIDwvYW5ub3RhdGlvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iNCIgbG9jYXRvcj0iNzoxLTc6NjAiIGxvY2FsSWRlbnRpZmllcj0iUm91dGluZXMiIHBhdGg9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvY2RjL29waW9pZC1jZHMvT3Bpb2lkQ0RTUm91dGluZXMiIHZlcnNpb249IjIwMjIuMS4wIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iNCI+CiAgICAgICAgICAgICAgIDxhOnM+aW5jbHVkZSA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cz4KICAgICAgICAgICAgICAgICAgPGE6cz5PcGlvaWRDRFNSb3V0aW5lczwvYTpzPgogICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cz4gdmVyc2lvbiAnMjAyMi4xLjAnIGNhbGxlZCBSb3V0aW5lczwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBsb2NhbElkPSI1IiBsb2NhdG9yPSIxMDoxLTEwOjU4IiBsb2NhbElkZW50aWZpZXI9Ik1NRUNhbGN1bGF0b3IiIHBhdGg9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvY2RjL29waW9pZC1jZHMvTU1FQ2FsY3VsYXRvciIgdmVyc2lvbj0iMy4wLjAiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSI1Ij4KICAgICAgICAgICAgICAgPGE6cz4vKmluY2x1ZGUgZmhpci5jZGMuJnF1b3Q7b3Bpb2lkLW1tZS1yNCZxdW90Oy5NTUVDYWxjdWxhdG9yIHZlcnNpb24gJzMuMC4wJyBjYWxsZWQgTU1FQ2FsY3VsYXRvcgogKi8KaW5jbHVkZSA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cz4KICAgICAgICAgICAgICAgICAgPGE6cz5NTUVDYWxjdWxhdG9yPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzPiB2ZXJzaW9uICczLjAuMCcgY2FsbGVkIE1NRUNhbGN1bGF0b3I8L2E6cz4KICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgIDwvYW5ub3RhdGlvbj4KICAgICAgPC9kZWY+CiAgIDwvaW5jbHVkZXM+CiAgIDxwYXJhbWV0ZXJzPgogICAgICA8ZGVmIGxvY2FsSWQ9IjgiIGxvY2F0b3I9IjU3OjEtNTc6NTQiIG5hbWU9IkNvbnRleHRQcmVzY3JpcHRpb25zIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iOCI+CiAgICAgICAgICAgICAgIDxhOnM+LyoKKioKKiogIFJlY29tbWVuZGF0aW9uICM0CioqICAgIFdoZW4gb3Bpb2lkcyBhcmUgaW5pdGlhdGVkIGZvciBvcGlvaWQtbmHDr3ZlIHBhdGllbnRzIHdpdGggYWN1dGUsIHN1YmFjdXRlLCBvciBjaHJvbmljIHBhaW4sIAoqKiAgICBjbGluaWNpYW5zIHNob3VsZCBwcmVzY3JpYmUgdGhlIGxvd2VzdCBlZmZlY3RpdmUgZG9zYWdlLiBJZiBvcGlvaWRzIGFyZSBjb250aW51ZWQgZm9yIAoqKiAgICBzdWJhY3V0ZSBvciBjaHJvbmljIHBhaW4sIGNsaW5pY2lhbnMgc2hvdWxkIHVzZSBjYXV0aW9uIHdoZW4gcHJlc2NyaWJpbmcgb3Bpb2lkcyBhdCBhbnkgZG9zYWdlLCAKKiogICAgc2hvdWxkIGNhcmVmdWxseSBldmFsdWF0ZSBpbmRpdmlkdWFsIGJlbmVmaXRzIGFuZCByaXNrcyB3aGVuIGNvbnNpZGVyaW5nIGluY3JlYXNpbmcgZG9zYWdlLCBhbmQgCioqICAgIHNob3VsZCBhdm9pZCBpbmNyZWFzaW5nIGRvc2FnZSBhYm92ZSBsZXZlbHMgbGlrZWx5IHRvIHlpZWxkIGRpbWluaXNoaW5nIHJldHVybnMgaW4gYmVuZWZpdHMgCioqICAgIHJlbGF0aXZlIHRvIHJpc2tzIHRvIHBhdGllbnRzIChyZWNvbW1lbmRhdGlvbiBjYXRlZ29yeTogQTsgZXZpZGVuY2UgdHlwZTogMykKKiogIFJlY29tbWVuZGF0aW9uICM1CioqICAgIEZvciBwYXRpZW50cyBhbHJlYWR5IHJlY2VpdmluZyBvcGlvaWQgdGhlcmFweSwgY2xpbmljaWFucyBzaG91bGQgY2FyZWZ1bGx5IHdlaWdoIGJlbmVmaXRzIGFuZCAKKiogICAgcmlza3MgYW5kIGV4ZXJjaXNlIGNhcmUgd2hlbiBjaGFuZ2luZyBvcGlvaWQgZG9zYWdlLiBJZiBiZW5lZml0cyBvdXR3ZWlnaCByaXNrcyBvZiBjb250aW51ZWQgCioqICAgIG9waW9pZCB0aGVyYXB5LCBjbGluaWNpYW5zIHNob3VsZCB3b3JrIGNsb3NlbHkgd2l0aCBwYXRpZW50cyB0byBvcHRpbWl6ZSBub25vcGlvaWQgdGhlcmFwaWVzIAoqKiAgICB3aGlsZSBjb250aW51aW5nIG9waW9pZCB0aGVyYXB5LiBJZiBiZW5lZml0cyBkbyBub3Qgb3V0d2VpZ2ggcmlza3Mgb2YgY29udGludWVkIG9waW9pZCB0aGVyYXB5LCAKKiogICAgY2xpbmljaWFucyBzaG91bGQgb3B0aW1pemUgb3RoZXIgdGhlcmFwaWVzIGFuZCB3b3JrIGNsb3NlbHkgd2l0aCBwYXRpZW50cyB0byBncmFkdWFsbHkgdGFwZXIgdG8gCioqICAgIGxvd2VyIGRvc2FnZXMgb3IsIGlmIHdhcnJhbnRlZCBiYXNlZCBvbiB0aGUgaW5kaXZpZHVhbCBjaXJjdW1zdGFuY2VzIG9mIHRoZSBwYXRpZW50LCBhcHByb3ByaWF0ZWx5IAoqKiAgICB0YXBlciBhbmQgZGlzY29udGludWUgb3Bpb2lkcy4gVW5sZXNzIHRoZXJlIGFyZSBpbmRpY2F0aW9ucyBvZiBhIGxpZmUtdGhyZWF0ZW5pbmcgaXNzdWUgc3VjaCBhcyAKKiogICAgd2FybmluZyBzaWducyBvZiBpbXBlbmRpbmcgb3ZlcmRvc2UgKGUuZy4sIGNvbmZ1c2lvbiwgc2VkYXRpb24sIG9yIHNsdXJyZWQgc3BlZWNoKSwgb3Bpb2lkIHRoZXJhcHkgCioqICAgIHNob3VsZCBub3QgYmUgZGlzY29udGludWVkIGFicnVwdGx5LCBhbmQgY2xpbmljaWFucyBzaG91bGQgbm90IHJhcGlkbHkgcmVkdWNlIG9waW9pZCBkb3NhZ2VzIGZyb20gCioqICAgIGhpZ2hlciBkb3NhZ2VzIChyZWNvbW1lbmRhdGlvbiBjYXRlZ29yeTogQjsgZXZpZGVuY2UgdHlwZTogNCkuCioqCioqICBXaGVuCioqICAgIFByb3ZpZGVyIGlzIHByZXNjcmliaW5nIGFuIG9waW9pZCBhbmFsZ2VzaWMgd2l0aCBhbWJ1bGF0b3J5IG1pc3VzZSBwb3RlbnRpYWwgaW4gdGhlIG91dHBhdGllbnQgc2V0dGluZwoqKiAgICBPcGlvaWQgcmV2aWV3IGlzIHVzZWZ1bCBmb3IgdGhpcyBwYXRpZW50OgoqKiAgICAgIFBhdGllbnQgaXMgMTggb3Igb3ZlcgoqKiAgICAgIFBhdGllbnQgZG9lcyBub3QgaGF2ZSBldmlkZW5jZSBvZiBzaWNrbGUgY2VsbCBkaXNlYXNlCioqICAgICAgUGF0aWVudCBkb2VzIG5vdCBoYXZlIGZpbmRpbmdzIGluZGljYXRpbmcgbGltaXRlZCBsaWZlIGV4cGVjdGFuY3kKKiogICAgICBQYXRpZW50IGRvZXMgbm90IGhhdmUgb3JkZXJzIGZvciB0aGVyYXBpZXMgaW5kaWNhdGluZyBlbmQgb2YgbGlmZSBjYXJlCioqICAgICAgUGF0aWVudCBpcyBub3QgdW5kZXJnb2luZyBhY3RpdmUgY2FuY2VyIHRyZWF0bWVudDoKKiogICAgICAgIFBhdGllbnQgaGFzIGhhZCBhdCBsZWFzdCAyIG9mZmljZSB2aXNpdHMgd2l0aGluIHRoZSBwYXN0IDEyIG1vbnRocyB3aXRoIGFuIG9uY29sb2d5IHNwZWNpYWxpc3QgcHJlc2VudCwgb3IKKiogICAgICAgIFBhdGllbnQgaGFzIGhhZCBhdCBsZWFzdCAyIG9mZmljZSB2aXNpdHMgd2l0aGluIHRoZSBwYXN0IDEyIG1vbnRocyB3aXRoIGEgQ0RDIG1hbGlnbmFudCBjYW5jZXIgY29uZGl0aW9uIGRpYWdub3NpcwoqKiAgICAgIFBhdGllbnQgZG9lcyBub3QgaGF2ZSBjb25kaXRpb25zIGxpa2VseSB0ZXJtaW5hbCBmb3Igb3Bpb2lkIHByZXNjcmliaW5nIHByZXNlbnQKKiogICAgUGF0aWVudCBNb3JwaGluZSBNaWxsaWdyYW0gRXF1aXZhbGVudCAoTU1FKSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gNTAKKiogIFRoZW4KKiogICAgQ2FsaWJyYXRlIHRvIExvd2VzdCBPcGlvaWQgRG9zZSBOZWVkZWQgZm9yIEV4cGVjdGVkIFJlc3VsdHMgYW5kIEV4ZXJjaXNlIENhcmUgV2hlbiBDaGFuZ2luZyBPcGlvaWQgRG9zYWdlczoKKiogICAgICBEb2N1bWVudCAtIFdpbGwgcHJlc2NyaWJlIGEgbG93ZXIgZG9zZQoqKiAgICAgIERvY3VtZW50IC0gV2lsbCBjYWxpYnJhdGUgYSBncmFkdWFsIGNoYW5nZSBpbiBkb3NhZ2UKKiogICAgICBTbm9vemUgLSBCZW5lZml0cyBvdXR3ZWlnaCByaXNrcywgc25vb3plIDMgbW9udGhzCioqICAgICAgU25vb3plIC0gU2hvcnQgdGVybSBiZW5lZml0cyBvdXR3ZWlnaCByaXNrcywgc25vb3plIDEgbW9udGgKKiogICAgICBTbm9vemUgLSBOL0EgYWRkIGNvbW1lbnQsIHNub296ZSAzIG1vbnRocwoqKgoqLwoKLy8gTUVUQTogUGxhbiBEZWZpbml0aW9uOiBodHRwOi8vZmhpci5vcmcvZ3VpZGVzL2NkYy9vcGlvaWQtY2RzLXI0L1BsYW5EZWZpbml0aW9uL29waW9pZC1jZHMtMDQtMDVwYXJhbWV0ZXIgQ29udGV4dFByZXNjcmlwdGlvbnMgPC9hOnM+CiAgICAgICAgICAgICAgIDxhOnMgcj0iNyI+CiAgICAgICAgICAgICAgICAgIDxhOnM+TGlzdCZsdDs8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI2Ij4KICAgICAgICAgICAgICAgICAgICAgPGE6cz5NZWRpY2F0aW9uUmVxdWVzdDwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cz4+PC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8cGFyYW1ldGVyVHlwZVNwZWNpZmllciBsb2NhbElkPSI3IiBsb2NhdG9yPSI1NzozMi01Nzo1NCIgeHNpOnR5cGU9Ikxpc3RUeXBlU3BlY2lmaWVyIj4KICAgICAgICAgICAgPGVsZW1lbnRUeXBlIGxvY2FsSWQ9IjYiIGxvY2F0b3I9IjU3OjM3LTU3OjUzIiBuYW1lPSJmaGlyOk1lZGljYXRpb25SZXF1ZXN0IiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+CiAgICAgICAgIDwvcGFyYW1ldGVyVHlwZVNwZWNpZmllcj4KICAgICAgPC9kZWY+CiAgIDwvcGFyYW1ldGVycz4KICAgPGNvbnRleHRzPgogICAgICA8ZGVmIGxvY2F0b3I9IjU5OjEtNTk6MTUiIG5hbWU9IlBhdGllbnQiLz4KICAgPC9jb250ZXh0cz4KICAgPHN0YXRlbWVudHM+CiAgICAgIDxkZWYgbG9jYXRvcj0iNTk6MS01OToxNSIgbmFtZT0iUGF0aWVudCIgY29udGV4dD0iUGF0aWVudCI+CiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJTaW5nbGV0b25Gcm9tIj4KICAgICAgICAgICAgPG9wZXJhbmQgbG9jYXRvcj0iNTk6MS01OToxNSIgZGF0YVR5cGU9ImZoaXI6UGF0aWVudCIgdGVtcGxhdGVJZD0iaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BhdGllbnQiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPgogICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIGxvY2FsSWQ9IjE4IiBsb2NhdG9yPSI2NToxLTY3Ojk0IiBuYW1lPSJDaHJvbmljIFBhaW4gT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCBQcmVzY3JpcHRpb25zIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iMTgiPgogICAgICAgICAgICAgICA8YTpzPmRlZmluZSAmcXVvdDtDaHJvbmljIFBhaW4gT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCBQcmVzY3JpcHRpb25zJnF1b3Q7OgogIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzIHI9IjE3Ij4KICAgICAgICAgICAgICAgICAgPGE6cz4KICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSIxMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiggPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz5Db21tb248L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+LjwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtJcyBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsPyZxdW90OyggPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPkNvbnRleHRQcmVzY3JpcHRpb25zPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiApPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4gKTwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4gQW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbjwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgIDxhOnM+CiAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSIxNiI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnM+d2hlcmUgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMTYiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjE0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz5Sb3V0aW5lczwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4uPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O0lzIFN1YmFjdXRlIG9yIENocm9uaWMgUGFpbiBQcmVzY3JpcHRpb24/JnF1b3Q7KCA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSIxNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+QW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbjwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4gKTwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgIDwvYW5ub3RhdGlvbj4KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMTciIGxvY2F0b3I9IjY2OjMtNjc6OTQiIHhzaTp0eXBlPSJRdWVyeSI+CiAgICAgICAgICAgIDxzb3VyY2UgbG9jYWxJZD0iMTMiIGxvY2F0b3I9IjY2OjMtNjY6MTIxIiBhbGlhcz0iQW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjEyIiBsb2NhdG9yPSI2NjozLTY2OjkyIiBuYW1lPSJJcyBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsPyIgbGlicmFyeU5hbWU9IkNvbW1vbiIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbG9jYWxJZD0iMTEiIGxvY2F0b3I9IjY2OjY5LTY2Ojg4IiBuYW1lPSJDb250ZXh0UHJlc2NyaXB0aW9ucyIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPgogICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgICAgICAgIDwvc291cmNlPgogICAgICAgICAgICA8d2hlcmUgbG9jYWxJZD0iMTYiIGxvY2F0b3I9IjY3OjUtNjc6OTQiIG5hbWU9IklzIFN1YmFjdXRlIG9yIENocm9uaWMgUGFpbiBQcmVzY3JpcHRpb24/IiBsaWJyYXJ5TmFtZT0iUm91dGluZXMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjE1IiBsb2NhdG9yPSI2Nzo2NS02Nzo5MiIgbmFtZT0iQW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbiIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+CiAgICAgICAgICAgIDwvd2hlcmU+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iMjkiIGxvY2F0b3I9IjcyOjEtNzk6MyIgbmFtZT0iVG90YWwgTU1FIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iMjkiPgogICAgICAgICAgICAgICA8YTpzPmRlZmluZSAmcXVvdDtUb3RhbCBNTUUmcXVvdDs6CiAgPC9hOnM+CiAgICAgICAgICAgICAgIDxhOnMgcj0iMjgiPgogICAgICAgICAgICAgICAgICA8YTpzIHI9IjkiPgogICAgICAgICAgICAgICAgICAgICA8YTpzPk1NRUNhbGN1bGF0b3I8L2E6cz4KICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgIDxhOnM+LjwvYTpzPgogICAgICAgICAgICAgICAgICA8YTpzIHI9IjI4Ij4KICAgICAgICAgICAgICAgICAgICAgPGE6cz5Ub3RhbE1NRSgKICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjI3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSIyMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPigKICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjE5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtDaHJvbmljIFBhaW4gT3Bpb2lkIEFuYWxnZXNpYyB3aXRoIEFtYnVsYXRvcnkgTWlzdXNlIFBvdGVudGlhbCBQcmVzY3JpcHRpb25zJnF1b3Q7PC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPgogICAgICAgIHVuaW9uIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSIyMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+Q29tbW9uPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPi48L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSIyMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+JnF1b3Q7QWN0aXZlIEFtYnVsYXRvcnkgT3Bpb2lkIFJ4JnF1b3Q7PC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+CiAgICApPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiBBbWJ1bGF0b3J5T3Bpb2lkUHJlc2NyaXB0aW9uPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4KICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMjYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPndoZXJlIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjI2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSIyNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+Um91dGluZXM8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+LjwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjI2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtJcyBTdWJhY3V0ZSBvciBDaHJvbmljIFBhaW4gUHJlc2NyaXB0aW9uPyZxdW90OyggPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YTpzPkFtYnVsYXRvcnlPcGlvaWRQcmVzY3JpcHRpb248L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+ICk8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDxhOnM+CiAgKTwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgIDwvYTpzPgogICAgICAgICA8L2Fubm90YXRpb24+CiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjI4IiBsb2NhdG9yPSI3MzozLTc5OjMiIG5hbWU9IlRvdGFsTU1FIiBsaWJyYXJ5TmFtZT0iTU1FQ2FsY3VsYXRvciIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4KICAgICAgICAgICAgPG9wZXJhbmQgbG9jYWxJZD0iMjciIGxvY2F0b3I9Ijc0OjUtNzg6OTYiIHhzaTp0eXBlPSJRdWVyeSI+CiAgICAgICAgICAgICAgIDxzb3VyY2UgbG9jYWxJZD0iMjMiIGxvY2F0b3I9Ijc0OjUtNzc6MzQiIGFsaWFzPSJBbWJ1bGF0b3J5T3Bpb2lkUHJlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iMjIiIGxvY2F0b3I9Ijc0OjUtNzc6NSIgeHNpOnR5cGU9IlVuaW9uIj4KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbG9jYWxJZD0iMTkiIGxvY2F0b3I9Ijc1OjctNzU6ODQiIG5hbWU9IkNocm9uaWMgUGFpbiBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIFByZXNjcmlwdGlvbnMiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjIxIiBsb2NhdG9yPSI3NjoxNS03Njo1MCIgbmFtZT0iQWN0aXZlIEFtYnVsYXRvcnkgT3Bpb2lkIFJ4IiBsaWJyYXJ5TmFtZT0iQ29tbW9uIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgICAgICAgICAgIDwvc291cmNlPgogICAgICAgICAgICAgICA8d2hlcmUgbG9jYWxJZD0iMjYiIGxvY2F0b3I9Ijc4OjctNzg6OTYiIG5hbWU9IklzIFN1YmFjdXRlIG9yIENocm9uaWMgUGFpbiBQcmVzY3JpcHRpb24/IiBsaWJyYXJ5TmFtZT0iUm91dGluZXMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+CiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjI1IiBsb2NhdG9yPSI3ODo2Ny03ODo5NCIgbmFtZT0iQW1idWxhdG9yeU9waW9pZFByZXNjcmlwdGlvbiIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+CiAgICAgICAgICAgICAgIDwvd2hlcmU+CiAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBsb2NhbElkPSIzNCIgbG9jYXRvcj0iNjE6MS02MTo0MyIgbmFtZT0iVGFwZXIgTm93IiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iMzQiPgogICAgICAgICAgICAgICA8YTpzPmRlZmluZSAmcXVvdDtUYXBlciBOb3cmcXVvdDs6IDwvYTpzPgogICAgICAgICAgICAgICA8YTpzIHI9IjMzIj4KICAgICAgICAgICAgICAgICAgPGE6cyByPSIzMSI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMzAiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O1RvdGFsIE1NRSZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPGE6cz4uPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMzEiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPnZhbHVlPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSIzMiI+ID49IDkwPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSIzMyIgbG9jYXRvcj0iNjE6MjEtNjE6NDMiIHhzaTp0eXBlPSJHcmVhdGVyT3JFcXVhbCI+CiAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjMxIiBsb2NhdG9yPSI2MToyMS02MTozNyIgcGF0aD0idmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+CiAgICAgICAgICAgICAgIDxzb3VyY2UgbG9jYWxJZD0iMzAiIGxvY2F0b3I9IjYxOjIxLTYxOjMxIiBuYW1lPSJUb3RhbCBNTUUiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlRvRGVjaW1hbCI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjMyIiBsb2NhdG9yPSI2MTo0Mi02MTo0MyIgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSI5MCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4KICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIGxvY2FsSWQ9IjM5IiBsb2NhdG9yPSI2MzoxLTYzOjUwIiBuYW1lPSJDb25zaWRlciBUYXBlcmluZyIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPgogICAgICAgICAgICA8YTpzIHI9IjM5Ij4KICAgICAgICAgICAgICAgPGE6cz5kZWZpbmUgJnF1b3Q7Q29uc2lkZXIgVGFwZXJpbmcmcXVvdDs6IDwvYTpzPgogICAgICAgICAgICAgICA8YTpzIHI9IjM4Ij4KICAgICAgICAgICAgICAgICAgPGE6cyByPSIzNiI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMzUiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O1RvdGFsIE1NRSZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPGE6cz4uPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iMzYiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPnZhbHVlPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSIzNyI+ICZsdDsgOTA8L2E6cz4KICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgIDwvYTpzPgogICAgICAgICA8L2Fubm90YXRpb24+CiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjM4IiBsb2NhdG9yPSI2MzoyOS02Mzo1MCIgeHNpOnR5cGU9Ikxlc3MiPgogICAgICAgICAgICA8b3BlcmFuZCBsb2NhbElkPSIzNiIgbG9jYXRvcj0iNjM6MjktNjM6NDUiIHBhdGg9InZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPgogICAgICAgICAgICAgICA8c291cmNlIGxvY2FsSWQ9IjM1IiBsb2NhdG9yPSI2MzoyOS02MzozOSIgbmFtZT0iVG90YWwgTU1FIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJUb0RlY2ltYWwiPgogICAgICAgICAgICAgICA8b3BlcmFuZCBsb2NhbElkPSIzNyIgbG9jYXRvcj0iNjM6NDktNjM6NTAiIHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB2YWx1ZT0iOTAiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBsb2NhbElkPSI0MiIgbG9jYXRvcj0iNjk6MS03MDo5MCIgbmFtZT0iUGF0aWVudCBJcyBCZWluZyBQcmVzY3JpYmVkIE9waW9pZCBBbmFsZ2VzaWMgd2l0aCBBbWJ1bGF0b3J5IE1pc3VzZSBQb3RlbnRpYWwiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSI0MiI+CiAgICAgICAgICAgICAgIDxhOnM+ZGVmaW5lICZxdW90O1BhdGllbnQgSXMgQmVpbmcgUHJlc2NyaWJlZCBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsJnF1b3Q7OgogIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzIHI9IjQxIj4KICAgICAgICAgICAgICAgICAgPGE6cz5leGlzdHM8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI0MCI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnM+KCA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSI0MCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+JnF1b3Q7Q2hyb25pYyBQYWluIE9waW9pZCBBbmFsZ2VzaWMgd2l0aCBBbWJ1bGF0b3J5IE1pc3VzZSBQb3RlbnRpYWwgUHJlc2NyaXB0aW9ucyZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPGE6cz4gKTwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgIDwvYTpzPgogICAgICAgICA8L2Fubm90YXRpb24+CiAgICAgICAgIDxleHByZXNzaW9uIGxvY2FsSWQ9IjQxIiBsb2NhdG9yPSI3MDozLTcwOjkwIiB4c2k6dHlwZT0iRXhpc3RzIj4KICAgICAgICAgICAgPG9wZXJhbmQgbG9jYWxJZD0iNDAiIGxvY2F0b3I9IjcwOjktNzA6OTAiIG5hbWU9IkNocm9uaWMgUGFpbiBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIFByZXNjcmlwdGlvbnMiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iNTEiIGxvY2F0b3I9IjgxOjEtODQ6MzUiIG5hbWU9IkluY2x1c2lvbiBDcml0ZXJpYSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPgogICAgICAgICAgICA8YTpzIHI9IjUxIj4KICAgICAgICAgICAgICAgPGE6cz5kZWZpbmUgJnF1b3Q7SW5jbHVzaW9uIENyaXRlcmlhJnF1b3Q7OgogIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzIHI9IjUwIj4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI0NiI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O1BhdGllbnQgSXMgQmVpbmcgUHJlc2NyaWJlZCBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsJnF1b3Q7PC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8YTpzPgogICAgYW5kIDwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjQ1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cyByPSI0NCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+Um91dGluZXM8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhOnM+LjwvYTpzPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjQ1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtJcyBPcGlvaWQgUmV2aWV3IFVzZWZ1bD8mcXVvdDs8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cz4KICAgIGFuZCA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI0OSI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDciPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O1RvdGFsIE1NRSZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPGE6cz4gPj0gPC9hOnM+CiAgICAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNDgiPgogICAgICAgICAgICAgICAgICAgICAgICA8YTpzPjUwICd7TU1FfS9kJzwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI1MCIgbG9jYXRvcj0iODI6My04NDozNSIgeHNpOnR5cGU9IkFuZCI+CiAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjQ2IiBsb2NhdG9yPSI4MjozLTgzOjQzIiB4c2k6dHlwZT0iQW5kIj4KICAgICAgICAgICAgICAgPG9wZXJhbmQgbG9jYWxJZD0iNDMiIGxvY2F0b3I9IjgyOjMtODI6ODEiIG5hbWU9IlBhdGllbnQgSXMgQmVpbmcgUHJlc2NyaWJlZCBPcGlvaWQgQW5hbGdlc2ljIHdpdGggQW1idWxhdG9yeSBNaXN1c2UgUG90ZW50aWFsIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICAgICA8b3BlcmFuZCBsb2NhbElkPSI0NSIgbG9jYXRvcj0iODM6OS04Mzo0MyIgbmFtZT0iSXMgT3Bpb2lkIFJldmlldyBVc2VmdWw/IiBsaWJyYXJ5TmFtZT0iUm91dGluZXMiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDwvb3BlcmFuZD4KICAgICAgICAgICAgPG9wZXJhbmQgbG9jYWxJZD0iNDkiIGxvY2F0b3I9Ijg0OjktODQ6MzUiIHhzaTp0eXBlPSJHcmVhdGVyT3JFcXVhbCI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjQ3IiBsb2NhdG9yPSI4NDo5LTg0OjE5IiBuYW1lPSJUb3RhbCBNTUUiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjQ4IiBsb2NhdG9yPSI4NDoyNC04NDozNSIgdmFsdWU9IjUwIiB1bml0PSJ7TU1FfS9kIiB4c2k6dHlwZT0iUXVhbnRpdHkiLz4KICAgICAgICAgICAgPC9vcGVyYW5kPgogICAgICAgICA8L2V4cHJlc3Npb24+CiAgICAgIDwvZGVmPgogICAgICA8ZGVmIGxvY2FsSWQ9IjU0IiBsb2NhdG9yPSI4NjoxLTg3OjMzIiBuYW1lPSJFeGNsdXNpb24gQ3JpdGVyaWEiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSI1NCI+CiAgICAgICAgICAgICAgIDxhOnM+ZGVmaW5lICZxdW90O0V4Y2x1c2lvbiBDcml0ZXJpYSZxdW90OzoKICA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cyByPSI1MyI+CiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNTIiPgogICAgICAgICAgICAgICAgICAgICA8YTpzPkNvbW1vbjwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cz4uPC9hOnM+CiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNTMiPgogICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O0VuZCBvZiBMaWZlIEFzc2Vzc21lbnQmcXVvdDs8L2E6cz4KICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI1MyIgbG9jYXRvcj0iODc6My04NzozMyIgbmFtZT0iRW5kIG9mIExpZmUgQXNzZXNzbWVudCIgbGlicmFyeU5hbWU9IkNvbW1vbiIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iNTkiIGxvY2F0b3I9Ijg5OjEtOTE6MzIiIG5hbWU9IklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iNTkiPgogICAgICAgICAgICAgICA8YTpzPmRlZmluZSAmcXVvdDtJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyZxdW90OzoKICA8L2E6cz4KICAgICAgICAgICAgICAgPGE6cyByPSI1OCI+CiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNTUiPgogICAgICAgICAgICAgICAgICAgICA8YTpzPiZxdW90O0luY2x1c2lvbiBDcml0ZXJpYSZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cz4KICAgIGFuZCA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI1NyI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnM+bm90IDwvYTpzPgogICAgICAgICAgICAgICAgICAgICA8YTpzIHI9IjU2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtFeGNsdXNpb24gQ3JpdGVyaWEmcXVvdDs8L2E6cz4KICAgICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgIDwvYW5ub3RhdGlvbj4KICAgICAgICAgPGV4cHJlc3Npb24gbG9jYWxJZD0iNTgiIGxvY2F0b3I9IjkwOjMtOTE6MzIiIHhzaTp0eXBlPSJBbmQiPgogICAgICAgICAgICA8b3BlcmFuZCBsb2NhbElkPSI1NSIgbG9jYXRvcj0iOTA6My05MDoyMiIgbmFtZT0iSW5jbHVzaW9uIENyaXRlcmlhIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICA8b3BlcmFuZCBsb2NhbElkPSI1NyIgbG9jYXRvcj0iOTE6OS05MTozMiIgeHNpOnR5cGU9Ik5vdCI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjU2IiBsb2NhdG9yPSI5MToxMy05MTozMiIgbmFtZT0iRXhjbHVzaW9uIENyaXRlcmlhIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICA8L29wZXJhbmQ+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iNjQiIGxvY2F0b3I9IjkzOjEtOTY6MTEiIG5hbWU9IkdldCBJbmRpY2F0b3IiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgICA8YW5ub3RhdGlvbiB4c2k6dHlwZT0iYTpBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPGE6cyByPSI2NCI+CiAgICAgICAgICAgICAgIDxhOnM+ZGVmaW5lICZxdW90O0dldCBJbmRpY2F0b3ImcXVvdDs6CiAgPC9hOnM+CiAgICAgICAgICAgICAgIDxhOnMgcj0iNjMiPgogICAgICAgICAgICAgICAgICA8YTpzPmlmIDwvYTpzPgogICAgICAgICAgICAgICAgICA8YTpzIHI9IjYwIj4KICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cz4KICAgIHRoZW4gPC9hOnM+CiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNjEiPgogICAgICAgICAgICAgICAgICAgICA8YTpzPid3YXJuaW5nJzwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI2MiI+CiAgZWxzZSBudWxsPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI2MyIgbG9jYXRvcj0iOTQ6My05NjoxMSIgeHNpOnR5cGU9IklmIj4KICAgICAgICAgICAgPGNvbmRpdGlvbiBsb2NhbElkPSI2MCIgbG9jYXRvcj0iOTQ6Ni05NDozNiIgbmFtZT0iSXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8iIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+CiAgICAgICAgICAgIDx0aGVuIGxvY2FsSWQ9IjYxIiBsb2NhdG9yPSI5NToxMC05NToxOCIgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9Indhcm5pbmciIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgICAgICAgIDxlbHNlIGFzVHlwZT0idDpTdHJpbmciIHhzaTp0eXBlPSJBcyI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjYyIiBsb2NhdG9yPSI5Njo4LTk2OjExIiB4c2k6dHlwZT0iTnVsbCIvPgogICAgICAgICAgICA8L2Vsc2U+CiAgICAgICAgIDwvZXhwcmVzc2lvbj4KICAgICAgPC9kZWY+CiAgICAgIDxkZWYgbG9jYWxJZD0iNjkiIGxvY2F0b3I9Ijk4OjEtMTAyOjExIiBuYW1lPSJHZXQgU3VtbWFyeSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgIDxhbm5vdGF0aW9uIHhzaTp0eXBlPSJhOkFubm90YXRpb24iPgogICAgICAgICAgICA8YTpzIHI9IjY5Ij4KICAgICAgICAgICAgICAgPGE6cz5kZWZpbmUgJnF1b3Q7R2V0IFN1bW1hcnkmcXVvdDs6CiAgPC9hOnM+CiAgICAgICAgICAgICAgIDxhOnMgcj0iNjgiPgogICAgICAgICAgICAgICAgICA8YTpzPmlmIDwvYTpzPgogICAgICAgICAgICAgICAgICA8YTpzIHI9IjY1Ij4KICAgICAgICAgICAgICAgICAgICAgPGE6cz4mcXVvdDtJcyBSZWNvbW1lbmRhdGlvbiBBcHBsaWNhYmxlPyZxdW90OzwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cz4KICAgIHRoZW4KICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgIDxhOnMgcj0iNjYiPgogICAgICAgICAgICAgICAgICAgICA8YTpzPidDYWxpYnJhdGUgdG8gTG93ZXN0IE9waW9pZCBEb3NlIE5lZWRlZCBmb3IgRXhwZWN0ZWQgUmVzdWx0cyBhbmQgRXhlcmNpc2UgQ2FyZSBXaGVuIENoYW5naW5nIE9waW9pZCBEb3NhZ2VzJzwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI2NyI+CiAgZWxzZSBudWxsPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI2OCIgbG9jYXRvcj0iOTk6My0xMDI6MTEiIHhzaTp0eXBlPSJJZiI+CiAgICAgICAgICAgIDxjb25kaXRpb24gbG9jYWxJZD0iNjUiIGxvY2F0b3I9Ijk5OjYtOTk6MzYiIG5hbWU9IklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICA8dGhlbiBsb2NhbElkPSI2NiIgbG9jYXRvcj0iMTAxOjctMTAxOjExNCIgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9IkNhbGlicmF0ZSB0byBMb3dlc3QgT3Bpb2lkIERvc2UgTmVlZGVkIGZvciBFeHBlY3RlZCBSZXN1bHRzIGFuZCBFeGVyY2lzZSBDYXJlIFdoZW4gQ2hhbmdpbmcgT3Bpb2lkIERvc2FnZXMiIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgICAgICAgIDxlbHNlIGFzVHlwZT0idDpTdHJpbmciIHhzaTp0eXBlPSJBcyI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjY3IiBsb2NhdG9yPSIxMDI6OC0xMDI6MTEiIHhzaTp0eXBlPSJOdWxsIi8+CiAgICAgICAgICAgIDwvZWxzZT4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgICAgPGRlZiBsb2NhbElkPSI3NCIgbG9jYXRvcj0iMTA0OjEtMTI3OjExIiBuYW1lPSJHZXQgRGV0YWlsIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICAgPGFubm90YXRpb24geHNpOnR5cGU9ImE6QW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDxhOnMgcj0iNzQiPgogICAgICAgICAgICAgICA8YTpzPmRlZmluZSAmcXVvdDtHZXQgRGV0YWlsJnF1b3Q7OgogIDwvYTpzPgogICAgICAgICAgICAgICA8YTpzIHI9IjczIj4KICAgICAgICAgICAgICAgICAgPGE6cz5pZiA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI3MCI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnM+JnF1b3Q7SXMgUmVjb21tZW5kYXRpb24gQXBwbGljYWJsZT8mcXVvdDs8L2E6cz4KICAgICAgICAgICAgICAgICAgPC9hOnM+CiAgICAgICAgICAgICAgICAgIDxhOnM+CiAgICB0aGVuCiAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI3MSI+CiAgICAgICAgICAgICAgICAgICAgIDxhOnM+J1doZW4gb3Bpb2lkIHRoZXJhcHkgaXMgY29uc2lkZXJlZCBhcHByb3ByaWF0ZSwgY2FsaWJyYXRlIG9waW9pZCBkb3NhZ2VzIHRvIGxvd2VzdCBkb3NlIG5lZWRlZCB0byBhY2hpZXZlIGV4cGVjdGVkIGVmZmVjdHMuIEZvciBwYXRpZW50cyBhbHJlYWR5IHJlY2VpdmluZyBvcGlvaWQgdGhlcmFweSwgY2xpbmljaWFucyBzaG91bGQgY2FyZWZ1bGx5IHdlaWdoIGJlbmVmaXRzIGFuZCByaXNrcyBhbmQgZXhlcmNpc2UgY2FyZSB3aGVuIGNoYW5naW5nIG9waW9pZCBkb3NhZ2UuCgpbRm9yIGd1aWRhbmNlIGluIGRldGVybWluaW5nIHRoZSBsb3dlc3QgZWZmZWN0aXZlIG9waW9pZCBkb3NhZ2UsIHNlZSBSZWNvbW1lbmRhdGlvbiA0IG9mIHRoZSAyMDIyIENEQyBDbGluaWNhbCBQcmFjdGljZSBHdWlkZWxpbmVdKGh0dHBzOi8vd3d3LmNkYy5nb3YvbW13ci92b2x1bWVzLzcxL3JyL3JyNzEwM2ExLmh0bSM6fjp0ZXh0PWxvd2VzdCUyMGVmZmVjdGl2ZSUyMGRvc2FnZS4tLEZvciUyMHBhdGllbnRzJTIwbm90JTIwYWxyZWFkeSUyMHRha2luZyUyMG9waW9pZHMlMkMlMjB0aGUlMjBsb3dlc3QlMjBlZmZlY3RpdmUlMjBkb3NlJTIwY2FuLGludGVuZGVkJTIwdG8lMjBiZSUyMGd1aWRlcG9zdHMlMjB0byUyMGhlbHAlMjBpbmZvcm0lMjBjbGluaWNpYW4lMkRwYXRpZW50JTIwZGVjaXNpb24lMkRtYWtpbmcuLC1TdXBwb3J0aW5nJTIwUmF0aW9uYWxlKQoKW0ZvciBwYXRpZW50cyB3aG8gaGF2ZSByZWNlaXZlZCBvcGlvaWQgdGhlcmFweSBmb3IgbG9uZ2VyIGR1cmF0aW9ucyBvZiB0aW1lLCBpZiB0YXBlcmluZywgY29uc2lkZXIgd29ya2luZyBjbG9zZWx5IHdpdGggdGhlIHBhdGllbnQgdG8gZ3JhZHVhbGx5IHRhcGVyIGRvc2FnZXMgKG5vIG1vcmUgdGhhbiAxMCUgcGVyIG1vbnRoKV0oaHR0cHM6Ly93d3cuY2RjLmdvdi9tbXdyL3ZvbHVtZXMvNzEvcnIvcnI3MTAzYTEuaHRtIzp+OnRleHQ9V2hlbiUyMHBhdGllbnRzJTIwaGF2ZSUyMGJlZW4lMjB0YWtpbmclMjBvcGlvaWRzJTIwZm9yJTIwbG9uZ2VyJTIwZHVyYXRpb25zJTIwKGUuZy4lMkMlMjBmb3IlMjAlRTIlODklQTUxJTIweWVhciklMkMlMjB0YXBlcnMlMjBvZiUyMDEwJTI1JTIwcGVyJTIwbW9udGglMjBvciUyMHNsb3dlciUyMGFyZSUyMGxpa2VseSUyMHRvJTIwYmUlMjBiZXR0ZXIlMjB0b2xlcmF0ZWQlMjB0aGFuJTIwbW9yZSUyMHJhcGlkJTIwdGFwZXJzLikKCkZvciBhIHRhcGVyaW5nIGNhbGN1bGF0b3IsIGdvIHRvIFtodHRwczovL2FnZW5jeW1lZGRpcmVjdG9ycy53YS5nb3YvQ2FsY3VsYXRvci9UYXBlckRvc2VDYWxjdWxhdG9yLmh0bWxdKGh0dHBzOi8vd3d3LmFnZW5jeW1lZGRpcmVjdG9ycy53YS5nb3YvQ2FsY3VsYXRvci9UYXBlckRvc2VDYWxjdWxhdG9yLmh0bWwpCgpbRm9yIG1vcmUgZ3VpZGFuY2UgcmVnYXJkaW5nIHRhcGVyaW5nLCBwbGVhc2Ugc2VlwqBSZWNvbW1lbmRhdGlvbiA1IG9mIHRoZSAyMDIyIENEQyBDbGluaWNhbCBQcmFjdGljZSBHdWlkZWxpbmUgZm9yIFByZXNjcmliaW5nIE9waW9pZHMgZm9yIFBhaW5dKGh0dHBzOi8vd3d3LmNkYy5nb3YvbW13ci92b2x1bWVzLzcxL3JyL3JyNzEwM2ExLmh0bSM6fjp0ZXh0PVdoZW4lMjBiZW5lZml0cyUyMChpbmNsdWRpbmcsNiUyMGFuZCUyMDcpLikKCioqTU1FIENhbGN1bGF0b3IgQ2F1dGlvbnMqKgoxKSBBbGwgZG9zZXMgYXJlIGluIG1nL2RheSBleGNlcHQgZm9yIGZlbnRhbnlsLCB3aGljaCBpcyBtY2cvaHIuIAoyKSBFcXVpYW5hbGdlc2ljIGRvc2UgY29udmVyc2lvbnMgYXJlIG9ubHkgZXN0aW1hdGVzIGFuZCBjYW5ub3QgYWNjb3VudCBmb3IgaW5kaXZpZHVhbCB2YXJpYWJpbGl0eSBpbiBnZW5ldGljcyBhbmQgcGhhcm1hY29raW5ldGljcy4gCjMpIERvIG5vdCB1c2UgdGhlIGNhbGN1bGF0ZWQgZG9zZSBpbiBNTUVzIHRvIGRldGVybWluZSB0aGUgZG9zZXMgdG8gdXNlIHdoZW4gY29udmVydGluZyBvbmUgb3Bpb2lkIHRvIGFub3RoZXI7IHdoZW4gY29udmVydGluZyBvcGlvaWRzLCB0aGUgbmV3IG9waW9pZCBpcyB0eXBpY2FsbHkgZG9zZWQgYXQgYSBzdWJzdGFudGlhbGx5IGxvd2VyIGRvc2UgdGhhbiB0aGUgY2FsY3VsYXRlZCBNTUUgZG9zZSB0byBhdm9pZCBvdmVyZG9zZSBiZWNhdXNlIG9mIGluY29tcGxldGUgY3Jvc3MtdG9sZXJhbmNlIGFuZCBpbmRpdmlkdWFsIHZhcmlhYmlsaXR5IGluIG9waW9pZCBwaGFybWFjb2tpbmV0aWNzLiBDb25zdWx0IHRoZSBGREEgYXBwcm92ZWQgcHJvZHVjdCBsYWJlbGluZyBmb3Igc3BlY2lmaWMgZ3VpZGFuY2Ugb24gbWVkaWNhdGlvbnMuIAo0KSBVc2UgcGFydGljdWxhciBjYXV0aW9uIHdpdGggbWV0aGFkb25lIGRvc2UgY29udmVyc2lvbnMgYmVjYXVzZSBtZXRoYWRvbmUgaGFzIGEgbG9uZyBhbmQgdmFyaWFibGUgaGFsZi1saWZlLCBhbmQgcGVhayByZXNwaXJhdG9yeSBkZXByZXNzYW50IGVmZmVjdCBvY2N1cnMgbGF0ZXIgYW5kIGxhc3RzIGxvbmdlciB0aGFuIHBlYWsgYW5hbGdlc2ljIGVmZmVjdC4gCjUpIFVzZSBwYXJ0aWN1bGFyIGNhdXRpb24gd2l0aCB0cmFuc2Rlcm1hbCBmZW50YW55bCBiZWNhdXNlIGl0IGlzIGRvc2VkIGluIG1jZy9ociBpbnN0ZWFkIG9mIG1nL2RheSwgYW5kIGl0cyBhYnNvcnB0aW9uIGlzIGFmZmVjdGVkIGJ5IGhlYXQgYW5kIG90aGVyIGZhY3RvcnMuIAo2KSBCdXByZW5vcnBoaW5lIHByb2R1Y3RzIGFwcHJvdmVkIGZvciB0aGUgdHJlYXRtZW50IG9mIHBhaW4gYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgdGFibGUgYmVjYXVzZSBvZiB0aGVpciBwYXJ0aWFsIMK1LXJlY2VwdG9yIGFnb25pc3QgYWN0aXZpdHkgYW5kIHJlc3VsdGFudCBjZWlsaW5nIGVmZmVjdHMgY29tcGFyZWQgd2l0aCBmdWxsIMK1LXJlY2VwdG9yIGFnb25pc3RzLiAKNykgVGhlc2UgY29udmVyc2lvbiBmYWN0b3JzIHNob3VsZCBub3QgYmUgYXBwbGllZCB0byBkb3NhZ2UgZGVjaXNpb25zIHJlbGF0ZWQgdG8gdGhlIG1hbmFnZW1lbnQgb2Ygb3Bpb2lkIHVzZSBkaXNvcmRlci4K4oCgIFRhcGVudGFkb2wgaXMgYSDCtS1yZWNlcHRvciBhZ29uaXN0IGFuZCBub3JlcGluZXBocmluZSByZXVwdGFrZSBpbmhpYml0b3IuIE1NRXMgYXJlIGJhc2VkIG9uIGRlZ3JlZSBvZiDCtS1yZWNlcHRvciBhZ29uaXN0IGFjdGl2aXR5OyBob3dldmVyLCBpdCBpcyB1bmtub3duIHdoZXRoZXIgdGFwZW50YWRvbCBpcyBhc3NvY2lhdGVkIHdpdGggb3ZlcmRvc2UgaW4gdGhlIHNhbWUgZG9zZS1kZXBlbmRlbnQgbWFubmVyIGFzIG9ic2VydmVkIHdpdGggbWVkaWNhdGlvbnMgdGhhdCBhcmUgc29sZWx5IMK1LXJlY2VwdG9yIGFnb25pc3RzLgrCpyBUcmFtYWRvbCBpcyBhIMK1LXJlY2VwdG9yIGFnb25pc3QgYW5kIG5vcmVwaW5lcGhyaW5lIGFuZCBzZXJvdG9uaW4gcmV1cHRha2UgaW5oaWJpdG9yLiBNTUVzIGFyZSBiYXNlZCBvbiBkZWdyZWUgb2YgwrUtcmVjZXB0b3IgYWdvbmlzdCBhY3Rpdml0eTsgaG93ZXZlciwgaXQgaXMgdW5rbm93biB3aGV0aGVyIHRyYW1hZG9sIGlzIGFzc29jaWF0ZWQgd2l0aCBvdmVyZG9zZSBpbiB0aGUgc2FtZSBkb3NlLWRlcGVuZGVudCBtYW5uZXIgYXMgb2JzZXJ2ZWQgd2l0aCBtZWRpY2F0aW9ucyB0aGF0IGFyZSBzb2xlbHkgwrUtcmVjZXB0b3IgYWdvbmlzdHMuJzwvYTpzPgogICAgICAgICAgICAgICAgICA8L2E6cz4KICAgICAgICAgICAgICAgICAgPGE6cyByPSI3MiI+CiAgZWxzZSBudWxsPC9hOnM+CiAgICAgICAgICAgICAgIDwvYTpzPgogICAgICAgICAgICA8L2E6cz4KICAgICAgICAgPC9hbm5vdGF0aW9uPgogICAgICAgICA8ZXhwcmVzc2lvbiBsb2NhbElkPSI3MyIgbG9jYXRvcj0iMTA1OjMtMTI3OjExIiB4c2k6dHlwZT0iSWYiPgogICAgICAgICAgICA8Y29uZGl0aW9uIGxvY2FsSWQ9IjcwIiBsb2NhdG9yPSIxMDU6Ni0xMDU6MzYiIG5hbWU9IklzIFJlY29tbWVuZGF0aW9uIEFwcGxpY2FibGU/IiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPgogICAgICAgICAgICA8dGhlbiBsb2NhbElkPSI3MSIgbG9jYXRvcj0iMTA3OjUtMTA3OjM2MDgiIHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJXaGVuIG9waW9pZCB0aGVyYXB5IGlzIGNvbnNpZGVyZWQgYXBwcm9wcmlhdGUsIGNhbGlicmF0ZSBvcGlvaWQgZG9zYWdlcyB0byBsb3dlc3QgZG9zZSBuZWVkZWQgdG8gYWNoaWV2ZSBleHBlY3RlZCBlZmZlY3RzLiBGb3IgcGF0aWVudHMgYWxyZWFkeSByZWNlaXZpbmcgb3Bpb2lkIHRoZXJhcHksIGNsaW5pY2lhbnMgc2hvdWxkIGNhcmVmdWxseSB3ZWlnaCBiZW5lZml0cyBhbmQgcmlza3MgYW5kIGV4ZXJjaXNlIGNhcmUgd2hlbiBjaGFuZ2luZyBvcGlvaWQgZG9zYWdlLiYjeGE7JiN4YTtbRm9yIGd1aWRhbmNlIGluIGRldGVybWluaW5nIHRoZSBsb3dlc3QgZWZmZWN0aXZlIG9waW9pZCBkb3NhZ2UsIHNlZSBSZWNvbW1lbmRhdGlvbiA0IG9mIHRoZSAyMDIyIENEQyBDbGluaWNhbCBQcmFjdGljZSBHdWlkZWxpbmVdKGh0dHBzOi8vd3d3LmNkYy5nb3YvbW13ci92b2x1bWVzLzcxL3JyL3JyNzEwM2ExLmh0bSM6fjp0ZXh0PWxvd2VzdCUyMGVmZmVjdGl2ZSUyMGRvc2FnZS4tLEZvciUyMHBhdGllbnRzJTIwbm90JTIwYWxyZWFkeSUyMHRha2luZyUyMG9waW9pZHMlMkMlMjB0aGUlMjBsb3dlc3QlMjBlZmZlY3RpdmUlMjBkb3NlJTIwY2FuLGludGVuZGVkJTIwdG8lMjBiZSUyMGd1aWRlcG9zdHMlMjB0byUyMGhlbHAlMjBpbmZvcm0lMjBjbGluaWNpYW4lMkRwYXRpZW50JTIwZGVjaXNpb24lMkRtYWtpbmcuLC1TdXBwb3J0aW5nJTIwUmF0aW9uYWxlKSYjeGE7JiN4YTtbRm9yIHBhdGllbnRzIHdobyBoYXZlIHJlY2VpdmVkIG9waW9pZCB0aGVyYXB5IGZvciBsb25nZXIgZHVyYXRpb25zIG9mIHRpbWUsIGlmIHRhcGVyaW5nLCBjb25zaWRlciB3b3JraW5nIGNsb3NlbHkgd2l0aCB0aGUgcGF0aWVudCB0byBncmFkdWFsbHkgdGFwZXIgZG9zYWdlcyAobm8gbW9yZSB0aGFuIDEwJSBwZXIgbW9udGgpXShodHRwczovL3d3dy5jZGMuZ292L21td3Ivdm9sdW1lcy83MS9yci9ycjcxMDNhMS5odG0jOn46dGV4dD1XaGVuJTIwcGF0aWVudHMlMjBoYXZlJTIwYmVlbiUyMHRha2luZyUyMG9waW9pZHMlMjBmb3IlMjBsb25nZXIlMjBkdXJhdGlvbnMlMjAoZS5nLiUyQyUyMGZvciUyMCVFMiU4OSVBNTElMjB5ZWFyKSUyQyUyMHRhcGVycyUyMG9mJTIwMTAlMjUlMjBwZXIlMjBtb250aCUyMG9yJTIwc2xvd2VyJTIwYXJlJTIwbGlrZWx5JTIwdG8lMjBiZSUyMGJldHRlciUyMHRvbGVyYXRlZCUyMHRoYW4lMjBtb3JlJTIwcmFwaWQlMjB0YXBlcnMuKSYjeGE7JiN4YTtGb3IgYSB0YXBlcmluZyBjYWxjdWxhdG9yLCBnbyB0byBbaHR0cHM6Ly9hZ2VuY3ltZWRkaXJlY3RvcnMud2EuZ292L0NhbGN1bGF0b3IvVGFwZXJEb3NlQ2FsY3VsYXRvci5odG1sXShodHRwczovL3d3dy5hZ2VuY3ltZWRkaXJlY3RvcnMud2EuZ292L0NhbGN1bGF0b3IvVGFwZXJEb3NlQ2FsY3VsYXRvci5odG1sKSYjeGE7JiN4YTtbRm9yIG1vcmUgZ3VpZGFuY2UgcmVnYXJkaW5nIHRhcGVyaW5nLCBwbGVhc2Ugc2VlwqBSZWNvbW1lbmRhdGlvbiA1IG9mIHRoZSAyMDIyIENEQyBDbGluaWNhbCBQcmFjdGljZSBHdWlkZWxpbmUgZm9yIFByZXNjcmliaW5nIE9waW9pZHMgZm9yIFBhaW5dKGh0dHBzOi8vd3d3LmNkYy5nb3YvbW13ci92b2x1bWVzLzcxL3JyL3JyNzEwM2ExLmh0bSM6fjp0ZXh0PVdoZW4lMjBiZW5lZml0cyUyMChpbmNsdWRpbmcsNiUyMGFuZCUyMDcpLikmI3hhOyYjeGE7KipNTUUgQ2FsY3VsYXRvciBDYXV0aW9ucyoqJiN4YTsxKSBBbGwgZG9zZXMgYXJlIGluIG1nL2RheSBleGNlcHQgZm9yIGZlbnRhbnlsLCB3aGljaCBpcyBtY2cvaHIuICYjeGE7MikgRXF1aWFuYWxnZXNpYyBkb3NlIGNvbnZlcnNpb25zIGFyZSBvbmx5IGVzdGltYXRlcyBhbmQgY2Fubm90IGFjY291bnQgZm9yIGluZGl2aWR1YWwgdmFyaWFiaWxpdHkgaW4gZ2VuZXRpY3MgYW5kIHBoYXJtYWNva2luZXRpY3MuICYjeGE7MykgRG8gbm90IHVzZSB0aGUgY2FsY3VsYXRlZCBkb3NlIGluIE1NRXMgdG8gZGV0ZXJtaW5lIHRoZSBkb3NlcyB0byB1c2Ugd2hlbiBjb252ZXJ0aW5nIG9uZSBvcGlvaWQgdG8gYW5vdGhlcjsgd2hlbiBjb252ZXJ0aW5nIG9waW9pZHMsIHRoZSBuZXcgb3Bpb2lkIGlzIHR5cGljYWxseSBkb3NlZCBhdCBhIHN1YnN0YW50aWFsbHkgbG93ZXIgZG9zZSB0aGFuIHRoZSBjYWxjdWxhdGVkIE1NRSBkb3NlIHRvIGF2b2lkIG92ZXJkb3NlIGJlY2F1c2Ugb2YgaW5jb21wbGV0ZSBjcm9zcy10b2xlcmFuY2UgYW5kIGluZGl2aWR1YWwgdmFyaWFiaWxpdHkgaW4gb3Bpb2lkIHBoYXJtYWNva2luZXRpY3MuIENvbnN1bHQgdGhlIEZEQSBhcHByb3ZlZCBwcm9kdWN0IGxhYmVsaW5nIGZvciBzcGVjaWZpYyBndWlkYW5jZSBvbiBtZWRpY2F0aW9ucy4gJiN4YTs0KSBVc2UgcGFydGljdWxhciBjYXV0aW9uIHdpdGggbWV0aGFkb25lIGRvc2UgY29udmVyc2lvbnMgYmVjYXVzZSBtZXRoYWRvbmUgaGFzIGEgbG9uZyBhbmQgdmFyaWFibGUgaGFsZi1saWZlLCBhbmQgcGVhayByZXNwaXJhdG9yeSBkZXByZXNzYW50IGVmZmVjdCBvY2N1cnMgbGF0ZXIgYW5kIGxhc3RzIGxvbmdlciB0aGFuIHBlYWsgYW5hbGdlc2ljIGVmZmVjdC4gJiN4YTs1KSBVc2UgcGFydGljdWxhciBjYXV0aW9uIHdpdGggdHJhbnNkZXJtYWwgZmVudGFueWwgYmVjYXVzZSBpdCBpcyBkb3NlZCBpbiBtY2cvaHIgaW5zdGVhZCBvZiBtZy9kYXksIGFuZCBpdHMgYWJzb3JwdGlvbiBpcyBhZmZlY3RlZCBieSBoZWF0IGFuZCBvdGhlciBmYWN0b3JzLiAmI3hhOzYpIEJ1cHJlbm9ycGhpbmUgcHJvZHVjdHMgYXBwcm92ZWQgZm9yIHRoZSB0cmVhdG1lbnQgb2YgcGFpbiBhcmUgbm90IGluY2x1ZGVkIGluIHRoZSB0YWJsZSBiZWNhdXNlIG9mIHRoZWlyIHBhcnRpYWwgwrUtcmVjZXB0b3IgYWdvbmlzdCBhY3Rpdml0eSBhbmQgcmVzdWx0YW50IGNlaWxpbmcgZWZmZWN0cyBjb21wYXJlZCB3aXRoIGZ1bGwgwrUtcmVjZXB0b3IgYWdvbmlzdHMuICYjeGE7NykgVGhlc2UgY29udmVyc2lvbiBmYWN0b3JzIHNob3VsZCBub3QgYmUgYXBwbGllZCB0byBkb3NhZ2UgZGVjaXNpb25zIHJlbGF0ZWQgdG8gdGhlIG1hbmFnZW1lbnQgb2Ygb3Bpb2lkIHVzZSBkaXNvcmRlci4mI3hhO+KAoCBUYXBlbnRhZG9sIGlzIGEgwrUtcmVjZXB0b3IgYWdvbmlzdCBhbmQgbm9yZXBpbmVwaHJpbmUgcmV1cHRha2UgaW5oaWJpdG9yLiBNTUVzIGFyZSBiYXNlZCBvbiBkZWdyZWUgb2YgwrUtcmVjZXB0b3IgYWdvbmlzdCBhY3Rpdml0eTsgaG93ZXZlciwgaXQgaXMgdW5rbm93biB3aGV0aGVyIHRhcGVudGFkb2wgaXMgYXNzb2NpYXRlZCB3aXRoIG92ZXJkb3NlIGluIHRoZSBzYW1lIGRvc2UtZGVwZW5kZW50IG1hbm5lciBhcyBvYnNlcnZlZCB3aXRoIG1lZGljYXRpb25zIHRoYXQgYXJlIHNvbGVseSDCtS1yZWNlcHRvciBhZ29uaXN0cy4mI3hhO8KnIFRyYW1hZG9sIGlzIGEgwrUtcmVjZXB0b3IgYWdvbmlzdCBhbmQgbm9yZXBpbmVwaHJpbmUgYW5kIHNlcm90b25pbiByZXVwdGFrZSBpbmhpYml0b3IuIE1NRXMgYXJlIGJhc2VkIG9uIGRlZ3JlZSBvZiDCtS1yZWNlcHRvciBhZ29uaXN0IGFjdGl2aXR5OyBob3dldmVyLCBpdCBpcyB1bmtub3duIHdoZXRoZXIgdHJhbWFkb2wgaXMgYXNzb2NpYXRlZCB3aXRoIG92ZXJkb3NlIGluIHRoZSBzYW1lIGRvc2UtZGVwZW5kZW50IG1hbm5lciBhcyBvYnNlcnZlZCB3aXRoIG1lZGljYXRpb25zIHRoYXQgYXJlIHNvbGVseSDCtS1yZWNlcHRvciBhZ29uaXN0cy4iIHhzaTp0eXBlPSJMaXRlcmFsIi8+CiAgICAgICAgICAgIDxlbHNlIGFzVHlwZT0idDpTdHJpbmciIHhzaTp0eXBlPSJBcyI+CiAgICAgICAgICAgICAgIDxvcGVyYW5kIGxvY2FsSWQ9IjcyIiBsb2NhdG9yPSIxMjc6OC0xMjc6MTEiIHhzaTp0eXBlPSJOdWxsIi8+CiAgICAgICAgICAgIDwvZWxzZT4KICAgICAgICAgPC9leHByZXNzaW9uPgogICAgICA8L2RlZj4KICAgPC9zdGF0ZW1lbnRzPgo8L2xpYnJhcnk+Cg=="
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}