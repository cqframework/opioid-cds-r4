{"resourceType":"Library","id":"OpioidCDSREC04And05","extension":[{"url":"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem","valueReference":{"reference":"Device/cqf-tooling"}},{"url":"http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem","valueReference":{"reference":"Device/cqf-tooling"}}],"url":"http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSREC04And05","version":"2022.1.0","name":"OpioidCDSREC04And05","title":"Library - Recommendations #4 and #5 - Lowest Effective Dose","status":"active","experimental":true,"type":{"coding":[{"system":"http://terminology.hl7.org/CodeSystem/library-type","code":"logic-library"}]},"relatedArtifact":[{"type":"depends-on","display":"FHIR model information","resource":"http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"},{"type":"depends-on","display":"Library Common","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon|2022.1.0"},{"type":"depends-on","display":"Library Config","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommonConfig|2022.1.0"},{"type":"depends-on","display":"Library Routines","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSRoutines|2022.1.0"},{"type":"depends-on","display":"Library MMECalculator","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/MMECalculator|3.0.0"},{"type":"depends-on","display":"Library FHIRHelpers","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"},{"type":"depends-on","display":"Library Common","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/OpioidCDSCommon|2022.1.0"},{"type":"depends-on","display":"Library OMTKLogic","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/OMTKLogic|3.0.0"},{"type":"depends-on","display":"Library OMTKData","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/OMTKData|3.0.0"},{"type":"depends-on","display":"Library FHIRHelpers","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"},{"type":"depends-on","display":"Library ConversionFactors","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/ConversionFactors|3.0.0"},{"type":"depends-on","display":"Library CDCMMEClinicalConversionFactors","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/CDCMMEClinicalConversionFactors|3.0.0"},{"type":"depends-on","display":"Library FHIRHelpers","resource":"http://fhir.org/guides/cdc/opioid-cds/Library/FHIRHelpers|4.0.1"},{"type":"depends-on","display":"Code system MedicationRequest Category","resource":"http://terminology.hl7.org/CodeSystem/medicationrequest-category"},{"type":"depends-on","display":"Code system Usage Context Type","resource":"http://terminology.hl7.org/CodeSystem/usage-context-type"},{"type":"depends-on","display":"Code system CDC MME Usage Context Codes","resource":"http://fhir.org/guides/cdc/opioid-mme-r4/CodeSystem/CDCMMEUsageContextCodes"},{"type":"depends-on","display":"Code system Condition Category","resource":"http://terminology.hl7.org/CodeSystem/condition-category"},{"type":"depends-on","display":"Code system US Core Condition Category","resource":"http://hl7.org/fhir/us/core/CodeSystem/condition-category"},{"type":"depends-on","display":"Code system Condition Clinical Status","resource":"http://terminology.hl7.org/CodeSystem/condition-clinical"},{"type":"depends-on","display":"Value set Opioid Analgesics with Ambulatory Misuse Potential","resource":"http://fhir.org/guides/cdc/opioid-cds/ValueSet/opioid-analgesics-with-ambulatory-misuse-potential"},{"type":"depends-on","display":"Value set Limited Life Expectancy Conditions","resource":"http://fhir.org/guides/cdc/opioid-cds/ValueSet/limited-life-expectancy-conditions"},{"type":"depends-on","display":"Value set Therapies Indicating End of Life Care","resource":"http://fhir.org/guides/cdc/opioid-cds/ValueSet/therapies-indicating-end-of-life-care"},{"type":"depends-on","display":"Value set Conditions Likely Terminal for Opioid Prescribing","resource":"http://fhir.org/guides/cdc/opioid-cds/ValueSet/conditions-likely-terminal-for-opioid-prescribing"},{"type":"depends-on","display":"Value set Hospice Procedure","resource":"http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"}],"parameter":[{"name":"ContextPrescriptions","use":"in","min":0,"max":"*","type":"MedicationRequest"},{"name":"ErrorLevel","use":"in","min":0,"max":"1","type":"string"},{"name":"ConversionFactorSupplementName","use":"in","min":0,"max":"1","type":"string"},{"name":"Patient","use":"out","min":0,"max":"1","type":"Patient"},{"name":"Chronic Pain Opioid Analgesic with Ambulatory Misuse Potential Prescriptions","use":"out","min":0,"max":"*","type":"MedicationRequest"},{"name":"Total MME","use":"out","min":0,"max":"1","type":"Quantity"},{"name":"Taper Now","use":"out","min":0,"max":"1","type":"boolean"},{"name":"Consider Tapering","use":"out","min":0,"max":"1","type":"boolean"},{"name":"Patient Is Being Prescribed Opioid Analgesic with Ambulatory Misuse Potential","use":"out","min":0,"max":"1","type":"boolean"},{"name":"Inclusion Criteria","use":"out","min":0,"max":"1","type":"boolean"},{"name":"Exclusion Criteria","use":"out","min":0,"max":"1","type":"boolean"},{"name":"Is Recommendation Applicable?","use":"out","min":0,"max":"1","type":"boolean"},{"name":"Get Indicator","use":"out","min":0,"max":"1","type":"string"},{"name":"Get Summary","use":"out","min":0,"max":"1","type":"string"},{"name":"Get Detail","use":"out","min":0,"max":"1","type":"string"}],"dataRequirement":[{"type":"Patient","profile":["http://hl7.org/fhir/StructureDefinition/Patient"]},{"type":"Medication","profile":["http://hl7.org/fhir/StructureDefinition/Medication"],"mustSupport":["id"],"codeFilter":[{"path":"id"}]},{"type":"Condition","profile":["http://hl7.org/fhir/StructureDefinition/Condition"],"mustSupport":["category"],"codeFilter":[{"path":"category","code":[{"system":"http://terminology.hl7.org/CodeSystem/condition-category","code":"encounter-diagnosis"}]}]},{"type":"Condition","profile":["http://hl7.org/fhir/StructureDefinition/Condition"],"mustSupport":["category"],"codeFilter":[{"path":"category","code":[{"system":"http://terminology.hl7.org/CodeSystem/condition-category","code":"problem-list-item"}]}]},{"type":"Condition","profile":["http://hl7.org/fhir/StructureDefinition/Condition"],"mustSupport":["category"],"codeFilter":[{"path":"category","code":[{"system":"http://hl7.org/fhir/us/core/CodeSystem/condition-category","code":"Health Concern"}]}]},{"type":"ServiceRequest","profile":["http://hl7.org/fhir/StructureDefinition/ServiceRequest"]},{"type":"ServiceRequest","profile":["http://hl7.org/fhir/StructureDefinition/ServiceRequest"],"mustSupport":["status","intent","authoredOn","code"]},{"type":"Procedure","profile":["http://hl7.org/fhir/StructureDefinition/Procedure"],"mustSupport":["code","status","status.value"],"codeFilter":[{"path":"code","valueSet":"http://fhir.org/guides/cdc/opioid-cds/ValueSet/hospice-procedure"}]},{"type":"ServiceRequest","profile":["http://hl7.org/fhir/StructureDefinition/ServiceRequest"],"mustSupport":["code","status","status.value"]},{"type":"Encounter","profile":["http://hl7.org/fhir/StructureDefinition/Encounter"],"mustSupport":["period","period.start","status","status.value"]}],"content":[{"contentType":"text/cql","data":""},{"contentType":"application/elm+xml","data":""},{"contentType":"application/elm+json","data":""}]}